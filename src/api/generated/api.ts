/* tslint:disable */
/* eslint-disable */
/**
 * Shougram API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ActivityScopeTypeOrmEntity
 */
export interface ActivityScopeTypeOrmEntity {
    /**
     * 
     * @type {string}
     * @memberof ActivityScopeTypeOrmEntity
     */
    'title': ActivityScopeTypeOrmEntityTitleEnum;
}

export const ActivityScopeTypeOrmEntityTitleEnum = {
    Cinema: 'cinema',
    Music: 'music',
    Blogging: 'blogging',
    TicTok: 'tic_tok',
    Tv: 'tv',
    Sport: 'sport',
    Humor: 'humor',
    Youtube: 'youtube',
    Modeling: 'modeling',
    Business: 'business',
    Art: 'art',
    Literature: 'literature'
} as const;

export type ActivityScopeTypeOrmEntityTitleEnum = typeof ActivityScopeTypeOrmEntityTitleEnum[keyof typeof ActivityScopeTypeOrmEntityTitleEnum];

/**
 * 
 * @export
 * @interface AdminDto
 */
export interface AdminDto {
    /**
     * 
     * @type {string}
     * @memberof AdminDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdminDto
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface AdminUpdateArtistProfileDto
 */
export interface AdminUpdateArtistProfileDto {
    /**
     * 
     * @type {string}
     * @memberof AdminUpdateArtistProfileDto
     */
    'status': AdminUpdateArtistProfileDtoStatusEnum;
}

export const AdminUpdateArtistProfileDtoStatusEnum = {
    New: 'new',
    Active: 'active',
    Blocked: 'blocked'
} as const;

export type AdminUpdateArtistProfileDtoStatusEnum = typeof AdminUpdateArtistProfileDtoStatusEnum[keyof typeof AdminUpdateArtistProfileDtoStatusEnum];

/**
 * 
 * @export
 * @interface AdminUpdateOrderDto
 */
export interface AdminUpdateOrderDto {
    /**
     * 
     * @type {string}
     * @memberof AdminUpdateOrderDto
     */
    'status'?: AdminUpdateOrderDtoStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof AdminUpdateOrderDto
     */
    'fundsTransferredToArtist'?: boolean;
}

export const AdminUpdateOrderDtoStatusEnum = {
    PendingPayment: 'pending_payment',
    Pending: 'pending',
    Accepted: 'accepted',
    Rejected: 'rejected',
    Cancelled: 'cancelled',
    DoneWaitingForApproval: 'done_waiting_for_approval',
    DoneApproved: 'done_approved',
    WaitingForRework: 'waiting_for_rework',
    UnderConsideration: 'under_consideration',
    DoneAfterConsideration: 'done_after_consideration',
    RejectAfterConsideration: 'reject_after_consideration'
} as const;

export type AdminUpdateOrderDtoStatusEnum = typeof AdminUpdateOrderDtoStatusEnum[keyof typeof AdminUpdateOrderDtoStatusEnum];

/**
 * 
 * @export
 * @interface AdminsSignInBodyDto
 */
export interface AdminsSignInBodyDto {
    /**
     * 
     * @type {string}
     * @memberof AdminsSignInBodyDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AdminsSignInBodyDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ArtistAddServiceParamsDTO
 */
export interface ArtistAddServiceParamsDTO {
    /**
     * 
     * @type {number}
     * @memberof ArtistAddServiceParamsDTO
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof ArtistAddServiceParamsDTO
     */
    'currency': ArtistAddServiceParamsDTOCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof ArtistAddServiceParamsDTO
     */
    'limitDays': number;
    /**
     * 
     * @type {number}
     * @memberof ArtistAddServiceParamsDTO
     */
    'type': ArtistAddServiceParamsDTOTypeEnum;
}

export const ArtistAddServiceParamsDTOCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type ArtistAddServiceParamsDTOCurrencyEnum = typeof ArtistAddServiceParamsDTOCurrencyEnum[keyof typeof ArtistAddServiceParamsDTOCurrencyEnum];
export const ArtistAddServiceParamsDTOTypeEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type ArtistAddServiceParamsDTOTypeEnum = typeof ArtistAddServiceParamsDTOTypeEnum[keyof typeof ArtistAddServiceParamsDTOTypeEnum];

/**
 * 
 * @export
 * @interface ArtistCancelOrderDto
 */
export interface ArtistCancelOrderDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistCancelOrderDto
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface ArtistCompleteRegistrationDto
 */
export interface ArtistCompleteRegistrationDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistCompleteRegistrationDto
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof ArtistCompleteRegistrationDto
     */
    'isHiddenEmail'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ArtistCompleteRegistrationDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistCompleteRegistrationDto
     */
    'name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ArtistCompleteRegistrationDto
     */
    'activityScopes': Array<ArtistCompleteRegistrationDtoActivityScopesEnum>;
    /**
     * 
     * @type {ArtistCreateServiceInfoDTO}
     * @memberof ArtistCompleteRegistrationDto
     */
    'service': ArtistCreateServiceInfoDTO;
}

export const ArtistCompleteRegistrationDtoActivityScopesEnum = {
    Cinema: 'cinema',
    Music: 'music',
    Blogging: 'blogging',
    TicTok: 'tic_tok',
    Tv: 'tv',
    Sport: 'sport',
    Humor: 'humor',
    Youtube: 'youtube',
    Modeling: 'modeling',
    Business: 'business',
    Art: 'art',
    Literature: 'literature'
} as const;

export type ArtistCompleteRegistrationDtoActivityScopesEnum = typeof ArtistCompleteRegistrationDtoActivityScopesEnum[keyof typeof ArtistCompleteRegistrationDtoActivityScopesEnum];

/**
 * 
 * @export
 * @interface ArtistCreateOrderExecutionDto
 */
export interface ArtistCreateOrderExecutionDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistCreateOrderExecutionDto
     */
    'videoFileAssetId': string;
}
/**
 * 
 * @export
 * @interface ArtistCreateServiceInfoDTO
 */
export interface ArtistCreateServiceInfoDTO {
    /**
     * 
     * @type {number}
     * @memberof ArtistCreateServiceInfoDTO
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof ArtistCreateServiceInfoDTO
     */
    'currency': ArtistCreateServiceInfoDTOCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof ArtistCreateServiceInfoDTO
     */
    'limitDays': number;
}

export const ArtistCreateServiceInfoDTOCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type ArtistCreateServiceInfoDTOCurrencyEnum = typeof ArtistCreateServiceInfoDTOCurrencyEnum[keyof typeof ArtistCreateServiceInfoDTOCurrencyEnum];

/**
 * 
 * @export
 * @interface ArtistCustomerProfileResponseDto
 */
export interface ArtistCustomerProfileResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistCustomerProfileResponseDto
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistCustomerProfileResponseDto
     */
    'nickName': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistCustomerProfileResponseDto
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistCustomerProfileResponseDto
     */
    'avatarCroppedUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface ArtistFindOrdersFiltersRequestDTO
 */
export interface ArtistFindOrdersFiltersRequestDTO {
    /**
     * 
     * @type {Array<ORDERSTATUS>}
     * @memberof ArtistFindOrdersFiltersRequestDTO
     */
    'statuses'?: Array<ORDERSTATUS> | null;
    /**
     * 
     * @type {Array<ORDEROCCASION>}
     * @memberof ArtistFindOrdersFiltersRequestDTO
     */
    'occasions'?: Array<ORDEROCCASION> | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistFindOrdersFiltersRequestDTO
     */
    'search'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistFindOrdersFiltersRequestDTO
     */
    'date'?: string | null;
    /**
     * 
     * @type {CustomerFindOrdersFiltersRequestDTODateRange}
     * @memberof ArtistFindOrdersFiltersRequestDTO
     */
    'dateRange'?: CustomerFindOrdersFiltersRequestDTODateRange | null;
}
/**
 * 
 * @export
 * @interface ArtistFindOrdersRequestDTO
 */
export interface ArtistFindOrdersRequestDTO {
    /**
     * 
     * @type {ArtistFindOrdersFiltersRequestDTO}
     * @memberof ArtistFindOrdersRequestDTO
     */
    'filters'?: ArtistFindOrdersFiltersRequestDTO;
    /**
     * 
     * @type {string}
     * @memberof ArtistFindOrdersRequestDTO
     */
    'nextCursor'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArtistFindOrdersRequestDTO
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface ArtistFindOrdersResponseDTO
 */
export interface ArtistFindOrdersResponseDTO {
    /**
     * 
     * @type {Array<ArtistOrderResponseDto>}
     * @memberof ArtistFindOrdersResponseDTO
     */
    'data': Array<ArtistOrderResponseDto>;
    /**
     * 
     * @type {CursorPaginatedMeta}
     * @memberof ArtistFindOrdersResponseDTO
     */
    'meta': CursorPaginatedMeta;
}
/**
 * 
 * @export
 * @interface ArtistGetCommentsRequestDTO
 */
export interface ArtistGetCommentsRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof ArtistGetCommentsRequestDTO
     */
    'nextCursor'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArtistGetCommentsRequestDTO
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface ArtistGetOrdersCommentsResponseDTO
 */
export interface ArtistGetOrdersCommentsResponseDTO {
    /**
     * 
     * @type {Array<ArtistOrderCommentResponseDto>}
     * @memberof ArtistGetOrdersCommentsResponseDTO
     */
    'data': Array<ArtistOrderCommentResponseDto>;
    /**
     * 
     * @type {CursorPaginatedMeta}
     * @memberof ArtistGetOrdersCommentsResponseDTO
     */
    'meta': CursorPaginatedMeta;
}
/**
 * 
 * @export
 * @interface ArtistGetPublishedVideosRequestDTO
 */
export interface ArtistGetPublishedVideosRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof ArtistGetPublishedVideosRequestDTO
     */
    'nextCursor'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArtistGetPublishedVideosRequestDTO
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface ArtistMeResponseDto
 */
export interface ArtistMeResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistMeResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistMeResponseDto
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ArtistMeResponseDto
     */
    'phoneNumberConfirmed': boolean;
    /**
     * 
     * @type {string}
     * @memberof ArtistMeResponseDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ArtistMeResponseDto
     */
    'emailConfirmed': boolean;
    /**
     * 
     * @type {string}
     * @memberof ArtistMeResponseDto
     */
    'type': ArtistMeResponseDtoTypeEnum;
    /**
     * 
     * @type {ArtistMeResponseDtoProfile}
     * @memberof ArtistMeResponseDto
     */
    'profile'?: ArtistMeResponseDtoProfile;
}

export const ArtistMeResponseDtoTypeEnum = {
    Customer: 'CUSTOMER',
    Artist: 'ARTIST'
} as const;

export type ArtistMeResponseDtoTypeEnum = typeof ArtistMeResponseDtoTypeEnum[keyof typeof ArtistMeResponseDtoTypeEnum];

/**
 * @type ArtistMeResponseDtoProfile
 * @export
 */
export type ArtistMeResponseDtoProfile = ArtistProfileMeResponseDto;

/**
 * 
 * @export
 * @interface ArtistOrderCommentResponseDto
 */
export interface ArtistOrderCommentResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderCommentResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderCommentResponseDto
     */
    'orderId': string;
    /**
     * 
     * @type {number}
     * @memberof ArtistOrderCommentResponseDto
     */
    'grade': number;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderCommentResponseDto
     */
    'positiveComment'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderCommentResponseDto
     */
    'negativeComment'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderCommentResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {ArtistCustomerProfileResponseDto}
     * @memberof ArtistOrderCommentResponseDto
     */
    'customer': ArtistCustomerProfileResponseDto;
}
/**
 * 
 * @export
 * @interface ArtistOrderExecutionResponseDto
 */
export interface ArtistOrderExecutionResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderExecutionResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderExecutionResponseDto
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderExecutionResponseDto
     */
    'videoFileAssetId': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderExecutionResponseDto
     */
    'videoFilePlaybackId': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderExecutionResponseDto
     */
    'customerRejectComment'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ArtistOrderExecutionResponseDto
     */
    'viewedByCustomer'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderExecutionResponseDto
     */
    'status': ArtistOrderExecutionResponseDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderExecutionResponseDto
     */
    'createdAt': string;
}

export const ArtistOrderExecutionResponseDtoStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected'
} as const;

export type ArtistOrderExecutionResponseDtoStatusEnum = typeof ArtistOrderExecutionResponseDtoStatusEnum[keyof typeof ArtistOrderExecutionResponseDtoStatusEnum];

/**
 * 
 * @export
 * @interface ArtistOrderResponseDto
 */
export interface ArtistOrderResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDto
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ArtistOrderResponseDto
     */
    'number'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDto
     */
    'customerClientId': string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDto
     */
    'artistClientId': string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDto
     */
    'status': ArtistOrderResponseDtoStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ArtistOrderResponseDto
     */
    'allowedToPublish': boolean;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDto
     */
    'occasion': ArtistOrderResponseDtoOccasionEnum;
    /**
     * 
     * @type {OrderDetailsResponseDto}
     * @memberof ArtistOrderResponseDto
     */
    'orderDetails': OrderDetailsResponseDto;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {CustomerOrderResponseDtoOrderPayment}
     * @memberof ArtistOrderResponseDto
     */
    'orderPayment'?: CustomerOrderResponseDtoOrderPayment | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDto
     */
    'cancelComment'?: string;
    /**
     * 
     * @type {Array<OrderStatusHistoryItemDto>}
     * @memberof ArtistOrderResponseDto
     */
    'statusHistory'?: Array<OrderStatusHistoryItemDto>;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDto
     */
    'actionUntilAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDto
     */
    'waitForAction'?: ArtistOrderResponseDtoWaitForActionEnum;
    /**
     * 
     * @type {Array<OrderExecutionBaseResponseDto>}
     * @memberof ArtistOrderResponseDto
     */
    'orderExecutions'?: Array<OrderExecutionBaseResponseDto>;
    /**
     * 
     * @type {Array<OrderPaymentBaseResponseDto>}
     * @memberof ArtistOrderResponseDto
     */
    'orderPayments'?: Array<OrderPaymentBaseResponseDto>;
    /**
     * 
     * @type {ArtistOrderCommentResponseDto}
     * @memberof ArtistOrderResponseDto
     */
    'comment'?: ArtistOrderCommentResponseDto;
    /**
     * 
     * @type {ArtistOrderResponseDtoCustomerProfile}
     * @memberof ArtistOrderResponseDto
     */
    'customerProfile': ArtistOrderResponseDtoCustomerProfile | null;
}

export const ArtistOrderResponseDtoStatusEnum = {
    PendingPayment: 'pending_payment',
    Pending: 'pending',
    Accepted: 'accepted',
    Rejected: 'rejected',
    Cancelled: 'cancelled',
    DoneWaitingForApproval: 'done_waiting_for_approval',
    DoneApproved: 'done_approved',
    WaitingForRework: 'waiting_for_rework',
    UnderConsideration: 'under_consideration',
    DoneAfterConsideration: 'done_after_consideration',
    RejectAfterConsideration: 'reject_after_consideration'
} as const;

export type ArtistOrderResponseDtoStatusEnum = typeof ArtistOrderResponseDtoStatusEnum[keyof typeof ArtistOrderResponseDtoStatusEnum];
export const ArtistOrderResponseDtoOccasionEnum = {
    Birthday: 'birthday',
    Wedding: 'wedding',
    NewYear: 'new_year',
    Anniversary: 'anniversary',
    Guidance: 'guidance',
    Advice: 'advice',
    Other: 'other'
} as const;

export type ArtistOrderResponseDtoOccasionEnum = typeof ArtistOrderResponseDtoOccasionEnum[keyof typeof ArtistOrderResponseDtoOccasionEnum];
export const ArtistOrderResponseDtoWaitForActionEnum = {
    ArtistApply: 'artist_apply',
    CompleteOrder: 'complete_order',
    CustomerConfirmOrder: 'customer_confirm_order'
} as const;

export type ArtistOrderResponseDtoWaitForActionEnum = typeof ArtistOrderResponseDtoWaitForActionEnum[keyof typeof ArtistOrderResponseDtoWaitForActionEnum];

/**
 * 
 * @export
 * @interface ArtistOrderResponseDtoCustomerProfile
 */
export interface ArtistOrderResponseDtoCustomerProfile {
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDtoCustomerProfile
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDtoCustomerProfile
     */
    'nickName': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDtoCustomerProfile
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistOrderResponseDtoCustomerProfile
     */
    'avatarCroppedUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface ArtistProfileMeResponseDto
 */
export interface ArtistProfileMeResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileMeResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileMeResponseDto
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileMeResponseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileMeResponseDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {ArtistSocialNetworksLinksTypeDto}
     * @memberof ArtistProfileMeResponseDto
     */
    'socialNetworksLinks'?: ArtistSocialNetworksLinksTypeDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof ArtistProfileMeResponseDto
     */
    'activityScopes': Array<ArtistProfileMeResponseDtoActivityScopesEnum>;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileMeResponseDto
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileMeResponseDto
     */
    'avatarCroppedUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileMeResponseDto
     */
    'videoPresentationAssetId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileMeResponseDto
     */
    'videoPresentationPlaybackId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ArtistProfileMeResponseDto
     */
    'isHiddenEmail': boolean;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileMeResponseDto
     */
    'status': ArtistProfileMeResponseDtoStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ArtistProfileMeResponseDto
     */
    'rating': number;
    /**
     * 
     * @type {CustomerArtistProfileResponseDTOService}
     * @memberof ArtistProfileMeResponseDto
     */
    'service'?: CustomerArtistProfileResponseDTOService | null;
    /**
     * 
     * @type {boolean}
     * @memberof ArtistProfileMeResponseDto
     */
    'isFavorite'?: boolean;
}

export const ArtistProfileMeResponseDtoActivityScopesEnum = {
    Cinema: 'cinema',
    Music: 'music',
    Blogging: 'blogging',
    TicTok: 'tic_tok',
    Tv: 'tv',
    Sport: 'sport',
    Humor: 'humor',
    Youtube: 'youtube',
    Modeling: 'modeling',
    Business: 'business',
    Art: 'art',
    Literature: 'literature'
} as const;

export type ArtistProfileMeResponseDtoActivityScopesEnum = typeof ArtistProfileMeResponseDtoActivityScopesEnum[keyof typeof ArtistProfileMeResponseDtoActivityScopesEnum];
export const ArtistProfileMeResponseDtoStatusEnum = {
    New: 'new',
    Active: 'active',
    Blocked: 'blocked'
} as const;

export type ArtistProfileMeResponseDtoStatusEnum = typeof ArtistProfileMeResponseDtoStatusEnum[keyof typeof ArtistProfileMeResponseDtoStatusEnum];

/**
 * 
 * @export
 * @interface ArtistProfileModel
 */
export interface ArtistProfileModel {
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'description'?: string;
    /**
     * 
     * @type {object}
     * @memberof ArtistProfileModel
     */
    'socialNetworksLinks'?: object;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'avatarFullKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'avatarCroppedKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'avatarCroppedUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'videoPresentationKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'videoPresentationUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'videoPresentationAssetId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'videoPresentationPlaybackId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'status': ArtistProfileModelStatusEnum;
    /**
     * 
     * @type {Array<object>}
     * @memberof ArtistProfileModel
     */
    'activityScopes': Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof ArtistProfileModel
     */
    'isHiddenEmail': boolean;
    /**
     * 
     * @type {number}
     * @memberof ArtistProfileModel
     */
    'rating': number;
    /**
     * 
     * @type {ClientModel}
     * @memberof ArtistProfileModel
     */
    'client'?: ClientModel;
    /**
     * 
     * @type {ArtistServiceModel}
     * @memberof ArtistProfileModel
     */
    'service'?: ArtistServiceModel;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileModel
     */
    'id': string;
}

export const ArtistProfileModelStatusEnum = {
    New: 'new',
    Active: 'active',
    Blocked: 'blocked'
} as const;

export type ArtistProfileModelStatusEnum = typeof ArtistProfileModelStatusEnum[keyof typeof ArtistProfileModelStatusEnum];

/**
 * 
 * @export
 * @interface ArtistProfileTypeOrmEntity
 */
export interface ArtistProfileTypeOrmEntity {
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'socialNetworksLinks'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'avatarFullKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'avatarCroppedKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'avatarCroppedUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'videoPresentationKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'videoPresentationUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'videoPresentationAssetId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'videoPresentationPlaybackId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'status': ArtistProfileTypeOrmEntityStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'isHiddenEmail': boolean;
    /**
     * 
     * @type {number}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'rating': number;
    /**
     * 
     * @type {Array<ActivityScopeTypeOrmEntity>}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'activityScopes'?: Array<ActivityScopeTypeOrmEntity>;
    /**
     * 
     * @type {ClientTypeOrmEntity}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'client'?: ClientTypeOrmEntity;
    /**
     * 
     * @type {ArtistServiceTypeOrmEntity}
     * @memberof ArtistProfileTypeOrmEntity
     */
    'service'?: ArtistServiceTypeOrmEntity;
}

export const ArtistProfileTypeOrmEntityStatusEnum = {
    New: 'new',
    Active: 'active',
    Blocked: 'blocked'
} as const;

export type ArtistProfileTypeOrmEntityStatusEnum = typeof ArtistProfileTypeOrmEntityStatusEnum[keyof typeof ArtistProfileTypeOrmEntityStatusEnum];

/**
 * 
 * @export
 * @interface ArtistRejectOrderDto
 */
export interface ArtistRejectOrderDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistRejectOrderDto
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface ArtistServiceInfoResponseDTO
 */
export interface ArtistServiceInfoResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof ArtistServiceInfoResponseDTO
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof ArtistServiceInfoResponseDTO
     */
    'currency': ArtistServiceInfoResponseDTOCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof ArtistServiceInfoResponseDTO
     */
    'limitDays': number;
}

export const ArtistServiceInfoResponseDTOCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type ArtistServiceInfoResponseDTOCurrencyEnum = typeof ArtistServiceInfoResponseDTOCurrencyEnum[keyof typeof ArtistServiceInfoResponseDTOCurrencyEnum];

/**
 * 
 * @export
 * @interface ArtistServiceModel
 */
export interface ArtistServiceModel {
    /**
     * 
     * @type {string}
     * @memberof ArtistServiceModel
     */
    'artistClientId': string;
    /**
     * 
     * @type {number}
     * @memberof ArtistServiceModel
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof ArtistServiceModel
     */
    'currency': ArtistServiceModelCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof ArtistServiceModel
     */
    'limitDays': number;
    /**
     * 
     * @type {number}
     * @memberof ArtistServiceModel
     */
    'type': ArtistServiceModelTypeEnum;
    /**
     * 
     * @type {ArtistProfileModel}
     * @memberof ArtistServiceModel
     */
    'artistProfile'?: ArtistProfileModel;
    /**
     * 
     * @type {string}
     * @memberof ArtistServiceModel
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistServiceModel
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistServiceModel
     */
    'id': string;
}

export const ArtistServiceModelCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type ArtistServiceModelCurrencyEnum = typeof ArtistServiceModelCurrencyEnum[keyof typeof ArtistServiceModelCurrencyEnum];
export const ArtistServiceModelTypeEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type ArtistServiceModelTypeEnum = typeof ArtistServiceModelTypeEnum[keyof typeof ArtistServiceModelTypeEnum];

/**
 * 
 * @export
 * @interface ArtistServiceTypeOrmEntity
 */
export interface ArtistServiceTypeOrmEntity {
    /**
     * 
     * @type {string}
     * @memberof ArtistServiceTypeOrmEntity
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistServiceTypeOrmEntity
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistServiceTypeOrmEntity
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ArtistServiceTypeOrmEntity
     */
    'artistClientId': string;
    /**
     * 
     * @type {number}
     * @memberof ArtistServiceTypeOrmEntity
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof ArtistServiceTypeOrmEntity
     */
    'currency': ArtistServiceTypeOrmEntityCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof ArtistServiceTypeOrmEntity
     */
    'limitDays': number;
    /**
     * 
     * @type {ArtistProfileTypeOrmEntity}
     * @memberof ArtistServiceTypeOrmEntity
     */
    'artistProfile'?: ArtistProfileTypeOrmEntity;
    /**
     * 
     * @type {number}
     * @memberof ArtistServiceTypeOrmEntity
     */
    'type': number;
}

export const ArtistServiceTypeOrmEntityCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type ArtistServiceTypeOrmEntityCurrencyEnum = typeof ArtistServiceTypeOrmEntityCurrencyEnum[keyof typeof ArtistServiceTypeOrmEntityCurrencyEnum];

/**
 * 
 * @export
 * @interface ArtistSocialNetworksLinksTypeDto
 */
export interface ArtistSocialNetworksLinksTypeDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistSocialNetworksLinksTypeDto
     */
    'instagram'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistSocialNetworksLinksTypeDto
     */
    'facebook'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistSocialNetworksLinksTypeDto
     */
    'telegram'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistSocialNetworksLinksTypeDto
     */
    'tiktok'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistSocialNetworksLinksTypeDto
     */
    'youtube'?: string;
}
/**
 * 
 * @export
 * @interface ArtistUpdateProfileDto
 */
export interface ArtistUpdateProfileDto {
    /**
     * 
     * @type {string}
     * @memberof ArtistUpdateProfileDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistUpdateProfileDto
     */
    'description'?: string;
    /**
     * 
     * @type {ArtistSocialNetworksLinksTypeDto}
     * @memberof ArtistUpdateProfileDto
     */
    'socialNetworksLinks'?: ArtistSocialNetworksLinksTypeDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof ArtistUpdateProfileDto
     */
    'activityScopes'?: Array<ArtistUpdateProfileDtoActivityScopesEnum>;
    /**
     * 
     * @type {string}
     * @memberof ArtistUpdateProfileDto
     */
    'avatarFullKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistUpdateProfileDto
     */
    'avatarCroppedKey'?: string;
    /**
     * assetId of ready video file
     * @type {string}
     * @memberof ArtistUpdateProfileDto
     */
    'videoPresentationAssetId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ArtistUpdateProfileDto
     */
    'isHiddenEmail'?: boolean;
    /**
     * 
     * @type {ArtistCreateServiceInfoDTO}
     * @memberof ArtistUpdateProfileDto
     */
    'service'?: ArtistCreateServiceInfoDTO;
}

export const ArtistUpdateProfileDtoActivityScopesEnum = {
    Cinema: 'cinema',
    Music: 'music',
    Blogging: 'blogging',
    TicTok: 'tic_tok',
    Tv: 'tv',
    Sport: 'sport',
    Humor: 'humor',
    Youtube: 'youtube',
    Modeling: 'modeling',
    Business: 'business',
    Art: 'art',
    Literature: 'literature'
} as const;

export type ArtistUpdateProfileDtoActivityScopesEnum = typeof ArtistUpdateProfileDtoActivityScopesEnum[keyof typeof ArtistUpdateProfileDtoActivityScopesEnum];

/**
 * 
 * @export
 * @interface AuthAdminDto
 */
export interface AuthAdminDto {
    /**
     * 
     * @type {AdminDto}
     * @memberof AuthAdminDto
     */
    'user': AdminDto;
    /**
     * 
     * @type {string}
     * @memberof AuthAdminDto
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ClientArtistsPublishedVideoResponseDTO
 */
export interface ClientArtistsPublishedVideoResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof ClientArtistsPublishedVideoResponseDTO
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof ClientArtistsPublishedVideoResponseDTO
     */
    'videoFileAssetId': string;
    /**
     * 
     * @type {string}
     * @memberof ClientArtistsPublishedVideoResponseDTO
     */
    'videoFilePlaybackId': string;
    /**
     * 
     * @type {PublishedVideoCustomerInfoResponseDTO}
     * @memberof ClientArtistsPublishedVideoResponseDTO
     */
    'customer'?: PublishedVideoCustomerInfoResponseDTO;
}
/**
 * 
 * @export
 * @interface ClientChangeEmailVerifyResponseDTO
 */
export interface ClientChangeEmailVerifyResponseDTO {
    /**
     * 
     * @type {ClientResponseDto}
     * @memberof ClientChangeEmailVerifyResponseDTO
     */
    'client': ClientResponseDto;
}
/**
 * 
 * @export
 * @interface ClientChangePhoneNumberVerifyResponseDTO
 */
export interface ClientChangePhoneNumberVerifyResponseDTO {
    /**
     * 
     * @type {ClientResponseDto}
     * @memberof ClientChangePhoneNumberVerifyResponseDTO
     */
    'client': ClientResponseDto;
}
/**
 * 
 * @export
 * @interface ClientCreateRequestEmailSignUpDto
 */
export interface ClientCreateRequestEmailSignUpDto {
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestEmailSignUpDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestEmailSignUpDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestEmailSignUpDto
     */
    'type'?: ClientCreateRequestEmailSignUpDtoTypeEnum;
}

export const ClientCreateRequestEmailSignUpDtoTypeEnum = {
    Customer: 'CUSTOMER',
    Artist: 'ARTIST'
} as const;

export type ClientCreateRequestEmailSignUpDtoTypeEnum = typeof ClientCreateRequestEmailSignUpDtoTypeEnum[keyof typeof ClientCreateRequestEmailSignUpDtoTypeEnum];

/**
 * 
 * @export
 * @interface ClientCreateRequestEmailSignUpResponseDto
 */
export interface ClientCreateRequestEmailSignUpResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestEmailSignUpResponseDto
     */
    'nextRetryAvailableAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestEmailSignUpResponseDto
     */
    'verificationPayload'?: string;
}
/**
 * 
 * @export
 * @interface ClientCreateRequestPhoneNumberSignUpDto
 */
export interface ClientCreateRequestPhoneNumberSignUpDto {
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestPhoneNumberSignUpDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestPhoneNumberSignUpDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestPhoneNumberSignUpDto
     */
    'type'?: ClientCreateRequestPhoneNumberSignUpDtoTypeEnum;
}

export const ClientCreateRequestPhoneNumberSignUpDtoTypeEnum = {
    Customer: 'CUSTOMER',
    Artist: 'ARTIST'
} as const;

export type ClientCreateRequestPhoneNumberSignUpDtoTypeEnum = typeof ClientCreateRequestPhoneNumberSignUpDtoTypeEnum[keyof typeof ClientCreateRequestPhoneNumberSignUpDtoTypeEnum];

/**
 * 
 * @export
 * @interface ClientCreateRequestPhoneNumberSignUpResponseDto
 */
export interface ClientCreateRequestPhoneNumberSignUpResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestPhoneNumberSignUpResponseDto
     */
    'nextRetryAvailableAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestPhoneNumberSignUpResponseDto
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface ClientCreateRequestToChangeChangePhoneDto
 */
export interface ClientCreateRequestToChangeChangePhoneDto {
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestToChangeChangePhoneDto
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface ClientCreateRequestToChangeEmailDto
 */
export interface ClientCreateRequestToChangeEmailDto {
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestToChangeEmailDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ClientCreateRequestToChangePhoneNumberResponseDto
 */
export interface ClientCreateRequestToChangePhoneNumberResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestToChangePhoneNumberResponseDto
     */
    'nextRetryAvailableAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreateRequestToChangePhoneNumberResponseDto
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface ClientGetArtistsPublishedVideosResponseDTO
 */
export interface ClientGetArtistsPublishedVideosResponseDTO {
    /**
     * 
     * @type {Array<ClientArtistsPublishedVideoResponseDTO>}
     * @memberof ClientGetArtistsPublishedVideosResponseDTO
     */
    'data': Array<ClientArtistsPublishedVideoResponseDTO>;
    /**
     * 
     * @type {CursorPaginatedMeta}
     * @memberof ClientGetArtistsPublishedVideosResponseDTO
     */
    'meta': CursorPaginatedMeta;
}
/**
 * 
 * @export
 * @interface ClientGetPhotoPresignedUrlResponseDto
 */
export interface ClientGetPhotoPresignedUrlResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ClientGetPhotoPresignedUrlResponseDto
     */
    'presignedUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ClientGetPhotoPresignedUrlResponseDto
     */
    'fileKey': string;
}
/**
 * 
 * @export
 * @interface ClientGetPresignedPutUrlDto
 */
export interface ClientGetPresignedPutUrlDto {
    /**
     * 
     * @type {string}
     * @memberof ClientGetPresignedPutUrlDto
     */
    'fileName': string;
    /**
     * 
     * @type {string}
     * @memberof ClientGetPresignedPutUrlDto
     */
    'fileExtension': ClientGetPresignedPutUrlDtoFileExtensionEnum;
    /**
     * 
     * @type {string}
     * @memberof ClientGetPresignedPutUrlDto
     */
    'bucketFolder': ClientGetPresignedPutUrlDtoBucketFolderEnum;
}

export const ClientGetPresignedPutUrlDtoFileExtensionEnum = {
    Jpg: 'jpg',
    Jpeg: 'jpeg',
    Png: 'png'
} as const;

export type ClientGetPresignedPutUrlDtoFileExtensionEnum = typeof ClientGetPresignedPutUrlDtoFileExtensionEnum[keyof typeof ClientGetPresignedPutUrlDtoFileExtensionEnum];
export const ClientGetPresignedPutUrlDtoBucketFolderEnum = {
    ClientAvatars: 'client_avatars'
} as const;

export type ClientGetPresignedPutUrlDtoBucketFolderEnum = typeof ClientGetPresignedPutUrlDtoBucketFolderEnum[keyof typeof ClientGetPresignedPutUrlDtoBucketFolderEnum];

/**
 * 
 * @export
 * @interface ClientGetVideoAssetStatusResponseDto
 */
export interface ClientGetVideoAssetStatusResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ClientGetVideoAssetStatusResponseDto
     */
    'id': string;
    /**
     * possible values: \'preparing\' | \'ready\' | \'errored\'
     * @type {string}
     * @memberof ClientGetVideoAssetStatusResponseDto
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface ClientGetVideoPresignedPutUrlDto
 */
export interface ClientGetVideoPresignedPutUrlDto {
    /**
     * 
     * @type {string}
     * @memberof ClientGetVideoPresignedPutUrlDto
     */
    'videoType'?: ClientGetVideoPresignedPutUrlDtoVideoTypeEnum;
}

export const ClientGetVideoPresignedPutUrlDtoVideoTypeEnum = {
    Presentation: 'video_presentation',
    Order: 'video_order'
} as const;

export type ClientGetVideoPresignedPutUrlDtoVideoTypeEnum = typeof ClientGetVideoPresignedPutUrlDtoVideoTypeEnum[keyof typeof ClientGetVideoPresignedPutUrlDtoVideoTypeEnum];

/**
 * 
 * @export
 * @interface ClientGetVideoPresignedUrlResponseDto
 */
export interface ClientGetVideoPresignedUrlResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ClientGetVideoPresignedUrlResponseDto
     */
    'presignedUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ClientGetVideoPresignedUrlResponseDto
     */
    'uploadRequestId': string;
}
/**
 * 
 * @export
 * @interface ClientGetVideoUploadStatusResponseDto
 */
export interface ClientGetVideoUploadStatusResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ClientGetVideoUploadStatusResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ClientGetVideoUploadStatusResponseDto
     */
    'assetId': string | null;
    /**
     * possible values: \'waiting\' | \'asset_created\' | \'errored\' | \'cancelled\' | \'timed_out\'
     * @type {string}
     * @memberof ClientGetVideoUploadStatusResponseDto
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface ClientModel
 */
export interface ClientModel {
    /**
     * 
     * @type {string}
     * @memberof ClientModel
     */
    'type': ClientModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ClientModel
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ClientModel
     */
    'phoneNumberConfirmed': boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientModel
     */
    'email'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ClientModel
     */
    'emailConfirmed': boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientModel
     */
    'hashPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ClientModel
     */
    'status': ClientModelStatusEnum;
    /**
     * 
     * @type {ArtistProfileModel}
     * @memberof ClientModel
     */
    'artistProfile'?: ArtistProfileModel;
    /**
     * 
     * @type {CustomerProfileModel}
     * @memberof ClientModel
     */
    'customerProfile'?: CustomerProfileModel;
    /**
     * 
     * @type {string}
     * @memberof ClientModel
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientModel
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientModel
     */
    'id': string;
}

export const ClientModelTypeEnum = {
    Customer: 'CUSTOMER',
    Artist: 'ARTIST'
} as const;

export type ClientModelTypeEnum = typeof ClientModelTypeEnum[keyof typeof ClientModelTypeEnum];
export const ClientModelStatusEnum = {
    Registration: 'registration',
    Active: 'active'
} as const;

export type ClientModelStatusEnum = typeof ClientModelStatusEnum[keyof typeof ClientModelStatusEnum];

/**
 * 
 * @export
 * @interface ClientRecoverPasswordDto
 */
export interface ClientRecoverPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ClientRecoverPasswordDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ClientRecoverPasswordResponseDto
 */
export interface ClientRecoverPasswordResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ClientRecoverPasswordResponseDto
     */
    'nextRetryAvailableAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRecoverPasswordResponseDto
     */
    'verificationPayload'?: string;
}
/**
 * 
 * @export
 * @interface ClientResetPasswordDto
 */
export interface ClientResetPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ClientResetPasswordDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ClientResetPasswordDto
     */
    'verificationCode'?: string;
}
/**
 * 
 * @export
 * @interface ClientResponseDto
 */
export interface ClientResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ClientResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ClientResponseDto
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ClientResponseDto
     */
    'phoneNumberConfirmed': boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientResponseDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ClientResponseDto
     */
    'emailConfirmed': boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientResponseDto
     */
    'type': ClientResponseDtoTypeEnum;
    /**
     * 
     * @type {ClientResponseDtoProfile}
     * @memberof ClientResponseDto
     */
    'profile'?: ClientResponseDtoProfile;
}

export const ClientResponseDtoTypeEnum = {
    Customer: 'CUSTOMER',
    Artist: 'ARTIST'
} as const;

export type ClientResponseDtoTypeEnum = typeof ClientResponseDtoTypeEnum[keyof typeof ClientResponseDtoTypeEnum];

/**
 * @type ClientResponseDtoProfile
 * @export
 */
export type ClientResponseDtoProfile = ArtistProfileMeResponseDto | CustomerProfileMeResponseDto;

/**
 * 
 * @export
 * @interface ClientSignInByEmailDto
 */
export interface ClientSignInByEmailDto {
    /**
     * 
     * @type {string}
     * @memberof ClientSignInByEmailDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientSignInByEmailDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ClientSignInByPhoneDto
 */
export interface ClientSignInByPhoneDto {
    /**
     * 
     * @type {string}
     * @memberof ClientSignInByPhoneDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientSignInByPhoneDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ClientTypeOrmEntity
 */
export interface ClientTypeOrmEntity {
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntity
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntity
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntity
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntity
     */
    'type': ClientTypeOrmEntityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntity
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ClientTypeOrmEntity
     */
    'phoneNumberConfirmed': boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntity
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntity
     */
    'hashPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntity
     */
    'status': ClientTypeOrmEntityStatusEnum;
    /**
     * 
     * @type {ClientTypeOrmEntityArtistProfile}
     * @memberof ClientTypeOrmEntity
     */
    'artistProfile'?: ClientTypeOrmEntityArtistProfile | null;
    /**
     * 
     * @type {ClientTypeOrmEntityCustomerProfile}
     * @memberof ClientTypeOrmEntity
     */
    'customerProfile'?: ClientTypeOrmEntityCustomerProfile | null;
    /**
     * 
     * @type {Array<OrderTypeOrmEntity>}
     * @memberof ClientTypeOrmEntity
     */
    'customerOrders'?: Array<OrderTypeOrmEntity> | null;
    /**
     * 
     * @type {Array<OrderTypeOrmEntity>}
     * @memberof ClientTypeOrmEntity
     */
    'artistOrders'?: Array<OrderTypeOrmEntity> | null;
}

export const ClientTypeOrmEntityTypeEnum = {
    Customer: 'CUSTOMER',
    Artist: 'ARTIST'
} as const;

export type ClientTypeOrmEntityTypeEnum = typeof ClientTypeOrmEntityTypeEnum[keyof typeof ClientTypeOrmEntityTypeEnum];
export const ClientTypeOrmEntityStatusEnum = {
    Registration: 'registration',
    Active: 'active'
} as const;

export type ClientTypeOrmEntityStatusEnum = typeof ClientTypeOrmEntityStatusEnum[keyof typeof ClientTypeOrmEntityStatusEnum];

/**
 * 
 * @export
 * @interface ClientTypeOrmEntityArtistProfile
 */
export interface ClientTypeOrmEntityArtistProfile {
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'socialNetworksLinks'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'avatarFullKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'avatarCroppedKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'avatarCroppedUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'videoPresentationKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'videoPresentationUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'videoPresentationAssetId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'videoPresentationPlaybackId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'status': ClientTypeOrmEntityArtistProfileStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'isHiddenEmail': boolean;
    /**
     * 
     * @type {number}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'rating': number;
    /**
     * 
     * @type {Array<ActivityScopeTypeOrmEntity>}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'activityScopes'?: Array<ActivityScopeTypeOrmEntity>;
    /**
     * 
     * @type {ClientTypeOrmEntity}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'client'?: ClientTypeOrmEntity;
    /**
     * 
     * @type {ArtistServiceTypeOrmEntity}
     * @memberof ClientTypeOrmEntityArtistProfile
     */
    'service'?: ArtistServiceTypeOrmEntity;
}

export const ClientTypeOrmEntityArtistProfileStatusEnum = {
    New: 'new',
    Active: 'active',
    Blocked: 'blocked'
} as const;

export type ClientTypeOrmEntityArtistProfileStatusEnum = typeof ClientTypeOrmEntityArtistProfileStatusEnum[keyof typeof ClientTypeOrmEntityArtistProfileStatusEnum];

/**
 * 
 * @export
 * @interface ClientTypeOrmEntityCustomerProfile
 */
export interface ClientTypeOrmEntityCustomerProfile {
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityCustomerProfile
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityCustomerProfile
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityCustomerProfile
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityCustomerProfile
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityCustomerProfile
     */
    'nickName': string;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityCustomerProfile
     */
    'currency': ClientTypeOrmEntityCustomerProfileCurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityCustomerProfile
     */
    'avatarFullKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityCustomerProfile
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityCustomerProfile
     */
    'avatarCroppedKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientTypeOrmEntityCustomerProfile
     */
    'avatarCroppedUrl'?: string | null;
    /**
     * 
     * @type {ClientTypeOrmEntity}
     * @memberof ClientTypeOrmEntityCustomerProfile
     */
    'client': ClientTypeOrmEntity;
}

export const ClientTypeOrmEntityCustomerProfileCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type ClientTypeOrmEntityCustomerProfileCurrencyEnum = typeof ClientTypeOrmEntityCustomerProfileCurrencyEnum[keyof typeof ClientTypeOrmEntityCustomerProfileCurrencyEnum];

/**
 * 
 * @export
 * @interface ClientUpdatePasswordDto
 */
export interface ClientUpdatePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ClientUpdatePasswordDto
     */
    'oldPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ClientUpdatePasswordDto
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface ClientVerifyRequestEmailSignUpDto
 */
export interface ClientVerifyRequestEmailSignUpDto {
    /**
     * 
     * @type {string}
     * @memberof ClientVerifyRequestEmailSignUpDto
     */
    'verificationCode': string;
}
/**
 * 
 * @export
 * @interface ClientVerifyRequestToChangeEmailDto
 */
export interface ClientVerifyRequestToChangeEmailDto {
    /**
     * 
     * @type {string}
     * @memberof ClientVerifyRequestToChangeEmailDto
     */
    'verificationCode': string;
}
/**
 * 
 * @export
 * @interface ClientsPhoneNumberVerifyRequestDTO
 */
export interface ClientsPhoneNumberVerifyRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof ClientsPhoneNumberVerifyRequestDTO
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof ClientsPhoneNumberVerifyRequestDTO
     */
    'verificationCode': string;
}
/**
 * 
 * @export
 * @interface ConfirmOrder3DSDto
 */
export interface ConfirmOrder3DSDto {
    /**
     * 
     * @type {string}
     * @memberof ConfirmOrder3DSDto
     */
    'MD': string;
    /**
     * 
     * @type {string}
     * @memberof ConfirmOrder3DSDto
     */
    'PaRes': string;
}
/**
 * 
 * @export
 * @interface CreateAdminDto
 */
export interface CreateAdminDto {
    /**
     * 
     * @type {string}
     * @memberof CreateAdminDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAdminDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateArtistProfileByAdminDTO
 */
export interface CreateArtistProfileByAdminDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateArtistProfileByAdminDTO
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CreateArtistProfileByAdminDTO
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateArtistProfileByAdminDTO
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateArtistProfileByAdminDTO
     */
    'isHiddenEmail': boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateArtistProfileByAdminDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateArtistProfileByAdminDTO
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateArtistProfileByAdminDTO
     */
    'activityScopes': Array<CreateArtistProfileByAdminDTOActivityScopesEnum>;
    /**
     * 
     * @type {ArtistCreateServiceInfoDTO}
     * @memberof CreateArtistProfileByAdminDTO
     */
    'service': ArtistCreateServiceInfoDTO;
    /**
     * 
     * @type {ArtistSocialNetworksLinksTypeDto}
     * @memberof CreateArtistProfileByAdminDTO
     */
    'socialNetworksLinks'?: ArtistSocialNetworksLinksTypeDto;
    /**
     * 
     * @type {string}
     * @memberof CreateArtistProfileByAdminDTO
     */
    'avatarFullKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateArtistProfileByAdminDTO
     */
    'avatarCroppedKey'?: string;
}

export const CreateArtistProfileByAdminDTOActivityScopesEnum = {
    Cinema: 'cinema',
    Music: 'music',
    Blogging: 'blogging',
    TicTok: 'tic_tok',
    Tv: 'tv',
    Sport: 'sport',
    Humor: 'humor',
    Youtube: 'youtube',
    Modeling: 'modeling',
    Business: 'business',
    Art: 'art',
    Literature: 'literature'
} as const;

export type CreateArtistProfileByAdminDTOActivityScopesEnum = typeof CreateArtistProfileByAdminDTOActivityScopesEnum[keyof typeof CreateArtistProfileByAdminDTOActivityScopesEnum];

/**
 * 
 * @export
 * @interface CreateCustomerFavoriteArtistRequestDto
 */
export interface CreateCustomerFavoriteArtistRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerFavoriteArtistRequestDto
     */
    'artistClientId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerFavoriteArtistRequestDto
     */
    'artistProfileId': string;
}
/**
 * 
 * @export
 * @interface CreatePromocodeDto
 */
export interface CreatePromocodeDto {
    /**
     * 
     * @type {number}
     * @memberof CreatePromocodeDto
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePromocodeDto
     */
    'artist_client_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePromocodeDto
     */
    'type': CreatePromocodeDtoTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CreatePromocodeDto
     */
    'value': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePromocodeDto
     */
    'from_date': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePromocodeDto
     */
    'to_date': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePromocodeDto
     */
    'prefix'?: string;
}

export const CreatePromocodeDtoTypeEnum = {
    Percent: 'PERCENT',
    Currency: 'CURRENCY'
} as const;

export type CreatePromocodeDtoTypeEnum = typeof CreatePromocodeDtoTypeEnum[keyof typeof CreatePromocodeDtoTypeEnum];

/**
 * 
 * @export
 * @interface CreateSecretDto
 */
export interface CreateSecretDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSecretDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSecretDto
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSecretDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSecretDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSecretDto
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface CredentialsBaseResponseDto
 */
export interface CredentialsBaseResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CredentialsBaseResponseDto
     */
    'accessToken': string;
    /**
     * 
     * @type {ClientResponseDto}
     * @memberof CredentialsBaseResponseDto
     */
    'client': ClientResponseDto;
}
/**
 * 
 * @export
 * @interface CredentialsResponseDto
 */
export interface CredentialsResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CredentialsResponseDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof CredentialsResponseDto
     */
    'refreshToken': string;
    /**
     * 
     * @type {ClientResponseDto}
     * @memberof CredentialsResponseDto
     */
    'client': ClientResponseDto;
}
/**
 * 
 * @export
 * @interface CursorPaginatedMeta
 */
export interface CursorPaginatedMeta {
    /**
     * 
     * @type {boolean}
     * @memberof CursorPaginatedMeta
     */
    'hasMore': boolean;
    /**
     * 
     * @type {string}
     * @memberof CursorPaginatedMeta
     */
    'nextCursor'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CursorPaginatedMeta
     */
    'total'?: number | null;
}
/**
 * 
 * @export
 * @interface CustomerAddPaymentMethodDto
 */
export interface CustomerAddPaymentMethodDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerAddPaymentMethodDto
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddPaymentMethodDto
     */
    'lastCardNumbers': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddPaymentMethodDto
     */
    'cryptogram': string;
}
/**
 * 
 * @export
 * @interface CustomerArtistGetPublishedVideosResponseDTO
 */
export interface CustomerArtistGetPublishedVideosResponseDTO {
    /**
     * 
     * @type {Array<ClientArtistsPublishedVideoResponseDTO>}
     * @memberof CustomerArtistGetPublishedVideosResponseDTO
     */
    'data': Array<ClientArtistsPublishedVideoResponseDTO>;
    /**
     * 
     * @type {CursorPaginatedMeta}
     * @memberof CustomerArtistGetPublishedVideosResponseDTO
     */
    'meta': CursorPaginatedMeta;
}
/**
 * 
 * @export
 * @interface CustomerArtistProfileResponseDTO
 */
export interface CustomerArtistProfileResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {ArtistSocialNetworksLinksTypeDto}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'socialNetworksLinks'?: ArtistSocialNetworksLinksTypeDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'activityScopes': Array<CustomerArtistProfileResponseDTOActivityScopesEnum>;
    /**
     * 
     * @type {string}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'avatarCroppedUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'videoPresentationAssetId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'videoPresentationPlaybackId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'isHiddenEmail': boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'status': CustomerArtistProfileResponseDTOStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'rating': number;
    /**
     * 
     * @type {CustomerArtistProfileResponseDTOService}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'service'?: CustomerArtistProfileResponseDTOService | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'isFavorite'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerArtistProfileResponseDTO
     */
    'email'?: string | null;
}

export const CustomerArtistProfileResponseDTOActivityScopesEnum = {
    Cinema: 'cinema',
    Music: 'music',
    Blogging: 'blogging',
    TicTok: 'tic_tok',
    Tv: 'tv',
    Sport: 'sport',
    Humor: 'humor',
    Youtube: 'youtube',
    Modeling: 'modeling',
    Business: 'business',
    Art: 'art',
    Literature: 'literature'
} as const;

export type CustomerArtistProfileResponseDTOActivityScopesEnum = typeof CustomerArtistProfileResponseDTOActivityScopesEnum[keyof typeof CustomerArtistProfileResponseDTOActivityScopesEnum];
export const CustomerArtistProfileResponseDTOStatusEnum = {
    New: 'new',
    Active: 'active',
    Blocked: 'blocked'
} as const;

export type CustomerArtistProfileResponseDTOStatusEnum = typeof CustomerArtistProfileResponseDTOStatusEnum[keyof typeof CustomerArtistProfileResponseDTOStatusEnum];

/**
 * 
 * @export
 * @interface CustomerArtistProfileResponseDTOService
 */
export interface CustomerArtistProfileResponseDTOService {
    /**
     * 
     * @type {number}
     * @memberof CustomerArtistProfileResponseDTOService
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof CustomerArtistProfileResponseDTOService
     */
    'currency': CustomerArtistProfileResponseDTOServiceCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof CustomerArtistProfileResponseDTOService
     */
    'limitDays': number;
}

export const CustomerArtistProfileResponseDTOServiceCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type CustomerArtistProfileResponseDTOServiceCurrencyEnum = typeof CustomerArtistProfileResponseDTOServiceCurrencyEnum[keyof typeof CustomerArtistProfileResponseDTOServiceCurrencyEnum];

/**
 * 
 * @export
 * @interface CustomerCompleteRegistrationDto
 */
export interface CustomerCompleteRegistrationDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerCompleteRegistrationDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCompleteRegistrationDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCompleteRegistrationDto
     */
    'nickname': string;
}
/**
 * 
 * @export
 * @interface CustomerCreateOrderCommentDTO
 */
export interface CustomerCreateOrderCommentDTO {
    /**
     * 
     * @type {number}
     * @memberof CustomerCreateOrderCommentDTO
     */
    'grade': number;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateOrderCommentDTO
     */
    'positiveComment'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateOrderCommentDTO
     */
    'negativeComment'?: string;
}
/**
 * 
 * @export
 * @interface CustomerCreateOrderDetailsDto
 */
export interface CustomerCreateOrderDetailsDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateOrderDetailsDto
     */
    'type': CustomerCreateOrderDetailsDtoTypeEnum;
    /**
     * 
     * @type {CustomerCreateOrderPersonInfoDto}
     * @memberof CustomerCreateOrderDetailsDto
     */
    'fromPerson': CustomerCreateOrderPersonInfoDto;
    /**
     * 
     * @type {CustomerCreateOrderPersonInfoDto}
     * @memberof CustomerCreateOrderDetailsDto
     */
    'toPerson': CustomerCreateOrderPersonInfoDto;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateOrderDetailsDto
     */
    'textToVideo': string;
}

export const CustomerCreateOrderDetailsDtoTypeEnum = {
    Myself: 'myself',
    Another: 'another'
} as const;

export type CustomerCreateOrderDetailsDtoTypeEnum = typeof CustomerCreateOrderDetailsDtoTypeEnum[keyof typeof CustomerCreateOrderDetailsDtoTypeEnum];

/**
 * 
 * @export
 * @interface CustomerCreateOrderDto
 */
export interface CustomerCreateOrderDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateOrderDto
     */
    'artistClientId': string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerCreateOrderDto
     */
    'allowedToPublish': boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateOrderDto
     */
    'occasion': CustomerCreateOrderDtoOccasionEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateOrderDto
     */
    'customerPaymentMethodId'?: string;
    /**
     * 
     * @type {CustomerCreateOrderDetailsDto}
     * @memberof CustomerCreateOrderDto
     */
    'orderDetails': CustomerCreateOrderDetailsDto;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateOrderDto
     */
    'promocode'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerCreateOrderDto
     */
    'type': CustomerCreateOrderDtoTypeEnum;
}

export const CustomerCreateOrderDtoOccasionEnum = {
    Birthday: 'birthday',
    Wedding: 'wedding',
    NewYear: 'new_year',
    Anniversary: 'anniversary',
    Guidance: 'guidance',
    Advice: 'advice',
    Other: 'other'
} as const;

export type CustomerCreateOrderDtoOccasionEnum = typeof CustomerCreateOrderDtoOccasionEnum[keyof typeof CustomerCreateOrderDtoOccasionEnum];
export const CustomerCreateOrderDtoTypeEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type CustomerCreateOrderDtoTypeEnum = typeof CustomerCreateOrderDtoTypeEnum[keyof typeof CustomerCreateOrderDtoTypeEnum];

/**
 * 
 * @export
 * @interface CustomerCreateOrderPersonInfoDto
 */
export interface CustomerCreateOrderPersonInfoDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateOrderPersonInfoDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerCreateOrderPersonInfoDto
     */
    'gender': CustomerCreateOrderPersonInfoDtoGenderEnum;
}

export const CustomerCreateOrderPersonInfoDtoGenderEnum = {
    Male: 'male',
    Female: 'female'
} as const;

export type CustomerCreateOrderPersonInfoDtoGenderEnum = typeof CustomerCreateOrderPersonInfoDtoGenderEnum[keyof typeof CustomerCreateOrderPersonInfoDtoGenderEnum];

/**
 * 
 * @export
 * @interface CustomerFindArtistsByCategoriesRequestDTO
 */
export interface CustomerFindArtistsByCategoriesRequestDTO {
    /**
     * 
     * @type {number}
     * @memberof CustomerFindArtistsByCategoriesRequestDTO
     */
    'limitByCategory'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindArtistsByCategoriesRequestDTO
     */
    'sortByCategory'?: CustomerFindArtistsByCategoriesRequestDTOSortByCategoryEnum;
}

export const CustomerFindArtistsByCategoriesRequestDTOSortByCategoryEnum = {
    New: 'new',
    Top: 'top'
} as const;

export type CustomerFindArtistsByCategoriesRequestDTOSortByCategoryEnum = typeof CustomerFindArtistsByCategoriesRequestDTOSortByCategoryEnum[keyof typeof CustomerFindArtistsByCategoriesRequestDTOSortByCategoryEnum];

/**
 * 
 * @export
 * @interface CustomerFindArtistsByCategoriesResponseDTO
 */
export interface CustomerFindArtistsByCategoriesResponseDTO {
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'top': Array<PaginationCursorResponseDto>;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'new': Array<PaginationCursorResponseDto>;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'cinema': Array<PaginationCursorResponseDto> | null;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'music': Array<PaginationCursorResponseDto> | null;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'blogging': Array<PaginationCursorResponseDto> | null;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'tic_tok': Array<PaginationCursorResponseDto> | null;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'tv': Array<PaginationCursorResponseDto> | null;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'sport': Array<PaginationCursorResponseDto> | null;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'humor': Array<PaginationCursorResponseDto> | null;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'youtube': Array<PaginationCursorResponseDto> | null;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'modeling': Array<PaginationCursorResponseDto> | null;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'business': Array<PaginationCursorResponseDto> | null;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'art': Array<PaginationCursorResponseDto> | null;
    /**
     * 
     * @type {Array<PaginationCursorResponseDto>}
     * @memberof CustomerFindArtistsByCategoriesResponseDTO
     */
    'literature': Array<PaginationCursorResponseDto> | null;
}
/**
 * 
 * @export
 * @interface CustomerFindArtistsByFiltersFiltersRequestDTO
 */
export interface CustomerFindArtistsByFiltersFiltersRequestDTO {
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerFindArtistsByFiltersFiltersRequestDTO
     */
    'activityScopes'?: Array<CustomerFindArtistsByFiltersFiltersRequestDTOActivityScopesEnum>;
    /**
     * 
     * @type {number}
     * @memberof CustomerFindArtistsByFiltersFiltersRequestDTO
     */
    'priceAmountMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomerFindArtistsByFiltersFiltersRequestDTO
     */
    'priceAmountMax'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindArtistsByFiltersFiltersRequestDTO
     */
    'search'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CustomerFindArtistsByFiltersFiltersRequestDTO
     */
    'executionLimitDays'?: Array<number>;
}

export const CustomerFindArtistsByFiltersFiltersRequestDTOActivityScopesEnum = {
    Cinema: 'cinema',
    Music: 'music',
    Blogging: 'blogging',
    TicTok: 'tic_tok',
    Tv: 'tv',
    Sport: 'sport',
    Humor: 'humor',
    Youtube: 'youtube',
    Modeling: 'modeling',
    Business: 'business',
    Art: 'art',
    Literature: 'literature'
} as const;

export type CustomerFindArtistsByFiltersFiltersRequestDTOActivityScopesEnum = typeof CustomerFindArtistsByFiltersFiltersRequestDTOActivityScopesEnum[keyof typeof CustomerFindArtistsByFiltersFiltersRequestDTOActivityScopesEnum];

/**
 * 
 * @export
 * @interface CustomerFindArtistsByFiltersRequestDTO
 */
export interface CustomerFindArtistsByFiltersRequestDTO {
    /**
     * 
     * @type {CustomerFindFavoriteArtistsByFiltersRequestDTO}
     * @memberof CustomerFindArtistsByFiltersRequestDTO
     */
    'filters'?: CustomerFindFavoriteArtistsByFiltersRequestDTO;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindArtistsByFiltersRequestDTO
     */
    'sortByCategory'?: CustomerFindArtistsByFiltersRequestDTOSortByCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindArtistsByFiltersRequestDTO
     */
    'nextCursor'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerFindArtistsByFiltersRequestDTO
     */
    'limit': number;
}

export const CustomerFindArtistsByFiltersRequestDTOSortByCategoryEnum = {
    New: 'new',
    Top: 'top'
} as const;

export type CustomerFindArtistsByFiltersRequestDTOSortByCategoryEnum = typeof CustomerFindArtistsByFiltersRequestDTOSortByCategoryEnum[keyof typeof CustomerFindArtistsByFiltersRequestDTOSortByCategoryEnum];

/**
 * 
 * @export
 * @interface CustomerFindArtistsByFiltersResponseDTO
 */
export interface CustomerFindArtistsByFiltersResponseDTO {
    /**
     * 
     * @type {Array<CustomerArtistProfileResponseDTO>}
     * @memberof CustomerFindArtistsByFiltersResponseDTO
     */
    'data': Array<CustomerArtistProfileResponseDTO> | null;
    /**
     * 
     * @type {CursorPaginatedMeta}
     * @memberof CustomerFindArtistsByFiltersResponseDTO
     */
    'meta': CursorPaginatedMeta;
}
/**
 * 
 * @export
 * @interface CustomerFindFavoriteArtistsByFiltersRequestDTO
 */
export interface CustomerFindFavoriteArtistsByFiltersRequestDTO {
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerFindFavoriteArtistsByFiltersRequestDTO
     */
    'activityScopes'?: Array<CustomerFindFavoriteArtistsByFiltersRequestDTOActivityScopesEnum>;
    /**
     * 
     * @type {number}
     * @memberof CustomerFindFavoriteArtistsByFiltersRequestDTO
     */
    'priceAmountMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomerFindFavoriteArtistsByFiltersRequestDTO
     */
    'priceAmountMax'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindFavoriteArtistsByFiltersRequestDTO
     */
    'search'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CustomerFindFavoriteArtistsByFiltersRequestDTO
     */
    'executionLimitDays'?: Array<number>;
}

export const CustomerFindFavoriteArtistsByFiltersRequestDTOActivityScopesEnum = {
    Cinema: 'cinema',
    Music: 'music',
    Blogging: 'blogging',
    TicTok: 'tic_tok',
    Tv: 'tv',
    Sport: 'sport',
    Humor: 'humor',
    Youtube: 'youtube',
    Modeling: 'modeling',
    Business: 'business',
    Art: 'art',
    Literature: 'literature'
} as const;

export type CustomerFindFavoriteArtistsByFiltersRequestDTOActivityScopesEnum = typeof CustomerFindFavoriteArtistsByFiltersRequestDTOActivityScopesEnum[keyof typeof CustomerFindFavoriteArtistsByFiltersRequestDTOActivityScopesEnum];

/**
 * 
 * @export
 * @interface CustomerFindOrdersFiltersRequestDTO
 */
export interface CustomerFindOrdersFiltersRequestDTO {
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerFindOrdersFiltersRequestDTO
     */
    'statuses'?: Array<CustomerFindOrdersFiltersRequestDTOStatusesEnum>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerFindOrdersFiltersRequestDTO
     */
    'occasions'?: Array<CustomerFindOrdersFiltersRequestDTOOccasionsEnum>;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindOrdersFiltersRequestDTO
     */
    'search'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindOrdersFiltersRequestDTO
     */
    'date'?: string | null;
    /**
     * 
     * @type {CustomerFindOrdersFiltersRequestDTODateRange}
     * @memberof CustomerFindOrdersFiltersRequestDTO
     */
    'dateRange'?: CustomerFindOrdersFiltersRequestDTODateRange | null;
}

export const CustomerFindOrdersFiltersRequestDTOStatusesEnum = {
    PendingPayment: 'pending_payment',
    Pending: 'pending',
    Accepted: 'accepted',
    Rejected: 'rejected',
    Cancelled: 'cancelled',
    DoneWaitingForApproval: 'done_waiting_for_approval',
    DoneApproved: 'done_approved',
    WaitingForRework: 'waiting_for_rework',
    UnderConsideration: 'under_consideration',
    DoneAfterConsideration: 'done_after_consideration',
    RejectAfterConsideration: 'reject_after_consideration'
} as const;

export type CustomerFindOrdersFiltersRequestDTOStatusesEnum = typeof CustomerFindOrdersFiltersRequestDTOStatusesEnum[keyof typeof CustomerFindOrdersFiltersRequestDTOStatusesEnum];
export const CustomerFindOrdersFiltersRequestDTOOccasionsEnum = {
    Birthday: 'birthday',
    Wedding: 'wedding',
    NewYear: 'new_year',
    Anniversary: 'anniversary',
    Guidance: 'guidance',
    Advice: 'advice',
    Other: 'other'
} as const;

export type CustomerFindOrdersFiltersRequestDTOOccasionsEnum = typeof CustomerFindOrdersFiltersRequestDTOOccasionsEnum[keyof typeof CustomerFindOrdersFiltersRequestDTOOccasionsEnum];

/**
 * 
 * @export
 * @interface CustomerFindOrdersFiltersRequestDTODateRange
 */
export interface CustomerFindOrdersFiltersRequestDTODateRange {
    /**
     * 
     * @type {string}
     * @memberof CustomerFindOrdersFiltersRequestDTODateRange
     */
    'from': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindOrdersFiltersRequestDTODateRange
     */
    'to': string;
}
/**
 * 
 * @export
 * @interface CustomerFindOrdersRequestDTO
 */
export interface CustomerFindOrdersRequestDTO {
    /**
     * 
     * @type {CustomerFindOrdersFiltersRequestDTO}
     * @memberof CustomerFindOrdersRequestDTO
     */
    'filters'?: CustomerFindOrdersFiltersRequestDTO;
    /**
     * 
     * @type {string}
     * @memberof CustomerFindOrdersRequestDTO
     */
    'nextCursor'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerFindOrdersRequestDTO
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface CustomerFindOrdersResponseDTO
 */
export interface CustomerFindOrdersResponseDTO {
    /**
     * 
     * @type {Array<CustomerOrderResponseDto>}
     * @memberof CustomerFindOrdersResponseDTO
     */
    'data': Array<CustomerOrderResponseDto>;
    /**
     * 
     * @type {CursorPaginatedMeta}
     * @memberof CustomerFindOrdersResponseDTO
     */
    'meta': CursorPaginatedMeta;
}
/**
 * 
 * @export
 * @interface CustomerGetArtistCommentsRequestDTO
 */
export interface CustomerGetArtistCommentsRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof CustomerGetArtistCommentsRequestDTO
     */
    'nextCursor'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerGetArtistCommentsRequestDTO
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface CustomerGetArtistOrdersCommentsResponseDTO
 */
export interface CustomerGetArtistOrdersCommentsResponseDTO {
    /**
     * 
     * @type {Array<ArtistOrderCommentResponseDto>}
     * @memberof CustomerGetArtistOrdersCommentsResponseDTO
     */
    'data': Array<ArtistOrderCommentResponseDto>;
    /**
     * 
     * @type {CursorPaginatedMeta}
     * @memberof CustomerGetArtistOrdersCommentsResponseDTO
     */
    'meta': CursorPaginatedMeta;
}
/**
 * 
 * @export
 * @interface CustomerGetGetArtistPublishedVideosRequestDTO
 */
export interface CustomerGetGetArtistPublishedVideosRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof CustomerGetGetArtistPublishedVideosRequestDTO
     */
    'nextCursor'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerGetGetArtistPublishedVideosRequestDTO
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface CustomerMeResponseDto
 */
export interface CustomerMeResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerMeResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerMeResponseDto
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerMeResponseDto
     */
    'phoneNumberConfirmed': boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerMeResponseDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerMeResponseDto
     */
    'emailConfirmed': boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerMeResponseDto
     */
    'type': CustomerMeResponseDtoTypeEnum;
    /**
     * 
     * @type {CustomerMeResponseDtoProfile}
     * @memberof CustomerMeResponseDto
     */
    'profile'?: CustomerMeResponseDtoProfile;
}

export const CustomerMeResponseDtoTypeEnum = {
    Customer: 'CUSTOMER',
    Artist: 'ARTIST'
} as const;

export type CustomerMeResponseDtoTypeEnum = typeof CustomerMeResponseDtoTypeEnum[keyof typeof CustomerMeResponseDtoTypeEnum];

/**
 * @type CustomerMeResponseDtoProfile
 * @export
 */
export type CustomerMeResponseDtoProfile = CustomerProfileMeResponseDto;

/**
 * 
 * @export
 * @interface CustomerOrderCommentResponseDto
 */
export interface CustomerOrderCommentResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderCommentResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderCommentResponseDto
     */
    'orderId': string;
    /**
     * 
     * @type {number}
     * @memberof CustomerOrderCommentResponseDto
     */
    'grade': number;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderCommentResponseDto
     */
    'positiveComment'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderCommentResponseDto
     */
    'negativeComment'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderCommentResponseDto
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface CustomerOrderExecutionResponseDto
 */
export interface CustomerOrderExecutionResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderExecutionResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderExecutionResponseDto
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderExecutionResponseDto
     */
    'videoFileAssetId': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderExecutionResponseDto
     */
    'videoFilePlaybackId': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderExecutionResponseDto
     */
    'customerRejectComment'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerOrderExecutionResponseDto
     */
    'viewedByCustomer'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderExecutionResponseDto
     */
    'status': CustomerOrderExecutionResponseDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderExecutionResponseDto
     */
    'createdAt': string;
}

export const CustomerOrderExecutionResponseDtoStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected'
} as const;

export type CustomerOrderExecutionResponseDtoStatusEnum = typeof CustomerOrderExecutionResponseDtoStatusEnum[keyof typeof CustomerOrderExecutionResponseDtoStatusEnum];

/**
 * 
 * @export
 * @interface CustomerOrderPaymentStatus3DSResponseDto
 */
export interface CustomerOrderPaymentStatus3DSResponseDto {
    /**
     * 
     * @type {number}
     * @memberof CustomerOrderPaymentStatus3DSResponseDto
     */
    'transactionId': number;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderPaymentStatus3DSResponseDto
     */
    'paReq': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderPaymentStatus3DSResponseDto
     */
    'acsUrl': string;
}
/**
 * 
 * @export
 * @interface CustomerOrderPaymentStatusResponseDto
 */
export interface CustomerOrderPaymentStatusResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof CustomerOrderPaymentStatusResponseDto
     */
    'needThreeDS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerOrderPaymentStatusResponseDto
     */
    'isCardVerified': boolean;
    /**
     * 
     * @type {CustomerOrderPaymentStatusResponseDtoThreeDSResponse}
     * @memberof CustomerOrderPaymentStatusResponseDto
     */
    'threeDSResponse'?: CustomerOrderPaymentStatusResponseDtoThreeDSResponse | null;
}
/**
 * 
 * @export
 * @interface CustomerOrderPaymentStatusResponseDtoThreeDSResponse
 */
export interface CustomerOrderPaymentStatusResponseDtoThreeDSResponse {
    /**
     * 
     * @type {number}
     * @memberof CustomerOrderPaymentStatusResponseDtoThreeDSResponse
     */
    'transactionId': number;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderPaymentStatusResponseDtoThreeDSResponse
     */
    'paReq': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderPaymentStatusResponseDtoThreeDSResponse
     */
    'acsUrl': string;
}
/**
 * 
 * @export
 * @interface CustomerOrderResponseDto
 */
export interface CustomerOrderResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDto
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof CustomerOrderResponseDto
     */
    'number'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDto
     */
    'customerClientId': string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDto
     */
    'artistClientId': string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDto
     */
    'status': CustomerOrderResponseDtoStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerOrderResponseDto
     */
    'allowedToPublish': boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDto
     */
    'occasion': CustomerOrderResponseDtoOccasionEnum;
    /**
     * 
     * @type {OrderDetailsResponseDto}
     * @memberof CustomerOrderResponseDto
     */
    'orderDetails': OrderDetailsResponseDto;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {CustomerOrderResponseDtoOrderPayment}
     * @memberof CustomerOrderResponseDto
     */
    'orderPayment'?: CustomerOrderResponseDtoOrderPayment | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDto
     */
    'cancelComment'?: string;
    /**
     * 
     * @type {Array<OrderStatusHistoryItemDto>}
     * @memberof CustomerOrderResponseDto
     */
    'statusHistory'?: Array<OrderStatusHistoryItemDto>;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDto
     */
    'actionUntilAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDto
     */
    'waitForAction'?: CustomerOrderResponseDtoWaitForActionEnum;
    /**
     * 
     * @type {Array<OrderExecutionBaseResponseDto>}
     * @memberof CustomerOrderResponseDto
     */
    'orderExecutions'?: Array<OrderExecutionBaseResponseDto>;
    /**
     * 
     * @type {Array<OrderPaymentBaseResponseDto>}
     * @memberof CustomerOrderResponseDto
     */
    'orderPayments'?: Array<OrderPaymentBaseResponseDto>;
    /**
     * 
     * @type {CustomerOrderResponseDtoArtistProfile}
     * @memberof CustomerOrderResponseDto
     */
    'artistProfile': CustomerOrderResponseDtoArtistProfile | null;
    /**
     * 
     * @type {OrderCommentBaseResponseDTO}
     * @memberof CustomerOrderResponseDto
     */
    'comment'?: OrderCommentBaseResponseDTO;
}

export const CustomerOrderResponseDtoStatusEnum = {
    PendingPayment: 'pending_payment',
    Pending: 'pending',
    Accepted: 'accepted',
    Rejected: 'rejected',
    Cancelled: 'cancelled',
    DoneWaitingForApproval: 'done_waiting_for_approval',
    DoneApproved: 'done_approved',
    WaitingForRework: 'waiting_for_rework',
    UnderConsideration: 'under_consideration',
    DoneAfterConsideration: 'done_after_consideration',
    RejectAfterConsideration: 'reject_after_consideration'
} as const;

export type CustomerOrderResponseDtoStatusEnum = typeof CustomerOrderResponseDtoStatusEnum[keyof typeof CustomerOrderResponseDtoStatusEnum];
export const CustomerOrderResponseDtoOccasionEnum = {
    Birthday: 'birthday',
    Wedding: 'wedding',
    NewYear: 'new_year',
    Anniversary: 'anniversary',
    Guidance: 'guidance',
    Advice: 'advice',
    Other: 'other'
} as const;

export type CustomerOrderResponseDtoOccasionEnum = typeof CustomerOrderResponseDtoOccasionEnum[keyof typeof CustomerOrderResponseDtoOccasionEnum];
export const CustomerOrderResponseDtoWaitForActionEnum = {
    ArtistApply: 'artist_apply',
    CompleteOrder: 'complete_order',
    CustomerConfirmOrder: 'customer_confirm_order'
} as const;

export type CustomerOrderResponseDtoWaitForActionEnum = typeof CustomerOrderResponseDtoWaitForActionEnum[keyof typeof CustomerOrderResponseDtoWaitForActionEnum];

/**
 * 
 * @export
 * @interface CustomerOrderResponseDtoArtistProfile
 */
export interface CustomerOrderResponseDtoArtistProfile {
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'description'?: string | null;
    /**
     * 
     * @type {ArtistSocialNetworksLinksTypeDto}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'socialNetworksLinks'?: ArtistSocialNetworksLinksTypeDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'activityScopes': Array<CustomerOrderResponseDtoArtistProfileActivityScopesEnum>;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'avatarCroppedUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'videoPresentationAssetId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'videoPresentationPlaybackId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'isHiddenEmail': boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'status': CustomerOrderResponseDtoArtistProfileStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'rating': number;
    /**
     * 
     * @type {CustomerArtistProfileResponseDTOService}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'service'?: CustomerArtistProfileResponseDTOService | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'isFavorite'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDtoArtistProfile
     */
    'email'?: string | null;
}

export const CustomerOrderResponseDtoArtistProfileActivityScopesEnum = {
    Cinema: 'cinema',
    Music: 'music',
    Blogging: 'blogging',
    TicTok: 'tic_tok',
    Tv: 'tv',
    Sport: 'sport',
    Humor: 'humor',
    Youtube: 'youtube',
    Modeling: 'modeling',
    Business: 'business',
    Art: 'art',
    Literature: 'literature'
} as const;

export type CustomerOrderResponseDtoArtistProfileActivityScopesEnum = typeof CustomerOrderResponseDtoArtistProfileActivityScopesEnum[keyof typeof CustomerOrderResponseDtoArtistProfileActivityScopesEnum];
export const CustomerOrderResponseDtoArtistProfileStatusEnum = {
    New: 'new',
    Active: 'active',
    Blocked: 'blocked'
} as const;

export type CustomerOrderResponseDtoArtistProfileStatusEnum = typeof CustomerOrderResponseDtoArtistProfileStatusEnum[keyof typeof CustomerOrderResponseDtoArtistProfileStatusEnum];

/**
 * 
 * @export
 * @interface CustomerOrderResponseDtoOrderPayment
 */
export interface CustomerOrderResponseDtoOrderPayment {
    /**
     * 
     * @type {number}
     * @memberof CustomerOrderResponseDtoOrderPayment
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof CustomerOrderResponseDtoOrderPayment
     */
    'currency': CustomerOrderResponseDtoOrderPaymentCurrencyEnum;
}

export const CustomerOrderResponseDtoOrderPaymentCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type CustomerOrderResponseDtoOrderPaymentCurrencyEnum = typeof CustomerOrderResponseDtoOrderPaymentCurrencyEnum[keyof typeof CustomerOrderResponseDtoOrderPaymentCurrencyEnum];

/**
 * 
 * @export
 * @interface CustomerOrderWithPaymentStatusResponseDto
 */
export interface CustomerOrderWithPaymentStatusResponseDto {
    /**
     * 
     * @type {CustomerOrderResponseDto}
     * @memberof CustomerOrderWithPaymentStatusResponseDto
     */
    'order': CustomerOrderResponseDto;
    /**
     * 
     * @type {CustomerOrderWithPaymentStatusResponseDtoOrderPaymentStatusResponse}
     * @memberof CustomerOrderWithPaymentStatusResponseDto
     */
    'orderPaymentStatusResponse'?: CustomerOrderWithPaymentStatusResponseDtoOrderPaymentStatusResponse | null;
    /**
     * 
     * @type {object}
     * @memberof CustomerOrderWithPaymentStatusResponseDto
     */
    'redirectResponse': object;
}
/**
 * 
 * @export
 * @interface CustomerOrderWithPaymentStatusResponseDtoOrderPaymentStatusResponse
 */
export interface CustomerOrderWithPaymentStatusResponseDtoOrderPaymentStatusResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CustomerOrderWithPaymentStatusResponseDtoOrderPaymentStatusResponse
     */
    'needThreeDS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerOrderWithPaymentStatusResponseDtoOrderPaymentStatusResponse
     */
    'isCardVerified': boolean;
    /**
     * 
     * @type {CustomerOrderPaymentStatusResponseDtoThreeDSResponse}
     * @memberof CustomerOrderWithPaymentStatusResponseDtoOrderPaymentStatusResponse
     */
    'threeDSResponse'?: CustomerOrderPaymentStatusResponseDtoThreeDSResponse | null;
}
/**
 * 
 * @export
 * @interface CustomerPayOrderDto
 */
export interface CustomerPayOrderDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerPayOrderDto
     */
    'customerPaymentMethodId': string;
}
/**
 * 
 * @export
 * @interface CustomerPaymentMethodResponseDto
 */
export interface CustomerPaymentMethodResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerPaymentMethodResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerPaymentMethodResponseDto
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerPaymentMethodResponseDto
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerPaymentMethodResponseDto
     */
    'lastCardNumbers': string;
}
/**
 * 
 * @export
 * @interface CustomerProfileMeResponseDto
 */
export interface CustomerProfileMeResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileMeResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileMeResponseDto
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileMeResponseDto
     */
    'nickName': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileMeResponseDto
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileMeResponseDto
     */
    'avatarCroppedUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileMeResponseDto
     */
    'currency'?: CustomerProfileMeResponseDtoCurrencyEnum;
}

export const CustomerProfileMeResponseDtoCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type CustomerProfileMeResponseDtoCurrencyEnum = typeof CustomerProfileMeResponseDtoCurrencyEnum[keyof typeof CustomerProfileMeResponseDtoCurrencyEnum];

/**
 * 
 * @export
 * @interface CustomerProfileModel
 */
export interface CustomerProfileModel {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileModel
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileModel
     */
    'nickName': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileModel
     */
    'avatarFullKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileModel
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileModel
     */
    'avatarCroppedKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileModel
     */
    'avatarCroppedUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileModel
     */
    'currency'?: CustomerProfileModelCurrencyEnum;
    /**
     * 
     * @type {ClientModel}
     * @memberof CustomerProfileModel
     */
    'client'?: ClientModel;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileModel
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileModel
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileModel
     */
    'id': string;
}

export const CustomerProfileModelCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type CustomerProfileModelCurrencyEnum = typeof CustomerProfileModelCurrencyEnum[keyof typeof CustomerProfileModelCurrencyEnum];

/**
 * 
 * @export
 * @interface CustomerProfileTypeOrmEntity
 */
export interface CustomerProfileTypeOrmEntity {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileTypeOrmEntity
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileTypeOrmEntity
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileTypeOrmEntity
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileTypeOrmEntity
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileTypeOrmEntity
     */
    'nickName': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileTypeOrmEntity
     */
    'currency': CustomerProfileTypeOrmEntityCurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileTypeOrmEntity
     */
    'avatarFullKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileTypeOrmEntity
     */
    'avatarFullUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileTypeOrmEntity
     */
    'avatarCroppedKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileTypeOrmEntity
     */
    'avatarCroppedUrl'?: string | null;
    /**
     * 
     * @type {ClientTypeOrmEntity}
     * @memberof CustomerProfileTypeOrmEntity
     */
    'client': ClientTypeOrmEntity;
}

export const CustomerProfileTypeOrmEntityCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type CustomerProfileTypeOrmEntityCurrencyEnum = typeof CustomerProfileTypeOrmEntityCurrencyEnum[keyof typeof CustomerProfileTypeOrmEntityCurrencyEnum];

/**
 * 
 * @export
 * @interface CustomerRejectOrderExecutionDto
 */
export interface CustomerRejectOrderExecutionDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerRejectOrderExecutionDto
     */
    'customerRejectComment': string;
}
/**
 * 
 * @export
 * @interface CustomerUpdateOrderDto
 */
export interface CustomerUpdateOrderDto {
    /**
     * 
     * @type {boolean}
     * @memberof CustomerUpdateOrderDto
     */
    'allowedToPublish': boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateOrderDto
     */
    'occasion': CustomerUpdateOrderDtoOccasionEnum;
    /**
     * 
     * @type {CustomerCreateOrderDetailsDto}
     * @memberof CustomerUpdateOrderDto
     */
    'orderDetails': CustomerCreateOrderDetailsDto;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateOrderDto
     */
    'promocode'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerUpdateOrderDto
     */
    'type': CustomerUpdateOrderDtoTypeEnum;
}

export const CustomerUpdateOrderDtoOccasionEnum = {
    Birthday: 'birthday',
    Wedding: 'wedding',
    NewYear: 'new_year',
    Anniversary: 'anniversary',
    Guidance: 'guidance',
    Advice: 'advice',
    Other: 'other'
} as const;

export type CustomerUpdateOrderDtoOccasionEnum = typeof CustomerUpdateOrderDtoOccasionEnum[keyof typeof CustomerUpdateOrderDtoOccasionEnum];
export const CustomerUpdateOrderDtoTypeEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type CustomerUpdateOrderDtoTypeEnum = typeof CustomerUpdateOrderDtoTypeEnum[keyof typeof CustomerUpdateOrderDtoTypeEnum];

/**
 * 
 * @export
 * @interface CustomerUpdateProfileDto
 */
export interface CustomerUpdateProfileDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateProfileDto
     */
    'nickName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateProfileDto
     */
    'avatarFullKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateProfileDto
     */
    'avatarCroppedKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerUpdateProfileDto
     */
    'currency'?: CustomerUpdateProfileDtoCurrencyEnum;
}

export const CustomerUpdateProfileDtoCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type CustomerUpdateProfileDtoCurrencyEnum = typeof CustomerUpdateProfileDtoCurrencyEnum[keyof typeof CustomerUpdateProfileDtoCurrencyEnum];

/**
 * 
 * @export
 * @interface DateRangeRequestDto
 */
export interface DateRangeRequestDto {
    /**
     * 
     * @type {string}
     * @memberof DateRangeRequestDto
     */
    'from': string;
    /**
     * 
     * @type {string}
     * @memberof DateRangeRequestDto
     */
    'to': string;
}
/**
 * 
 * @export
 * @interface DeleteArtistProfileByAdminDTO
 */
export interface DeleteArtistProfileByAdminDTO {
    /**
     * 
     * @type {string}
     * @memberof DeleteArtistProfileByAdminDTO
     */
    'artistProfileId': string;
    /**
     * 
     * @type {string}
     * @memberof DeleteArtistProfileByAdminDTO
     */
    'artistClientId': string;
}
/**
 * 
 * @export
 * @interface DeleteUserFirebaseDto
 */
export interface DeleteUserFirebaseDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteUserFirebaseDto
     */
    'firebase_id': string;
}
/**
 * 
 * @export
 * @interface GetManyArtistProfileTypeOrmEntityResponseDto
 */
export interface GetManyArtistProfileTypeOrmEntityResponseDto {
    /**
     * 
     * @type {Array<ArtistProfileTypeOrmEntity>}
     * @memberof GetManyArtistProfileTypeOrmEntityResponseDto
     */
    'data': Array<ArtistProfileTypeOrmEntity>;
    /**
     * 
     * @type {number}
     * @memberof GetManyArtistProfileTypeOrmEntityResponseDto
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyArtistProfileTypeOrmEntityResponseDto
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyArtistProfileTypeOrmEntityResponseDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyArtistProfileTypeOrmEntityResponseDto
     */
    'pageCount': number;
}
/**
 * @type GetManyBaseAdminPanelClientsControllerClientTypeOrmEntity200Response
 * @export
 */
export type GetManyBaseAdminPanelClientsControllerClientTypeOrmEntity200Response = Array<ClientTypeOrmEntity> | GetManyClientTypeOrmEntityResponseDto;

/**
 * @type GetManyBaseAdminPanelOrdersControllerOrderTypeOrmEntity200Response
 * @export
 */
export type GetManyBaseAdminPanelOrdersControllerOrderTypeOrmEntity200Response = Array<OrderTypeOrmEntity> | GetManyOrderTypeOrmEntityResponseDto;

/**
 * 
 * @export
 * @interface GetManyClientTypeOrmEntityResponseDto
 */
export interface GetManyClientTypeOrmEntityResponseDto {
    /**
     * 
     * @type {Array<ClientTypeOrmEntity>}
     * @memberof GetManyClientTypeOrmEntityResponseDto
     */
    'data': Array<ClientTypeOrmEntity>;
    /**
     * 
     * @type {number}
     * @memberof GetManyClientTypeOrmEntityResponseDto
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyClientTypeOrmEntityResponseDto
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyClientTypeOrmEntityResponseDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyClientTypeOrmEntityResponseDto
     */
    'pageCount': number;
}
/**
 * 
 * @export
 * @interface GetManyOrderTypeOrmEntityResponseDto
 */
export interface GetManyOrderTypeOrmEntityResponseDto {
    /**
     * 
     * @type {Array<OrderTypeOrmEntity>}
     * @memberof GetManyOrderTypeOrmEntityResponseDto
     */
    'data': Array<OrderTypeOrmEntity>;
    /**
     * 
     * @type {number}
     * @memberof GetManyOrderTypeOrmEntityResponseDto
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyOrderTypeOrmEntityResponseDto
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyOrderTypeOrmEntityResponseDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof GetManyOrderTypeOrmEntityResponseDto
     */
    'pageCount': number;
}
/**
 * 
 * @export
 * @interface HealthControllerCheckHealth200Response
 */
export interface HealthControllerCheckHealth200Response {
    /**
     * 
     * @type {string}
     * @memberof HealthControllerCheckHealth200Response
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheckHealth200ResponseInfoValue; }}
     * @memberof HealthControllerCheckHealth200Response
     */
    'info'?: { [key: string]: HealthControllerCheckHealth200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheckHealth200ResponseInfoValue; }}
     * @memberof HealthControllerCheckHealth200Response
     */
    'error'?: { [key: string]: HealthControllerCheckHealth200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheckHealth200ResponseInfoValue; }}
     * @memberof HealthControllerCheckHealth200Response
     */
    'details'?: { [key: string]: HealthControllerCheckHealth200ResponseInfoValue; };
}
/**
 * 
 * @export
 * @interface HealthControllerCheckHealth200ResponseInfoValue
 */
export interface HealthControllerCheckHealth200ResponseInfoValue {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof HealthControllerCheckHealth200ResponseInfoValue
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface HealthControllerCheckHealth503Response
 */
export interface HealthControllerCheckHealth503Response {
    /**
     * 
     * @type {string}
     * @memberof HealthControllerCheckHealth503Response
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheckHealth200ResponseInfoValue; }}
     * @memberof HealthControllerCheckHealth503Response
     */
    'info'?: { [key: string]: HealthControllerCheckHealth200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheckHealth200ResponseInfoValue; }}
     * @memberof HealthControllerCheckHealth503Response
     */
    'error'?: { [key: string]: HealthControllerCheckHealth200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerCheckHealth200ResponseInfoValue; }}
     * @memberof HealthControllerCheckHealth503Response
     */
    'details'?: { [key: string]: HealthControllerCheckHealth200ResponseInfoValue; };
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ORDEROCCASION = {
    Birthday: 'birthday',
    Wedding: 'wedding',
    NewYear: 'new_year',
    Anniversary: 'anniversary',
    Guidance: 'guidance',
    Advice: 'advice',
    Other: 'other'
} as const;

export type ORDEROCCASION = typeof ORDEROCCASION[keyof typeof ORDEROCCASION];


/**
 * 
 * @export
 * @enum {string}
 */

export const ORDERSTATUS = {
    PendingPayment: 'pending_payment',
    Pending: 'pending',
    Accepted: 'accepted',
    Rejected: 'rejected',
    Cancelled: 'cancelled',
    DoneWaitingForApproval: 'done_waiting_for_approval',
    DoneApproved: 'done_approved',
    WaitingForRework: 'waiting_for_rework',
    UnderConsideration: 'under_consideration',
    DoneAfterConsideration: 'done_after_consideration',
    RejectAfterConsideration: 'reject_after_consideration'
} as const;

export type ORDERSTATUS = typeof ORDERSTATUS[keyof typeof ORDERSTATUS];


/**
 * 
 * @export
 * @interface OrderCommentBaseResponseDTO
 */
export interface OrderCommentBaseResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof OrderCommentBaseResponseDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderCommentBaseResponseDTO
     */
    'orderId': string;
    /**
     * 
     * @type {number}
     * @memberof OrderCommentBaseResponseDTO
     */
    'grade': number;
    /**
     * 
     * @type {string}
     * @memberof OrderCommentBaseResponseDTO
     */
    'positiveComment'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCommentBaseResponseDTO
     */
    'negativeComment'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCommentBaseResponseDTO
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface OrderDetailsResponseDto
 */
export interface OrderDetailsResponseDto {
    /**
     * 
     * @type {string}
     * @memberof OrderDetailsResponseDto
     */
    'type': OrderDetailsResponseDtoTypeEnum;
    /**
     * 
     * @type {OrderPersonInfoResponseDto}
     * @memberof OrderDetailsResponseDto
     */
    'fromPerson': OrderPersonInfoResponseDto;
    /**
     * 
     * @type {OrderPersonInfoResponseDto}
     * @memberof OrderDetailsResponseDto
     */
    'toPerson': OrderPersonInfoResponseDto;
    /**
     * 
     * @type {string}
     * @memberof OrderDetailsResponseDto
     */
    'textToVideo': string;
}

export const OrderDetailsResponseDtoTypeEnum = {
    Myself: 'myself',
    Another: 'another'
} as const;

export type OrderDetailsResponseDtoTypeEnum = typeof OrderDetailsResponseDtoTypeEnum[keyof typeof OrderDetailsResponseDtoTypeEnum];

/**
 * 
 * @export
 * @interface OrderExecutionBaseResponseDto
 */
export interface OrderExecutionBaseResponseDto {
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionBaseResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionBaseResponseDto
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionBaseResponseDto
     */
    'videoFileAssetId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionBaseResponseDto
     */
    'videoFilePlaybackId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionBaseResponseDto
     */
    'customerRejectComment'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrderExecutionBaseResponseDto
     */
    'viewedByCustomer'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionBaseResponseDto
     */
    'status': OrderExecutionBaseResponseDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionBaseResponseDto
     */
    'createdAt': string;
}

export const OrderExecutionBaseResponseDtoStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected'
} as const;

export type OrderExecutionBaseResponseDtoStatusEnum = typeof OrderExecutionBaseResponseDtoStatusEnum[keyof typeof OrderExecutionBaseResponseDtoStatusEnum];

/**
 * 
 * @export
 * @interface OrderExecutionTypeOrmEntity
 */
export interface OrderExecutionTypeOrmEntity {
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntity
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntity
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntity
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntity
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntity
     */
    'videoFileAssetId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntity
     */
    'videoFilePlaybackId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntity
     */
    'status': OrderExecutionTypeOrmEntityStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof OrderExecutionTypeOrmEntity
     */
    'viewedByCustomer': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntity
     */
    'customerRejectComment'?: string;
    /**
     * 
     * @type {OrderExecutionTypeOrmEntityOrder}
     * @memberof OrderExecutionTypeOrmEntity
     */
    'order'?: OrderExecutionTypeOrmEntityOrder | null;
}

export const OrderExecutionTypeOrmEntityStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected'
} as const;

export type OrderExecutionTypeOrmEntityStatusEnum = typeof OrderExecutionTypeOrmEntityStatusEnum[keyof typeof OrderExecutionTypeOrmEntityStatusEnum];

/**
 * 
 * @export
 * @interface OrderExecutionTypeOrmEntityOrder
 */
export interface OrderExecutionTypeOrmEntityOrder {
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'updatedAt': string;
    /**
     * 
     * @type {number}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'number'?: number;
    /**
     * 
     * @type {object}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'customerClientId': object | null;
    /**
     * 
     * @type {object}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'artistClientId': object | null;
    /**
     * 
     * @type {object}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'orderDetails': object;
    /**
     * 
     * @type {boolean}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'allowedToPublish': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'status': OrderExecutionTypeOrmEntityOrderStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'occasion': OrderExecutionTypeOrmEntityOrderOccasionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'statusHistory': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'cancelComment'?: string;
    /**
     * 
     * @type {object}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'actionUntilAt'?: object;
    /**
     * 
     * @type {object}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'waitForAction'?: object;
    /**
     * 
     * @type {number}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'type': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'fundsTransferredToArtist'?: boolean;
    /**
     * 
     * @type {OrderTypeOrmEntityArtistClient}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'artistClient'?: OrderTypeOrmEntityArtistClient | null;
    /**
     * 
     * @type {OrderTypeOrmEntityArtistClient}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'customerClient'?: OrderTypeOrmEntityArtistClient | null;
    /**
     * 
     * @type {Array<OrderExecutionTypeOrmEntity>}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'orderExecutions': Array<OrderExecutionTypeOrmEntity>;
    /**
     * 
     * @type {Array<OrderPaymentTypeOrmEntity>}
     * @memberof OrderExecutionTypeOrmEntityOrder
     */
    'orderPayments': Array<OrderPaymentTypeOrmEntity>;
}

export const OrderExecutionTypeOrmEntityOrderStatusEnum = {
    PendingPayment: 'pending_payment',
    Pending: 'pending',
    Accepted: 'accepted',
    Rejected: 'rejected',
    Cancelled: 'cancelled',
    DoneWaitingForApproval: 'done_waiting_for_approval',
    DoneApproved: 'done_approved',
    WaitingForRework: 'waiting_for_rework',
    UnderConsideration: 'under_consideration',
    DoneAfterConsideration: 'done_after_consideration',
    RejectAfterConsideration: 'reject_after_consideration'
} as const;

export type OrderExecutionTypeOrmEntityOrderStatusEnum = typeof OrderExecutionTypeOrmEntityOrderStatusEnum[keyof typeof OrderExecutionTypeOrmEntityOrderStatusEnum];
export const OrderExecutionTypeOrmEntityOrderOccasionEnum = {
    Birthday: 'birthday',
    Wedding: 'wedding',
    NewYear: 'new_year',
    Anniversary: 'anniversary',
    Guidance: 'guidance',
    Advice: 'advice',
    Other: 'other'
} as const;

export type OrderExecutionTypeOrmEntityOrderOccasionEnum = typeof OrderExecutionTypeOrmEntityOrderOccasionEnum[keyof typeof OrderExecutionTypeOrmEntityOrderOccasionEnum];

/**
 * 
 * @export
 * @interface OrderPaymentBaseResponseDto
 */
export interface OrderPaymentBaseResponseDto {
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentBaseResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentBaseResponseDto
     */
    'orderId': string;
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentBaseResponseDto
     */
    'transactionId': number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentBaseResponseDto
     */
    'kind': OrderPaymentBaseResponseDtoKindEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentBaseResponseDto
     */
    'status': OrderPaymentBaseResponseDtoStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentBaseResponseDto
     */
    'amount': number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentBaseResponseDto
     */
    'currency': OrderPaymentBaseResponseDtoCurrencyEnum;
    /**
     * 
     * @type {object}
     * @memberof OrderPaymentBaseResponseDto
     */
    'errorMessage': object | null;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentBaseResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentBaseResponseDto
     */
    'updatedAt': string;
}

export const OrderPaymentBaseResponseDtoKindEnum = {
    Payment: 'payment',
    Refund: 'refund'
} as const;

export type OrderPaymentBaseResponseDtoKindEnum = typeof OrderPaymentBaseResponseDtoKindEnum[keyof typeof OrderPaymentBaseResponseDtoKindEnum];
export const OrderPaymentBaseResponseDtoStatusEnum = {
    PendingPay: 'pending_pay',
    PayError: 'pay_error',
    Payed: 'payed',
    PendingRefund: 'pending_refund',
    Refunded: 'refunded'
} as const;

export type OrderPaymentBaseResponseDtoStatusEnum = typeof OrderPaymentBaseResponseDtoStatusEnum[keyof typeof OrderPaymentBaseResponseDtoStatusEnum];
export const OrderPaymentBaseResponseDtoCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type OrderPaymentBaseResponseDtoCurrencyEnum = typeof OrderPaymentBaseResponseDtoCurrencyEnum[keyof typeof OrderPaymentBaseResponseDtoCurrencyEnum];

/**
 * 
 * @export
 * @interface OrderPaymentResponseDto
 */
export interface OrderPaymentResponseDto {
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentResponseDto
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentResponseDto
     */
    'currency': OrderPaymentResponseDtoCurrencyEnum;
}

export const OrderPaymentResponseDtoCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type OrderPaymentResponseDtoCurrencyEnum = typeof OrderPaymentResponseDtoCurrencyEnum[keyof typeof OrderPaymentResponseDtoCurrencyEnum];

/**
 * 
 * @export
 * @interface OrderPaymentTypeOrmEntity
 */
export interface OrderPaymentTypeOrmEntity {
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentTypeOrmEntity
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentTypeOrmEntity
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentTypeOrmEntity
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentTypeOrmEntity
     */
    'orderId': string;
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentTypeOrmEntity
     */
    'transactionId': number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentTypeOrmEntity
     */
    'kind': OrderPaymentTypeOrmEntityKindEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentTypeOrmEntity
     */
    'status': OrderPaymentTypeOrmEntityStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentTypeOrmEntity
     */
    'amount': number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentTypeOrmEntity
     */
    'currency': OrderPaymentTypeOrmEntityCurrencyEnum;
    /**
     * 
     * @type {object}
     * @memberof OrderPaymentTypeOrmEntity
     */
    'errorMessage': object | null;
    /**
     * 
     * @type {OrderExecutionTypeOrmEntityOrder}
     * @memberof OrderPaymentTypeOrmEntity
     */
    'order'?: OrderExecutionTypeOrmEntityOrder | null;
}

export const OrderPaymentTypeOrmEntityKindEnum = {
    Payment: 'payment',
    Refund: 'refund'
} as const;

export type OrderPaymentTypeOrmEntityKindEnum = typeof OrderPaymentTypeOrmEntityKindEnum[keyof typeof OrderPaymentTypeOrmEntityKindEnum];
export const OrderPaymentTypeOrmEntityStatusEnum = {
    PendingPay: 'pending_pay',
    PayError: 'pay_error',
    Payed: 'payed',
    PendingRefund: 'pending_refund',
    Refunded: 'refunded'
} as const;

export type OrderPaymentTypeOrmEntityStatusEnum = typeof OrderPaymentTypeOrmEntityStatusEnum[keyof typeof OrderPaymentTypeOrmEntityStatusEnum];
export const OrderPaymentTypeOrmEntityCurrencyEnum = {
    Rub: 'RUB',
    Usd: 'USD',
    Uzs: 'UZS',
    Eur: 'EUR'
} as const;

export type OrderPaymentTypeOrmEntityCurrencyEnum = typeof OrderPaymentTypeOrmEntityCurrencyEnum[keyof typeof OrderPaymentTypeOrmEntityCurrencyEnum];

/**
 * 
 * @export
 * @interface OrderPersonInfoResponseDto
 */
export interface OrderPersonInfoResponseDto {
    /**
     * 
     * @type {string}
     * @memberof OrderPersonInfoResponseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OrderPersonInfoResponseDto
     */
    'gender': OrderPersonInfoResponseDtoGenderEnum;
}

export const OrderPersonInfoResponseDtoGenderEnum = {
    Male: 'male',
    Female: 'female'
} as const;

export type OrderPersonInfoResponseDtoGenderEnum = typeof OrderPersonInfoResponseDtoGenderEnum[keyof typeof OrderPersonInfoResponseDtoGenderEnum];

/**
 * 
 * @export
 * @interface OrderStatusHistoryItemDto
 */
export interface OrderStatusHistoryItemDto {
    /**
     * 
     * @type {string}
     * @memberof OrderStatusHistoryItemDto
     */
    'actorClientId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderStatusHistoryItemDto
     */
    'status': OrderStatusHistoryItemDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderStatusHistoryItemDto
     */
    'updatedAt': string;
}

export const OrderStatusHistoryItemDtoStatusEnum = {
    PendingPayment: 'pending_payment',
    Pending: 'pending',
    Accepted: 'accepted',
    Rejected: 'rejected',
    Cancelled: 'cancelled',
    DoneWaitingForApproval: 'done_waiting_for_approval',
    DoneApproved: 'done_approved',
    WaitingForRework: 'waiting_for_rework',
    UnderConsideration: 'under_consideration',
    DoneAfterConsideration: 'done_after_consideration',
    RejectAfterConsideration: 'reject_after_consideration'
} as const;

export type OrderStatusHistoryItemDtoStatusEnum = typeof OrderStatusHistoryItemDtoStatusEnum[keyof typeof OrderStatusHistoryItemDtoStatusEnum];

/**
 * 
 * @export
 * @interface OrderTypeOrmEntity
 */
export interface OrderTypeOrmEntity {
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntity
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntity
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntity
     */
    'updatedAt': string;
    /**
     * 
     * @type {number}
     * @memberof OrderTypeOrmEntity
     */
    'number'?: number;
    /**
     * 
     * @type {object}
     * @memberof OrderTypeOrmEntity
     */
    'customerClientId': object | null;
    /**
     * 
     * @type {object}
     * @memberof OrderTypeOrmEntity
     */
    'artistClientId': object | null;
    /**
     * 
     * @type {object}
     * @memberof OrderTypeOrmEntity
     */
    'orderDetails': object;
    /**
     * 
     * @type {boolean}
     * @memberof OrderTypeOrmEntity
     */
    'allowedToPublish': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntity
     */
    'status': OrderTypeOrmEntityStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntity
     */
    'occasion': OrderTypeOrmEntityOccasionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderTypeOrmEntity
     */
    'statusHistory': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntity
     */
    'cancelComment'?: string;
    /**
     * 
     * @type {object}
     * @memberof OrderTypeOrmEntity
     */
    'actionUntilAt'?: object;
    /**
     * 
     * @type {object}
     * @memberof OrderTypeOrmEntity
     */
    'waitForAction'?: object;
    /**
     * 
     * @type {number}
     * @memberof OrderTypeOrmEntity
     */
    'type': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderTypeOrmEntity
     */
    'fundsTransferredToArtist'?: boolean;
    /**
     * 
     * @type {OrderTypeOrmEntityArtistClient}
     * @memberof OrderTypeOrmEntity
     */
    'artistClient'?: OrderTypeOrmEntityArtistClient | null;
    /**
     * 
     * @type {OrderTypeOrmEntityArtistClient}
     * @memberof OrderTypeOrmEntity
     */
    'customerClient'?: OrderTypeOrmEntityArtistClient | null;
    /**
     * 
     * @type {Array<OrderExecutionTypeOrmEntity>}
     * @memberof OrderTypeOrmEntity
     */
    'orderExecutions': Array<OrderExecutionTypeOrmEntity>;
    /**
     * 
     * @type {Array<OrderPaymentTypeOrmEntity>}
     * @memberof OrderTypeOrmEntity
     */
    'orderPayments': Array<OrderPaymentTypeOrmEntity>;
}

export const OrderTypeOrmEntityStatusEnum = {
    PendingPayment: 'pending_payment',
    Pending: 'pending',
    Accepted: 'accepted',
    Rejected: 'rejected',
    Cancelled: 'cancelled',
    DoneWaitingForApproval: 'done_waiting_for_approval',
    DoneApproved: 'done_approved',
    WaitingForRework: 'waiting_for_rework',
    UnderConsideration: 'under_consideration',
    DoneAfterConsideration: 'done_after_consideration',
    RejectAfterConsideration: 'reject_after_consideration'
} as const;

export type OrderTypeOrmEntityStatusEnum = typeof OrderTypeOrmEntityStatusEnum[keyof typeof OrderTypeOrmEntityStatusEnum];
export const OrderTypeOrmEntityOccasionEnum = {
    Birthday: 'birthday',
    Wedding: 'wedding',
    NewYear: 'new_year',
    Anniversary: 'anniversary',
    Guidance: 'guidance',
    Advice: 'advice',
    Other: 'other'
} as const;

export type OrderTypeOrmEntityOccasionEnum = typeof OrderTypeOrmEntityOccasionEnum[keyof typeof OrderTypeOrmEntityOccasionEnum];

/**
 * 
 * @export
 * @interface OrderTypeOrmEntityArtistClient
 */
export interface OrderTypeOrmEntityArtistClient {
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'type': OrderTypeOrmEntityArtistClientTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'phoneNumberConfirmed': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'hashPassword': string;
    /**
     * 
     * @type {string}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'status': OrderTypeOrmEntityArtistClientStatusEnum;
    /**
     * 
     * @type {ClientTypeOrmEntityArtistProfile}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'artistProfile'?: ClientTypeOrmEntityArtistProfile | null;
    /**
     * 
     * @type {ClientTypeOrmEntityCustomerProfile}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'customerProfile'?: ClientTypeOrmEntityCustomerProfile | null;
    /**
     * 
     * @type {Array<OrderTypeOrmEntity>}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'customerOrders'?: Array<OrderTypeOrmEntity> | null;
    /**
     * 
     * @type {Array<OrderTypeOrmEntity>}
     * @memberof OrderTypeOrmEntityArtistClient
     */
    'artistOrders'?: Array<OrderTypeOrmEntity> | null;
}

export const OrderTypeOrmEntityArtistClientTypeEnum = {
    Customer: 'CUSTOMER',
    Artist: 'ARTIST'
} as const;

export type OrderTypeOrmEntityArtistClientTypeEnum = typeof OrderTypeOrmEntityArtistClientTypeEnum[keyof typeof OrderTypeOrmEntityArtistClientTypeEnum];
export const OrderTypeOrmEntityArtistClientStatusEnum = {
    Registration: 'registration',
    Active: 'active'
} as const;

export type OrderTypeOrmEntityArtistClientStatusEnum = typeof OrderTypeOrmEntityArtistClientStatusEnum[keyof typeof OrderTypeOrmEntityArtistClientStatusEnum];

/**
 * 
 * @export
 * @interface PaginatedPromocodeResponseDTO
 */
export interface PaginatedPromocodeResponseDTO {
    /**
     * 
     * @type {Array<object>}
     * @memberof PaginatedPromocodeResponseDTO
     */
    'items': Array<object>;
    /**
     * 
     * @type {PaginationMetaDto}
     * @memberof PaginatedPromocodeResponseDTO
     */
    'meta': PaginationMetaDto;
}
/**
 * 
 * @export
 * @interface PaginatedSecretsResponseDTO
 */
export interface PaginatedSecretsResponseDTO {
    /**
     * 
     * @type {Array<SecretDTO>}
     * @memberof PaginatedSecretsResponseDTO
     */
    'items': Array<SecretDTO>;
    /**
     * 
     * @type {PaginationMetaDto}
     * @memberof PaginatedSecretsResponseDTO
     */
    'meta': PaginationMetaDto;
}
/**
 * 
 * @export
 * @interface PaginationCursorResponseDto
 */
export interface PaginationCursorResponseDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof PaginationCursorResponseDto
     */
    'data': Array<string>;
    /**
     * 
     * @type {CursorPaginatedMeta}
     * @memberof PaginationCursorResponseDto
     */
    'meta': CursorPaginatedMeta;
}
/**
 * 
 * @export
 * @interface PaginationDto
 */
export interface PaginationDto {
    /**
     * Page number
     * @type {number}
     * @memberof PaginationDto
     */
    'page'?: number;
    /**
     * Items per page
     * @type {number}
     * @memberof PaginationDto
     */
    'perPage'?: number;
}
/**
 * 
 * @export
 * @interface PaginationMetaDto
 */
export interface PaginationMetaDto {
    /**
     * 
     * @type {number}
     * @memberof PaginationMetaDto
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationMetaDto
     */
    'perPage': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationMetaDto
     */
    'currentPage': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationMetaDto
     */
    'totalPages': number;
    /**
     * 
     * @type {boolean}
     * @memberof PaginationMetaDto
     */
    'hasNextPage': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PaginationMetaDto
     */
    'hasPreviousPage': boolean;
}
/**
 * 
 * @export
 * @interface PublishedVideoCustomerInfoResponseDTO
 */
export interface PublishedVideoCustomerInfoResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof PublishedVideoCustomerInfoResponseDTO
     */
    'nickName': string;
}
/**
 * 
 * @export
 * @interface SecretDTO
 */
export interface SecretDTO {
    /**
     * The user ID
     * @type {string}
     * @memberof SecretDTO
     */
    'id': string;
    /**
     * login
     * @type {string}
     * @memberof SecretDTO
     */
    'login': string;
    /**
     * email
     * @type {string}
     * @memberof SecretDTO
     */
    'email': string;
    /**
     * password
     * @type {string}
     * @memberof SecretDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SecretFindAllDto
 */
export interface SecretFindAllDto {
    /**
     * Page number
     * @type {number}
     * @memberof SecretFindAllDto
     */
    'page'?: number;
    /**
     * Items per page
     * @type {number}
     * @memberof SecretFindAllDto
     */
    'perPage'?: number;
}
/**
 * 
 * @export
 * @interface SetUserFirebaseDto
 */
export interface SetUserFirebaseDto {
    /**
     * 
     * @type {string}
     * @memberof SetUserFirebaseDto
     */
    'firebase_id': string;
    /**
     * 
     * @type {object}
     * @memberof SetUserFirebaseDto
     */
    'details': object;
    /**
     * 
     * @type {string}
     * @memberof SetUserFirebaseDto
     */
    'device_id'?: string;
}
/**
 * 
 * @export
 * @interface SuccessResponseDto
 */
export interface SuccessResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof SuccessResponseDto
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof SuccessResponseDto
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateArtistProfileByAdminDTO
 */
export interface UpdateArtistProfileByAdminDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateArtistProfileByAdminDTO
     */
    'artistClientId': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArtistProfileByAdminDTO
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArtistProfileByAdminDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArtistProfileByAdminDTO
     */
    'description'?: string;
    /**
     * 
     * @type {ArtistSocialNetworksLinksTypeDto}
     * @memberof UpdateArtistProfileByAdminDTO
     */
    'socialNetworksLinks'?: ArtistSocialNetworksLinksTypeDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateArtistProfileByAdminDTO
     */
    'activityScopes'?: Array<UpdateArtistProfileByAdminDTOActivityScopesEnum>;
    /**
     * 
     * @type {string}
     * @memberof UpdateArtistProfileByAdminDTO
     */
    'avatarFullKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArtistProfileByAdminDTO
     */
    'avatarCroppedKey'?: string;
    /**
     * assetId of ready video file
     * @type {string}
     * @memberof UpdateArtistProfileByAdminDTO
     */
    'videoPresentationAssetId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateArtistProfileByAdminDTO
     */
    'isHiddenEmail'?: boolean;
}

export const UpdateArtistProfileByAdminDTOActivityScopesEnum = {
    Cinema: 'cinema',
    Music: 'music',
    Blogging: 'blogging',
    TicTok: 'tic_tok',
    Tv: 'tv',
    Sport: 'sport',
    Humor: 'humor',
    Youtube: 'youtube',
    Modeling: 'modeling',
    Business: 'business',
    Art: 'art',
    Literature: 'literature'
} as const;

export type UpdateArtistProfileByAdminDTOActivityScopesEnum = typeof UpdateArtistProfileByAdminDTOActivityScopesEnum[keyof typeof UpdateArtistProfileByAdminDTOActivityScopesEnum];

/**
 * 
 * @export
 * @interface UsePromocodeDto
 */
export interface UsePromocodeDto {
    /**
     * 
     * @type {string}
     * @memberof UsePromocodeDto
     */
    'artist_client_id': string;
    /**
     * 
     * @type {string}
     * @memberof UsePromocodeDto
     */
    'code': string;
}

/**
 * CloudPaymentsWebhooksApi - axios parameter creator
 * @export
 */
export const CloudPaymentsWebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudPaymentsWebhooksControllerHandleFail: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloudpayments/webhooks/fail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudPaymentsWebhooksControllerHandlePay: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloudpayments/webhooks/pay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudPaymentsWebhooksControllerHandleRefund: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloudpayments/webhooks/refund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloudPaymentsWebhooksApi - functional programming interface
 * @export
 */
export const CloudPaymentsWebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloudPaymentsWebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudPaymentsWebhooksControllerHandleFail(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudPaymentsWebhooksControllerHandleFail(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudPaymentsWebhooksControllerHandlePay(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudPaymentsWebhooksControllerHandlePay(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudPaymentsWebhooksControllerHandleRefund(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudPaymentsWebhooksControllerHandleRefund(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CloudPaymentsWebhooksApi - factory interface
 * @export
 */
export const CloudPaymentsWebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloudPaymentsWebhooksApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudPaymentsWebhooksControllerHandleFail(options?: any): AxiosPromise<void> {
            return localVarFp.cloudPaymentsWebhooksControllerHandleFail(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudPaymentsWebhooksControllerHandlePay(options?: any): AxiosPromise<void> {
            return localVarFp.cloudPaymentsWebhooksControllerHandlePay(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudPaymentsWebhooksControllerHandleRefund(options?: any): AxiosPromise<void> {
            return localVarFp.cloudPaymentsWebhooksControllerHandleRefund(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CloudPaymentsWebhooksApi - object-oriented interface
 * @export
 * @class CloudPaymentsWebhooksApi
 * @extends {BaseAPI}
 */
export class CloudPaymentsWebhooksApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudPaymentsWebhooksApi
     */
    public cloudPaymentsWebhooksControllerHandleFail(options?: AxiosRequestConfig) {
        return CloudPaymentsWebhooksApiFp(this.configuration).cloudPaymentsWebhooksControllerHandleFail(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudPaymentsWebhooksApi
     */
    public cloudPaymentsWebhooksControllerHandlePay(options?: AxiosRequestConfig) {
        return CloudPaymentsWebhooksApiFp(this.configuration).cloudPaymentsWebhooksControllerHandlePay(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudPaymentsWebhooksApi
     */
    public cloudPaymentsWebhooksControllerHandleRefund(options?: AxiosRequestConfig) {
        return CloudPaymentsWebhooksApiFp(this.configuration).cloudPaymentsWebhooksControllerHandleRefund(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerCheckHealth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerCheckHealth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthControllerCheckHealth200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerCheckHealth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerCheckHealth(options?: any): AxiosPromise<HealthControllerCheckHealth200Response> {
            return localVarFp.healthControllerCheckHealth(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthControllerCheckHealth(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthControllerCheckHealth(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1AdminPanelArtistProfileApi - axios parameter creator
 * @export
 */
export const V1AdminPanelArtistProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary client get presigned put url
         * @param {string} clientId 
         * @param {ClientGetPresignedPutUrlDto} clientGetPresignedPutUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelArtistProfilesControllerClientGetPresignedPutUrl: async (clientId: string, clientGetPresignedPutUrlDto: ClientGetPresignedPutUrlDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('adminPanelArtistProfilesControllerClientGetPresignedPutUrl', 'clientId', clientId)
            // verify required parameter 'clientGetPresignedPutUrlDto' is not null or undefined
            assertParamExists('adminPanelArtistProfilesControllerClientGetPresignedPutUrl', 'clientGetPresignedPutUrlDto', clientGetPresignedPutUrlDto)
            const localVarPath = `/v1/admin-panel/artist-profiles/bucket/image/get-presigned-put-url/{clientId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientGetPresignedPutUrlDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateArtistProfileByAdminDTO} createArtistProfileByAdminDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelArtistProfilesControllerCreateArtistProfile: async (createArtistProfileByAdminDTO: CreateArtistProfileByAdminDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createArtistProfileByAdminDTO' is not null or undefined
            assertParamExists('adminPanelArtistProfilesControllerCreateArtistProfile', 'createArtistProfileByAdminDTO', createArtistProfileByAdminDTO)
            const localVarPath = `/v1/admin-panel/artist-profiles/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createArtistProfileByAdminDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get paginated artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelArtistProfilesControllerCustomerGetArtistsByFilters: async (customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerFindArtistsByFiltersRequestDTO' is not null or undefined
            assertParamExists('adminPanelArtistProfilesControllerCustomerGetArtistsByFilters', 'customerFindArtistsByFiltersRequestDTO', customerFindArtistsByFiltersRequestDTO)
            const localVarPath = `/v1/admin-panel/artist-profiles/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerFindArtistsByFiltersRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteArtistProfileByAdminDTO} deleteArtistProfileByAdminDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelArtistProfilesControllerDeleteArtistProfile: async (deleteArtistProfileByAdminDTO: DeleteArtistProfileByAdminDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteArtistProfileByAdminDTO' is not null or undefined
            assertParamExists('adminPanelArtistProfilesControllerDeleteArtistProfile', 'deleteArtistProfileByAdminDTO', deleteArtistProfileByAdminDTO)
            const localVarPath = `/v1/admin-panel/artist-profiles/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteArtistProfileByAdminDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateArtistProfileByAdminDTO} updateArtistProfileByAdminDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelArtistProfilesControllerUpdateArtistProfile: async (updateArtistProfileByAdminDTO: UpdateArtistProfileByAdminDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateArtistProfileByAdminDTO' is not null or undefined
            assertParamExists('adminPanelArtistProfilesControllerUpdateArtistProfile', 'updateArtistProfileByAdminDTO', updateArtistProfileByAdminDTO)
            const localVarPath = `/v1/admin-panel/artist-profiles/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateArtistProfileByAdminDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a single ArtistProfileTypeOrmEntity
         * @param {string} id 
         * @param {AdminUpdateArtistProfileDto} adminUpdateArtistProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseAdminPanelArtistProfilesControllerArtistProfileTypeOrmEntity: async (id: string, adminUpdateArtistProfileDto: AdminUpdateArtistProfileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOneBaseAdminPanelArtistProfilesControllerArtistProfileTypeOrmEntity', 'id', id)
            // verify required parameter 'adminUpdateArtistProfileDto' is not null or undefined
            assertParamExists('updateOneBaseAdminPanelArtistProfilesControllerArtistProfileTypeOrmEntity', 'adminUpdateArtistProfileDto', adminUpdateArtistProfileDto)
            const localVarPath = `/v1/admin-panel/artist-profiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUpdateArtistProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1AdminPanelArtistProfileApi - functional programming interface
 * @export
 */
export const V1AdminPanelArtistProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1AdminPanelArtistProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary client get presigned put url
         * @param {string} clientId 
         * @param {ClientGetPresignedPutUrlDto} clientGetPresignedPutUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPanelArtistProfilesControllerClientGetPresignedPutUrl(clientId: string, clientGetPresignedPutUrlDto: ClientGetPresignedPutUrlDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientGetPhotoPresignedUrlResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPanelArtistProfilesControllerClientGetPresignedPutUrl(clientId, clientGetPresignedPutUrlDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateArtistProfileByAdminDTO} createArtistProfileByAdminDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPanelArtistProfilesControllerCreateArtistProfile(createArtistProfileByAdminDTO: CreateArtistProfileByAdminDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPanelArtistProfilesControllerCreateArtistProfile(createArtistProfileByAdminDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get paginated artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPanelArtistProfilesControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerFindArtistsByFiltersResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPanelArtistProfilesControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteArtistProfileByAdminDTO} deleteArtistProfileByAdminDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPanelArtistProfilesControllerDeleteArtistProfile(deleteArtistProfileByAdminDTO: DeleteArtistProfileByAdminDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPanelArtistProfilesControllerDeleteArtistProfile(deleteArtistProfileByAdminDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateArtistProfileByAdminDTO} updateArtistProfileByAdminDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPanelArtistProfilesControllerUpdateArtistProfile(updateArtistProfileByAdminDTO: UpdateArtistProfileByAdminDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPanelArtistProfilesControllerUpdateArtistProfile(updateArtistProfileByAdminDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a single ArtistProfileTypeOrmEntity
         * @param {string} id 
         * @param {AdminUpdateArtistProfileDto} adminUpdateArtistProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOneBaseAdminPanelArtistProfilesControllerArtistProfileTypeOrmEntity(id: string, adminUpdateArtistProfileDto: AdminUpdateArtistProfileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistProfileTypeOrmEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBaseAdminPanelArtistProfilesControllerArtistProfileTypeOrmEntity(id, adminUpdateArtistProfileDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1AdminPanelArtistProfileApi - factory interface
 * @export
 */
export const V1AdminPanelArtistProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1AdminPanelArtistProfileApiFp(configuration)
    return {
        /**
         * 
         * @summary client get presigned put url
         * @param {string} clientId 
         * @param {ClientGetPresignedPutUrlDto} clientGetPresignedPutUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelArtistProfilesControllerClientGetPresignedPutUrl(clientId: string, clientGetPresignedPutUrlDto: ClientGetPresignedPutUrlDto, options?: any): AxiosPromise<ClientGetPhotoPresignedUrlResponseDto> {
            return localVarFp.adminPanelArtistProfilesControllerClientGetPresignedPutUrl(clientId, clientGetPresignedPutUrlDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateArtistProfileByAdminDTO} createArtistProfileByAdminDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelArtistProfilesControllerCreateArtistProfile(createArtistProfileByAdminDTO: CreateArtistProfileByAdminDTO, options?: any): AxiosPromise<ArtistProfileModel> {
            return localVarFp.adminPanelArtistProfilesControllerCreateArtistProfile(createArtistProfileByAdminDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get paginated artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelArtistProfilesControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: any): AxiosPromise<CustomerFindArtistsByFiltersResponseDTO> {
            return localVarFp.adminPanelArtistProfilesControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteArtistProfileByAdminDTO} deleteArtistProfileByAdminDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelArtistProfilesControllerDeleteArtistProfile(deleteArtistProfileByAdminDTO: DeleteArtistProfileByAdminDTO, options?: any): AxiosPromise<void> {
            return localVarFp.adminPanelArtistProfilesControllerDeleteArtistProfile(deleteArtistProfileByAdminDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateArtistProfileByAdminDTO} updateArtistProfileByAdminDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelArtistProfilesControllerUpdateArtistProfile(updateArtistProfileByAdminDTO: UpdateArtistProfileByAdminDTO, options?: any): AxiosPromise<void> {
            return localVarFp.adminPanelArtistProfilesControllerUpdateArtistProfile(updateArtistProfileByAdminDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a single ArtistProfileTypeOrmEntity
         * @param {string} id 
         * @param {AdminUpdateArtistProfileDto} adminUpdateArtistProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseAdminPanelArtistProfilesControllerArtistProfileTypeOrmEntity(id: string, adminUpdateArtistProfileDto: AdminUpdateArtistProfileDto, options?: any): AxiosPromise<ArtistProfileTypeOrmEntity> {
            return localVarFp.updateOneBaseAdminPanelArtistProfilesControllerArtistProfileTypeOrmEntity(id, adminUpdateArtistProfileDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1AdminPanelArtistProfileApi - object-oriented interface
 * @export
 * @class V1AdminPanelArtistProfileApi
 * @extends {BaseAPI}
 */
export class V1AdminPanelArtistProfileApi extends BaseAPI {
    /**
     * 
     * @summary client get presigned put url
     * @param {string} clientId 
     * @param {ClientGetPresignedPutUrlDto} clientGetPresignedPutUrlDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelArtistProfileApi
     */
    public adminPanelArtistProfilesControllerClientGetPresignedPutUrl(clientId: string, clientGetPresignedPutUrlDto: ClientGetPresignedPutUrlDto, options?: AxiosRequestConfig) {
        return V1AdminPanelArtistProfileApiFp(this.configuration).adminPanelArtistProfilesControllerClientGetPresignedPutUrl(clientId, clientGetPresignedPutUrlDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateArtistProfileByAdminDTO} createArtistProfileByAdminDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelArtistProfileApi
     */
    public adminPanelArtistProfilesControllerCreateArtistProfile(createArtistProfileByAdminDTO: CreateArtistProfileByAdminDTO, options?: AxiosRequestConfig) {
        return V1AdminPanelArtistProfileApiFp(this.configuration).adminPanelArtistProfilesControllerCreateArtistProfile(createArtistProfileByAdminDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get paginated artists
     * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelArtistProfileApi
     */
    public adminPanelArtistProfilesControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: AxiosRequestConfig) {
        return V1AdminPanelArtistProfileApiFp(this.configuration).adminPanelArtistProfilesControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteArtistProfileByAdminDTO} deleteArtistProfileByAdminDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelArtistProfileApi
     */
    public adminPanelArtistProfilesControllerDeleteArtistProfile(deleteArtistProfileByAdminDTO: DeleteArtistProfileByAdminDTO, options?: AxiosRequestConfig) {
        return V1AdminPanelArtistProfileApiFp(this.configuration).adminPanelArtistProfilesControllerDeleteArtistProfile(deleteArtistProfileByAdminDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateArtistProfileByAdminDTO} updateArtistProfileByAdminDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelArtistProfileApi
     */
    public adminPanelArtistProfilesControllerUpdateArtistProfile(updateArtistProfileByAdminDTO: UpdateArtistProfileByAdminDTO, options?: AxiosRequestConfig) {
        return V1AdminPanelArtistProfileApiFp(this.configuration).adminPanelArtistProfilesControllerUpdateArtistProfile(updateArtistProfileByAdminDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a single ArtistProfileTypeOrmEntity
     * @param {string} id 
     * @param {AdminUpdateArtistProfileDto} adminUpdateArtistProfileDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelArtistProfileApi
     */
    public updateOneBaseAdminPanelArtistProfilesControllerArtistProfileTypeOrmEntity(id: string, adminUpdateArtistProfileDto: AdminUpdateArtistProfileDto, options?: AxiosRequestConfig) {
        return V1AdminPanelArtistProfileApiFp(this.configuration).updateOneBaseAdminPanelArtistProfilesControllerArtistProfileTypeOrmEntity(id, adminUpdateArtistProfileDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1AdminPanelClientsApi - axios parameter creator
 * @export
 */
export const V1AdminPanelClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve multiple ClientTypeOrmEntities
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManyBaseAdminPanelClientsControllerClientTypeOrmEntity: async (fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin-panel/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }

            if (filter) {
                localVarQueryParameter['filter'] = filter;
            }

            if (or) {
                localVarQueryParameter['or'] = or;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single ClientTypeOrmEntity
         * @param {string} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseAdminPanelClientsControllerClientTypeOrmEntity: async (id: string, fields?: Array<string>, join?: Array<string>, cache?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneBaseAdminPanelClientsControllerClientTypeOrmEntity', 'id', id)
            const localVarPath = `/v1/admin-panel/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1AdminPanelClientsApi - functional programming interface
 * @export
 */
export const V1AdminPanelClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1AdminPanelClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve multiple ClientTypeOrmEntities
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManyBaseAdminPanelClientsControllerClientTypeOrmEntity(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManyBaseAdminPanelClientsControllerClientTypeOrmEntity200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBaseAdminPanelClientsControllerClientTypeOrmEntity(fields, s, filter, or, sort, join, limit, offset, page, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a single ClientTypeOrmEntity
         * @param {string} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneBaseAdminPanelClientsControllerClientTypeOrmEntity(id: string, fields?: Array<string>, join?: Array<string>, cache?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientTypeOrmEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseAdminPanelClientsControllerClientTypeOrmEntity(id, fields, join, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1AdminPanelClientsApi - factory interface
 * @export
 */
export const V1AdminPanelClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1AdminPanelClientsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve multiple ClientTypeOrmEntities
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManyBaseAdminPanelClientsControllerClientTypeOrmEntity(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: any): AxiosPromise<GetManyBaseAdminPanelClientsControllerClientTypeOrmEntity200Response> {
            return localVarFp.getManyBaseAdminPanelClientsControllerClientTypeOrmEntity(fields, s, filter, or, sort, join, limit, offset, page, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single ClientTypeOrmEntity
         * @param {string} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseAdminPanelClientsControllerClientTypeOrmEntity(id: string, fields?: Array<string>, join?: Array<string>, cache?: number, options?: any): AxiosPromise<ClientTypeOrmEntity> {
            return localVarFp.getOneBaseAdminPanelClientsControllerClientTypeOrmEntity(id, fields, join, cache, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1AdminPanelClientsApi - object-oriented interface
 * @export
 * @class V1AdminPanelClientsApi
 * @extends {BaseAPI}
 */
export class V1AdminPanelClientsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve multiple ClientTypeOrmEntities
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelClientsApi
     */
    public getManyBaseAdminPanelClientsControllerClientTypeOrmEntity(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: AxiosRequestConfig) {
        return V1AdminPanelClientsApiFp(this.configuration).getManyBaseAdminPanelClientsControllerClientTypeOrmEntity(fields, s, filter, or, sort, join, limit, offset, page, cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single ClientTypeOrmEntity
     * @param {string} id 
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelClientsApi
     */
    public getOneBaseAdminPanelClientsControllerClientTypeOrmEntity(id: string, fields?: Array<string>, join?: Array<string>, cache?: number, options?: AxiosRequestConfig) {
        return V1AdminPanelClientsApiFp(this.configuration).getOneBaseAdminPanelClientsControllerClientTypeOrmEntity(id, fields, join, cache, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1AdminPanelOrdersApi - axios parameter creator
 * @export
 */
export const V1AdminPanelOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve multiple OrderTypeOrmEntities
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManyBaseAdminPanelOrdersControllerOrderTypeOrmEntity: async (fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin-panel/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }

            if (filter) {
                localVarQueryParameter['filter'] = filter;
            }

            if (or) {
                localVarQueryParameter['or'] = or;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a single OrderTypeOrmEntity
         * @param {string} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity: async (id: string, fields?: Array<string>, join?: Array<string>, cache?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity', 'id', id)
            const localVarPath = `/v1/admin-panel/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a single OrderTypeOrmEntity
         * @param {string} id 
         * @param {AdminUpdateOrderDto} adminUpdateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity: async (id: string, adminUpdateOrderDto: AdminUpdateOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity', 'id', id)
            // verify required parameter 'adminUpdateOrderDto' is not null or undefined
            assertParamExists('updateOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity', 'adminUpdateOrderDto', adminUpdateOrderDto)
            const localVarPath = `/v1/admin-panel/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUpdateOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1AdminPanelOrdersApi - functional programming interface
 * @export
 */
export const V1AdminPanelOrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1AdminPanelOrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve multiple OrderTypeOrmEntities
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManyBaseAdminPanelOrdersControllerOrderTypeOrmEntity(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManyBaseAdminPanelOrdersControllerOrderTypeOrmEntity200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBaseAdminPanelOrdersControllerOrderTypeOrmEntity(fields, s, filter, or, sort, join, limit, offset, page, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve a single OrderTypeOrmEntity
         * @param {string} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id: string, fields?: Array<string>, join?: Array<string>, cache?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderTypeOrmEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id, fields, join, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a single OrderTypeOrmEntity
         * @param {string} id 
         * @param {AdminUpdateOrderDto} adminUpdateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id: string, adminUpdateOrderDto: AdminUpdateOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderTypeOrmEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id, adminUpdateOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1AdminPanelOrdersApi - factory interface
 * @export
 */
export const V1AdminPanelOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1AdminPanelOrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve multiple OrderTypeOrmEntities
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManyBaseAdminPanelOrdersControllerOrderTypeOrmEntity(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: any): AxiosPromise<GetManyBaseAdminPanelOrdersControllerOrderTypeOrmEntity200Response> {
            return localVarFp.getManyBaseAdminPanelOrdersControllerOrderTypeOrmEntity(fields, s, filter, or, sort, join, limit, offset, page, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a single OrderTypeOrmEntity
         * @param {string} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id: string, fields?: Array<string>, join?: Array<string>, cache?: number, options?: any): AxiosPromise<OrderTypeOrmEntity> {
            return localVarFp.getOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id, fields, join, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a single OrderTypeOrmEntity
         * @param {string} id 
         * @param {AdminUpdateOrderDto} adminUpdateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id: string, adminUpdateOrderDto: AdminUpdateOrderDto, options?: any): AxiosPromise<OrderTypeOrmEntity> {
            return localVarFp.updateOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id, adminUpdateOrderDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1AdminPanelOrdersApi - object-oriented interface
 * @export
 * @class V1AdminPanelOrdersApi
 * @extends {BaseAPI}
 */
export class V1AdminPanelOrdersApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve multiple OrderTypeOrmEntities
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelOrdersApi
     */
    public getManyBaseAdminPanelOrdersControllerOrderTypeOrmEntity(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: AxiosRequestConfig) {
        return V1AdminPanelOrdersApiFp(this.configuration).getManyBaseAdminPanelOrdersControllerOrderTypeOrmEntity(fields, s, filter, or, sort, join, limit, offset, page, cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a single OrderTypeOrmEntity
     * @param {string} id 
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelOrdersApi
     */
    public getOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id: string, fields?: Array<string>, join?: Array<string>, cache?: number, options?: AxiosRequestConfig) {
        return V1AdminPanelOrdersApiFp(this.configuration).getOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id, fields, join, cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a single OrderTypeOrmEntity
     * @param {string} id 
     * @param {AdminUpdateOrderDto} adminUpdateOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelOrdersApi
     */
    public updateOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id: string, adminUpdateOrderDto: AdminUpdateOrderDto, options?: AxiosRequestConfig) {
        return V1AdminPanelOrdersApiFp(this.configuration).updateOneBaseAdminPanelOrdersControllerOrderTypeOrmEntity(id, adminUpdateOrderDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1AdminPanelPromocodeApi - axios parameter creator
 * @export
 */
export const V1AdminPanelPromocodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UsePromocodeDto} usePromocodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promocodeControllerCheckPromocode: async (usePromocodeDto: UsePromocodeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usePromocodeDto' is not null or undefined
            assertParamExists('promocodeControllerCheckPromocode', 'usePromocodeDto', usePromocodeDto)
            const localVarPath = `/v1/admin-panel/promocode/check-promocode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usePromocodeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePromocodeDto} createPromocodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promocodeControllerCreate: async (createPromocodeDto: CreatePromocodeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPromocodeDto' is not null or undefined
            assertParamExists('promocodeControllerCreate', 'createPromocodeDto', createPromocodeDto)
            const localVarPath = `/v1/admin-panel/promocode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPromocodeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promocodeControllerDeleteById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('promocodeControllerDeleteById', 'id', id)
            const localVarPath = `/v1/admin-panel/promocode/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PaginationDto} paginationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promocodeControllerFindAll: async (paginationDto: PaginationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paginationDto' is not null or undefined
            assertParamExists('promocodeControllerFindAll', 'paginationDto', paginationDto)
            const localVarPath = `/v1/admin-panel/promocode/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paginationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1AdminPanelPromocodeApi - functional programming interface
 * @export
 */
export const V1AdminPanelPromocodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1AdminPanelPromocodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UsePromocodeDto} usePromocodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promocodeControllerCheckPromocode(usePromocodeDto: UsePromocodeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promocodeControllerCheckPromocode(usePromocodeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreatePromocodeDto} createPromocodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promocodeControllerCreate(createPromocodeDto: CreatePromocodeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promocodeControllerCreate(createPromocodeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promocodeControllerDeleteById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promocodeControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PaginationDto} paginationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promocodeControllerFindAll(paginationDto: PaginationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPromocodeResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promocodeControllerFindAll(paginationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1AdminPanelPromocodeApi - factory interface
 * @export
 */
export const V1AdminPanelPromocodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1AdminPanelPromocodeApiFp(configuration)
    return {
        /**
         * 
         * @param {UsePromocodeDto} usePromocodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promocodeControllerCheckPromocode(usePromocodeDto: UsePromocodeDto, options?: any): AxiosPromise<object> {
            return localVarFp.promocodeControllerCheckPromocode(usePromocodeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePromocodeDto} createPromocodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promocodeControllerCreate(createPromocodeDto: CreatePromocodeDto, options?: any): AxiosPromise<void> {
            return localVarFp.promocodeControllerCreate(createPromocodeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promocodeControllerDeleteById(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.promocodeControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PaginationDto} paginationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promocodeControllerFindAll(paginationDto: PaginationDto, options?: any): AxiosPromise<PaginatedPromocodeResponseDTO> {
            return localVarFp.promocodeControllerFindAll(paginationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1AdminPanelPromocodeApi - object-oriented interface
 * @export
 * @class V1AdminPanelPromocodeApi
 * @extends {BaseAPI}
 */
export class V1AdminPanelPromocodeApi extends BaseAPI {
    /**
     * 
     * @param {UsePromocodeDto} usePromocodeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelPromocodeApi
     */
    public promocodeControllerCheckPromocode(usePromocodeDto: UsePromocodeDto, options?: AxiosRequestConfig) {
        return V1AdminPanelPromocodeApiFp(this.configuration).promocodeControllerCheckPromocode(usePromocodeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePromocodeDto} createPromocodeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelPromocodeApi
     */
    public promocodeControllerCreate(createPromocodeDto: CreatePromocodeDto, options?: AxiosRequestConfig) {
        return V1AdminPanelPromocodeApiFp(this.configuration).promocodeControllerCreate(createPromocodeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelPromocodeApi
     */
    public promocodeControllerDeleteById(id: string, options?: AxiosRequestConfig) {
        return V1AdminPanelPromocodeApiFp(this.configuration).promocodeControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PaginationDto} paginationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelPromocodeApi
     */
    public promocodeControllerFindAll(paginationDto: PaginationDto, options?: AxiosRequestConfig) {
        return V1AdminPanelPromocodeApiFp(this.configuration).promocodeControllerFindAll(paginationDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1AdminPanelSecretsApi - axios parameter creator
 * @export
 */
export const V1AdminPanelSecretsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateSecretDto} createSecretDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretsControllerCreate: async (createSecretDto: CreateSecretDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSecretDto' is not null or undefined
            assertParamExists('secretsControllerCreate', 'createSecretDto', createSecretDto)
            const localVarPath = `/v1/admin-panel/secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSecretDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretsControllerDeleteById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('secretsControllerDeleteById', 'id', id)
            const localVarPath = `/v1/admin-panel/secrets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SecretFindAllDto} secretFindAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretsControllerFindAll: async (secretFindAllDto: SecretFindAllDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretFindAllDto' is not null or undefined
            assertParamExists('secretsControllerFindAll', 'secretFindAllDto', secretFindAllDto)
            const localVarPath = `/v1/admin-panel/secrets/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(secretFindAllDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1AdminPanelSecretsApi - functional programming interface
 * @export
 */
export const V1AdminPanelSecretsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1AdminPanelSecretsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateSecretDto} createSecretDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secretsControllerCreate(createSecretDto: CreateSecretDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secretsControllerCreate(createSecretDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secretsControllerDeleteById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secretsControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SecretFindAllDto} secretFindAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secretsControllerFindAll(secretFindAllDto: SecretFindAllDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSecretsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secretsControllerFindAll(secretFindAllDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1AdminPanelSecretsApi - factory interface
 * @export
 */
export const V1AdminPanelSecretsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1AdminPanelSecretsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateSecretDto} createSecretDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretsControllerCreate(createSecretDto: CreateSecretDto, options?: any): AxiosPromise<void> {
            return localVarFp.secretsControllerCreate(createSecretDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretsControllerDeleteById(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.secretsControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SecretFindAllDto} secretFindAllDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretsControllerFindAll(secretFindAllDto: SecretFindAllDto, options?: any): AxiosPromise<PaginatedSecretsResponseDTO> {
            return localVarFp.secretsControllerFindAll(secretFindAllDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1AdminPanelSecretsApi - object-oriented interface
 * @export
 * @class V1AdminPanelSecretsApi
 * @extends {BaseAPI}
 */
export class V1AdminPanelSecretsApi extends BaseAPI {
    /**
     * 
     * @param {CreateSecretDto} createSecretDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelSecretsApi
     */
    public secretsControllerCreate(createSecretDto: CreateSecretDto, options?: AxiosRequestConfig) {
        return V1AdminPanelSecretsApiFp(this.configuration).secretsControllerCreate(createSecretDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelSecretsApi
     */
    public secretsControllerDeleteById(id: string, options?: AxiosRequestConfig) {
        return V1AdminPanelSecretsApiFp(this.configuration).secretsControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SecretFindAllDto} secretFindAllDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminPanelSecretsApi
     */
    public secretsControllerFindAll(secretFindAllDto: SecretFindAllDto, options?: AxiosRequestConfig) {
        return V1AdminPanelSecretsApiFp(this.configuration).secretsControllerFindAll(secretFindAllDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1AdminsApi - axios parameter creator
 * @export
 */
export const V1AdminsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new admin
         * @param {CreateAdminDto} createAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelAdminAuthControllerCreateAdmin: async (createAdminDto: CreateAdminDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAdminDto' is not null or undefined
            assertParamExists('adminPanelAdminAuthControllerCreateAdmin', 'createAdminDto', createAdminDto)
            const localVarPath = `/v1/admins/create-admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAdminDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete admin
         * @param {string} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelAdminAuthControllerDeleteAdmin: async (adminId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            assertParamExists('adminPanelAdminAuthControllerDeleteAdmin', 'adminId', adminId)
            const localVarPath = `/v1/admins/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelAdminAuthControllerGetAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admins/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve current admin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelAdminAuthControllerGetMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admins/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_admin required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign in via email/password
         * @param {AdminsSignInBodyDto} adminsSignInBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelAdminAuthControllerSignIn: async (adminsSignInBodyDto: AdminsSignInBodyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminsSignInBodyDto' is not null or undefined
            assertParamExists('adminPanelAdminAuthControllerSignIn', 'adminsSignInBodyDto', adminsSignInBodyDto)
            const localVarPath = `/v1/admins/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminsSignInBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1AdminsApi - functional programming interface
 * @export
 */
export const V1AdminsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1AdminsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new admin
         * @param {CreateAdminDto} createAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPanelAdminAuthControllerCreateAdmin(createAdminDto: CreateAdminDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPanelAdminAuthControllerCreateAdmin(createAdminDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete admin
         * @param {string} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPanelAdminAuthControllerDeleteAdmin(adminId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPanelAdminAuthControllerDeleteAdmin(adminId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve all admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPanelAdminAuthControllerGetAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPanelAdminAuthControllerGetAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve current admin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPanelAdminAuthControllerGetMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPanelAdminAuthControllerGetMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign in via email/password
         * @param {AdminsSignInBodyDto} adminsSignInBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPanelAdminAuthControllerSignIn(adminsSignInBodyDto: AdminsSignInBodyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPanelAdminAuthControllerSignIn(adminsSignInBodyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1AdminsApi - factory interface
 * @export
 */
export const V1AdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1AdminsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new admin
         * @param {CreateAdminDto} createAdminDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelAdminAuthControllerCreateAdmin(createAdminDto: CreateAdminDto, options?: any): AxiosPromise<CreateAdminDto> {
            return localVarFp.adminPanelAdminAuthControllerCreateAdmin(createAdminDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete admin
         * @param {string} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelAdminAuthControllerDeleteAdmin(adminId: string, options?: any): AxiosPromise<object> {
            return localVarFp.adminPanelAdminAuthControllerDeleteAdmin(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all admins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelAdminAuthControllerGetAll(options?: any): AxiosPromise<Array> {
            return localVarFp.adminPanelAdminAuthControllerGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve current admin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelAdminAuthControllerGetMe(options?: any): AxiosPromise<AdminDto> {
            return localVarFp.adminPanelAdminAuthControllerGetMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign in via email/password
         * @param {AdminsSignInBodyDto} adminsSignInBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPanelAdminAuthControllerSignIn(adminsSignInBodyDto: AdminsSignInBodyDto, options?: any): AxiosPromise<AuthAdminDto> {
            return localVarFp.adminPanelAdminAuthControllerSignIn(adminsSignInBodyDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1AdminsApi - object-oriented interface
 * @export
 * @class V1AdminsApi
 * @extends {BaseAPI}
 */
export class V1AdminsApi extends BaseAPI {
    /**
     * 
     * @summary Create new admin
     * @param {CreateAdminDto} createAdminDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminsApi
     */
    public adminPanelAdminAuthControllerCreateAdmin(createAdminDto: CreateAdminDto, options?: AxiosRequestConfig) {
        return V1AdminsApiFp(this.configuration).adminPanelAdminAuthControllerCreateAdmin(createAdminDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete admin
     * @param {string} adminId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminsApi
     */
    public adminPanelAdminAuthControllerDeleteAdmin(adminId: string, options?: AxiosRequestConfig) {
        return V1AdminsApiFp(this.configuration).adminPanelAdminAuthControllerDeleteAdmin(adminId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all admins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminsApi
     */
    public adminPanelAdminAuthControllerGetAll(options?: AxiosRequestConfig) {
        return V1AdminsApiFp(this.configuration).adminPanelAdminAuthControllerGetAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve current admin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminsApi
     */
    public adminPanelAdminAuthControllerGetMe(options?: AxiosRequestConfig) {
        return V1AdminsApiFp(this.configuration).adminPanelAdminAuthControllerGetMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign in via email/password
     * @param {AdminsSignInBodyDto} adminsSignInBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AdminsApi
     */
    public adminPanelAdminAuthControllerSignIn(adminsSignInBodyDto: AdminsSignInBodyDto, options?: AxiosRequestConfig) {
        return V1AdminsApiFp(this.configuration).adminPanelAdminAuthControllerSignIn(adminsSignInBodyDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1ArtistProfileApi - axios parameter creator
 * @export
 */
export const V1ArtistProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create artist profile
         * @param {ArtistCompleteRegistrationDto} artistCompleteRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerArtistCreateMeProfile: async (artistCompleteRegistrationDto: ArtistCompleteRegistrationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistCompleteRegistrationDto' is not null or undefined
            assertParamExists('artistsProfileV1ControllerArtistCreateMeProfile', 'artistCompleteRegistrationDto', artistCompleteRegistrationDto)
            const localVarPath = `/v1/artists/complete-registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication client_registration required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(artistCompleteRegistrationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get authorized artist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerArtistGetMeProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/artists/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get my published videos
         * @param {ArtistGetPublishedVideosRequestDTO} artistGetPublishedVideosRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerArtistGetMePublishedVideos: async (artistGetPublishedVideosRequestDTO: ArtistGetPublishedVideosRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistGetPublishedVideosRequestDTO' is not null or undefined
            assertParamExists('artistsProfileV1ControllerArtistGetMePublishedVideos', 'artistGetPublishedVideosRequestDTO', artistGetPublishedVideosRequestDTO)
            const localVarPath = `/v1/artists/me/get-published-videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(artistGetPublishedVideosRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update artist profile
         * @param {ArtistUpdateProfileDto} artistUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerArtistUpdateMeProfile: async (artistUpdateProfileDto: ArtistUpdateProfileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistUpdateProfileDto' is not null or undefined
            assertParamExists('artistsProfileV1ControllerArtistUpdateMeProfile', 'artistUpdateProfileDto', artistUpdateProfileDto)
            const localVarPath = `/v1/artists/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(artistUpdateProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete artist service
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerDeleteArtistService: async (serviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            assertParamExists('artistsProfileV1ControllerDeleteArtistService', 'serviceId', serviceId)
            const localVarPath = `/v1/artists/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary set artist service
         * @param {ArtistAddServiceParamsDTO} artistAddServiceParamsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerSetService: async (artistAddServiceParamsDTO: ArtistAddServiceParamsDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistAddServiceParamsDTO' is not null or undefined
            assertParamExists('artistsProfileV1ControllerSetService', 'artistAddServiceParamsDTO', artistAddServiceParamsDTO)
            const localVarPath = `/v1/artists/set-service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(artistAddServiceParamsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1ArtistProfileApi - functional programming interface
 * @export
 */
export const V1ArtistProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ArtistProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary create artist profile
         * @param {ArtistCompleteRegistrationDto} artistCompleteRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistsProfileV1ControllerArtistCreateMeProfile(artistCompleteRegistrationDto: ArtistCompleteRegistrationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistsProfileV1ControllerArtistCreateMeProfile(artistCompleteRegistrationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get authorized artist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistsProfileV1ControllerArtistGetMeProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistMeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistsProfileV1ControllerArtistGetMeProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get my published videos
         * @param {ArtistGetPublishedVideosRequestDTO} artistGetPublishedVideosRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistsProfileV1ControllerArtistGetMePublishedVideos(artistGetPublishedVideosRequestDTO: ArtistGetPublishedVideosRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientGetArtistsPublishedVideosResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistsProfileV1ControllerArtistGetMePublishedVideos(artistGetPublishedVideosRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update artist profile
         * @param {ArtistUpdateProfileDto} artistUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistsProfileV1ControllerArtistUpdateMeProfile(artistUpdateProfileDto: ArtistUpdateProfileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistMeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistsProfileV1ControllerArtistUpdateMeProfile(artistUpdateProfileDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete artist service
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistsProfileV1ControllerDeleteArtistService(serviceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistsProfileV1ControllerDeleteArtistService(serviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary set artist service
         * @param {ArtistAddServiceParamsDTO} artistAddServiceParamsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistsProfileV1ControllerSetService(artistAddServiceParamsDTO: ArtistAddServiceParamsDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistMeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistsProfileV1ControllerSetService(artistAddServiceParamsDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1ArtistProfileApi - factory interface
 * @export
 */
export const V1ArtistProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ArtistProfileApiFp(configuration)
    return {
        /**
         * 
         * @summary create artist profile
         * @param {ArtistCompleteRegistrationDto} artistCompleteRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerArtistCreateMeProfile(artistCompleteRegistrationDto: ArtistCompleteRegistrationDto, options?: any): AxiosPromise<CredentialsResponseDto> {
            return localVarFp.artistsProfileV1ControllerArtistCreateMeProfile(artistCompleteRegistrationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get authorized artist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerArtistGetMeProfile(options?: any): AxiosPromise<ArtistMeResponseDto> {
            return localVarFp.artistsProfileV1ControllerArtistGetMeProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get my published videos
         * @param {ArtistGetPublishedVideosRequestDTO} artistGetPublishedVideosRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerArtistGetMePublishedVideos(artistGetPublishedVideosRequestDTO: ArtistGetPublishedVideosRequestDTO, options?: any): AxiosPromise<ClientGetArtistsPublishedVideosResponseDTO> {
            return localVarFp.artistsProfileV1ControllerArtistGetMePublishedVideos(artistGetPublishedVideosRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update artist profile
         * @param {ArtistUpdateProfileDto} artistUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerArtistUpdateMeProfile(artistUpdateProfileDto: ArtistUpdateProfileDto, options?: any): AxiosPromise<ArtistMeResponseDto> {
            return localVarFp.artistsProfileV1ControllerArtistUpdateMeProfile(artistUpdateProfileDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete artist service
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerDeleteArtistService(serviceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.artistsProfileV1ControllerDeleteArtistService(serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary set artist service
         * @param {ArtistAddServiceParamsDTO} artistAddServiceParamsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsProfileV1ControllerSetService(artistAddServiceParamsDTO: ArtistAddServiceParamsDTO, options?: any): AxiosPromise<ArtistMeResponseDto> {
            return localVarFp.artistsProfileV1ControllerSetService(artistAddServiceParamsDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1ArtistProfileApi - object-oriented interface
 * @export
 * @class V1ArtistProfileApi
 * @extends {BaseAPI}
 */
export class V1ArtistProfileApi extends BaseAPI {
    /**
     * 
     * @summary create artist profile
     * @param {ArtistCompleteRegistrationDto} artistCompleteRegistrationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistProfileApi
     */
    public artistsProfileV1ControllerArtistCreateMeProfile(artistCompleteRegistrationDto: ArtistCompleteRegistrationDto, options?: AxiosRequestConfig) {
        return V1ArtistProfileApiFp(this.configuration).artistsProfileV1ControllerArtistCreateMeProfile(artistCompleteRegistrationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get authorized artist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistProfileApi
     */
    public artistsProfileV1ControllerArtistGetMeProfile(options?: AxiosRequestConfig) {
        return V1ArtistProfileApiFp(this.configuration).artistsProfileV1ControllerArtistGetMeProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get my published videos
     * @param {ArtistGetPublishedVideosRequestDTO} artistGetPublishedVideosRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistProfileApi
     */
    public artistsProfileV1ControllerArtistGetMePublishedVideos(artistGetPublishedVideosRequestDTO: ArtistGetPublishedVideosRequestDTO, options?: AxiosRequestConfig) {
        return V1ArtistProfileApiFp(this.configuration).artistsProfileV1ControllerArtistGetMePublishedVideos(artistGetPublishedVideosRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update artist profile
     * @param {ArtistUpdateProfileDto} artistUpdateProfileDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistProfileApi
     */
    public artistsProfileV1ControllerArtistUpdateMeProfile(artistUpdateProfileDto: ArtistUpdateProfileDto, options?: AxiosRequestConfig) {
        return V1ArtistProfileApiFp(this.configuration).artistsProfileV1ControllerArtistUpdateMeProfile(artistUpdateProfileDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete artist service
     * @param {string} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistProfileApi
     */
    public artistsProfileV1ControllerDeleteArtistService(serviceId: string, options?: AxiosRequestConfig) {
        return V1ArtistProfileApiFp(this.configuration).artistsProfileV1ControllerDeleteArtistService(serviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary set artist service
     * @param {ArtistAddServiceParamsDTO} artistAddServiceParamsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistProfileApi
     */
    public artistsProfileV1ControllerSetService(artistAddServiceParamsDTO: ArtistAddServiceParamsDTO, options?: AxiosRequestConfig) {
        return V1ArtistProfileApiFp(this.configuration).artistsProfileV1ControllerSetService(artistAddServiceParamsDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1ArtistsCommentsApi - axios parameter creator
 * @export
 */
export const V1ArtistsCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary remove order comment
         * @param {string} orderCommentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistCommentsV1ControllerArtistDeleteOrderComment: async (orderCommentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderCommentId' is not null or undefined
            assertParamExists('artistCommentsV1ControllerArtistDeleteOrderComment', 'orderCommentId', orderCommentId)
            const localVarPath = `/v1/artists/comments/{orderCommentId}`
                .replace(`{${"orderCommentId"}}`, encodeURIComponent(String(orderCommentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get order comment
         * @param {string} orderCommentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistCommentsV1ControllerArtistGetOrderComment: async (orderCommentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderCommentId' is not null or undefined
            assertParamExists('artistCommentsV1ControllerArtistGetOrderComment', 'orderCommentId', orderCommentId)
            const localVarPath = `/v1/artists/comments/{orderCommentId}`
                .replace(`{${"orderCommentId"}}`, encodeURIComponent(String(orderCommentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get orders comments
         * @param {ArtistGetCommentsRequestDTO} artistGetCommentsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistCommentsV1ControllerArtistGetOrdersComments: async (artistGetCommentsRequestDTO: ArtistGetCommentsRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistGetCommentsRequestDTO' is not null or undefined
            assertParamExists('artistCommentsV1ControllerArtistGetOrdersComments', 'artistGetCommentsRequestDTO', artistGetCommentsRequestDTO)
            const localVarPath = `/v1/artists/comments/get-comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(artistGetCommentsRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1ArtistsCommentsApi - functional programming interface
 * @export
 */
export const V1ArtistsCommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ArtistsCommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary remove order comment
         * @param {string} orderCommentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistCommentsV1ControllerArtistDeleteOrderComment(orderCommentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistCommentsV1ControllerArtistDeleteOrderComment(orderCommentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get order comment
         * @param {string} orderCommentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistCommentsV1ControllerArtistGetOrderComment(orderCommentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistOrderCommentResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistCommentsV1ControllerArtistGetOrderComment(orderCommentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get orders comments
         * @param {ArtistGetCommentsRequestDTO} artistGetCommentsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistCommentsV1ControllerArtistGetOrdersComments(artistGetCommentsRequestDTO: ArtistGetCommentsRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistGetOrdersCommentsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistCommentsV1ControllerArtistGetOrdersComments(artistGetCommentsRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1ArtistsCommentsApi - factory interface
 * @export
 */
export const V1ArtistsCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ArtistsCommentsApiFp(configuration)
    return {
        /**
         * 
         * @summary remove order comment
         * @param {string} orderCommentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistCommentsV1ControllerArtistDeleteOrderComment(orderCommentId: string, options?: any): AxiosPromise<SuccessResponseDto> {
            return localVarFp.artistCommentsV1ControllerArtistDeleteOrderComment(orderCommentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get order comment
         * @param {string} orderCommentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistCommentsV1ControllerArtistGetOrderComment(orderCommentId: string, options?: any): AxiosPromise<ArtistOrderCommentResponseDto> {
            return localVarFp.artistCommentsV1ControllerArtistGetOrderComment(orderCommentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get orders comments
         * @param {ArtistGetCommentsRequestDTO} artistGetCommentsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistCommentsV1ControllerArtistGetOrdersComments(artistGetCommentsRequestDTO: ArtistGetCommentsRequestDTO, options?: any): AxiosPromise<ArtistGetOrdersCommentsResponseDTO> {
            return localVarFp.artistCommentsV1ControllerArtistGetOrdersComments(artistGetCommentsRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1ArtistsCommentsApi - object-oriented interface
 * @export
 * @class V1ArtistsCommentsApi
 * @extends {BaseAPI}
 */
export class V1ArtistsCommentsApi extends BaseAPI {
    /**
     * 
     * @summary remove order comment
     * @param {string} orderCommentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistsCommentsApi
     */
    public artistCommentsV1ControllerArtistDeleteOrderComment(orderCommentId: string, options?: AxiosRequestConfig) {
        return V1ArtistsCommentsApiFp(this.configuration).artistCommentsV1ControllerArtistDeleteOrderComment(orderCommentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get order comment
     * @param {string} orderCommentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistsCommentsApi
     */
    public artistCommentsV1ControllerArtistGetOrderComment(orderCommentId: string, options?: AxiosRequestConfig) {
        return V1ArtistsCommentsApiFp(this.configuration).artistCommentsV1ControllerArtistGetOrderComment(orderCommentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get orders comments
     * @param {ArtistGetCommentsRequestDTO} artistGetCommentsRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistsCommentsApi
     */
    public artistCommentsV1ControllerArtistGetOrdersComments(artistGetCommentsRequestDTO: ArtistGetCommentsRequestDTO, options?: AxiosRequestConfig) {
        return V1ArtistsCommentsApiFp(this.configuration).artistCommentsV1ControllerArtistGetOrdersComments(artistGetCommentsRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1ArtistsOrdersApi - axios parameter creator
 * @export
 */
export const V1ArtistsOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary artist add video from order to publishes
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistAddOrderToPublishes: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('artistOrdersV1ControllerArtistAddOrderToPublishes', 'orderId', orderId)
            const localVarPath = `/v1/artists/orders/{orderId}/add-to-publishes`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Artist cancel order
         * @param {string} orderId 
         * @param {ArtistCancelOrderDto} artistCancelOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistCancelOrder: async (orderId: string, artistCancelOrderDto: ArtistCancelOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('artistOrdersV1ControllerArtistCancelOrder', 'orderId', orderId)
            // verify required parameter 'artistCancelOrderDto' is not null or undefined
            assertParamExists('artistOrdersV1ControllerArtistCancelOrder', 'artistCancelOrderDto', artistCancelOrderDto)
            const localVarPath = `/v1/artists/orders/{orderId}/cancel`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(artistCancelOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Artist confirm order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistConfirmOrder: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('artistOrdersV1ControllerArtistConfirmOrder', 'orderId', orderId)
            const localVarPath = `/v1/artists/orders/{orderId}/confirm`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary artist create order execution
         * @param {string} orderId 
         * @param {ArtistCreateOrderExecutionDto} artistCreateOrderExecutionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistCreateOrderExecution: async (orderId: string, artistCreateOrderExecutionDto: ArtistCreateOrderExecutionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('artistOrdersV1ControllerArtistCreateOrderExecution', 'orderId', orderId)
            // verify required parameter 'artistCreateOrderExecutionDto' is not null or undefined
            assertParamExists('artistOrdersV1ControllerArtistCreateOrderExecution', 'artistCreateOrderExecutionDto', artistCreateOrderExecutionDto)
            const localVarPath = `/v1/artists/orders/{orderId}/orderExecutions`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(artistCreateOrderExecutionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Artist get order by id
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistGetOrder: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('artistOrdersV1ControllerArtistGetOrder', 'orderId', orderId)
            const localVarPath = `/v1/artists/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get paginated orders
         * @param {ArtistFindOrdersRequestDTO} artistFindOrdersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistGetOrders: async (artistFindOrdersRequestDTO: ArtistFindOrdersRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistFindOrdersRequestDTO' is not null or undefined
            assertParamExists('artistOrdersV1ControllerArtistGetOrders', 'artistFindOrdersRequestDTO', artistFindOrdersRequestDTO)
            const localVarPath = `/v1/artists/orders/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(artistFindOrdersRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Artist reject order
         * @param {string} orderId 
         * @param {ArtistRejectOrderDto} artistRejectOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistRejectOrder: async (orderId: string, artistRejectOrderDto: ArtistRejectOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('artistOrdersV1ControllerArtistRejectOrder', 'orderId', orderId)
            // verify required parameter 'artistRejectOrderDto' is not null or undefined
            assertParamExists('artistOrdersV1ControllerArtistRejectOrder', 'artistRejectOrderDto', artistRejectOrderDto)
            const localVarPath = `/v1/artists/orders/{orderId}/reject`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(artistRejectOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove video from publishes
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistRemoveOrderFromPublishes: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('artistOrdersV1ControllerArtistRemoveOrderFromPublishes', 'orderId', orderId)
            const localVarPath = `/v1/artists/orders/{orderId}/remove-from-publishes`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_artist required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1ArtistsOrdersApi - functional programming interface
 * @export
 */
export const V1ArtistsOrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ArtistsOrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary artist add video from order to publishes
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistOrdersV1ControllerArtistAddOrderToPublishes(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistOrdersV1ControllerArtistAddOrderToPublishes(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Artist cancel order
         * @param {string} orderId 
         * @param {ArtistCancelOrderDto} artistCancelOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistOrdersV1ControllerArtistCancelOrder(orderId: string, artistCancelOrderDto: ArtistCancelOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistOrdersV1ControllerArtistCancelOrder(orderId, artistCancelOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Artist confirm order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistOrdersV1ControllerArtistConfirmOrder(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistOrdersV1ControllerArtistConfirmOrder(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary artist create order execution
         * @param {string} orderId 
         * @param {ArtistCreateOrderExecutionDto} artistCreateOrderExecutionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistOrdersV1ControllerArtistCreateOrderExecution(orderId: string, artistCreateOrderExecutionDto: ArtistCreateOrderExecutionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistOrderExecutionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistOrdersV1ControllerArtistCreateOrderExecution(orderId, artistCreateOrderExecutionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Artist get order by id
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistOrdersV1ControllerArtistGetOrder(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistOrdersV1ControllerArtistGetOrder(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get paginated orders
         * @param {ArtistFindOrdersRequestDTO} artistFindOrdersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistOrdersV1ControllerArtistGetOrders(artistFindOrdersRequestDTO: ArtistFindOrdersRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistFindOrdersResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistOrdersV1ControllerArtistGetOrders(artistFindOrdersRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Artist reject order
         * @param {string} orderId 
         * @param {ArtistRejectOrderDto} artistRejectOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistOrdersV1ControllerArtistRejectOrder(orderId: string, artistRejectOrderDto: ArtistRejectOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistOrdersV1ControllerArtistRejectOrder(orderId, artistRejectOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary remove video from publishes
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistOrdersV1ControllerArtistRemoveOrderFromPublishes(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistOrdersV1ControllerArtistRemoveOrderFromPublishes(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1ArtistsOrdersApi - factory interface
 * @export
 */
export const V1ArtistsOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ArtistsOrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary artist add video from order to publishes
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistAddOrderToPublishes(orderId: string, options?: any): AxiosPromise<SuccessResponseDto> {
            return localVarFp.artistOrdersV1ControllerArtistAddOrderToPublishes(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Artist cancel order
         * @param {string} orderId 
         * @param {ArtistCancelOrderDto} artistCancelOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistCancelOrder(orderId: string, artistCancelOrderDto: ArtistCancelOrderDto, options?: any): AxiosPromise<ArtistOrderResponseDto> {
            return localVarFp.artistOrdersV1ControllerArtistCancelOrder(orderId, artistCancelOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Artist confirm order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistConfirmOrder(orderId: string, options?: any): AxiosPromise<ArtistOrderResponseDto> {
            return localVarFp.artistOrdersV1ControllerArtistConfirmOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary artist create order execution
         * @param {string} orderId 
         * @param {ArtistCreateOrderExecutionDto} artistCreateOrderExecutionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistCreateOrderExecution(orderId: string, artistCreateOrderExecutionDto: ArtistCreateOrderExecutionDto, options?: any): AxiosPromise<ArtistOrderExecutionResponseDto> {
            return localVarFp.artistOrdersV1ControllerArtistCreateOrderExecution(orderId, artistCreateOrderExecutionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Artist get order by id
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistGetOrder(orderId: string, options?: any): AxiosPromise<ArtistOrderResponseDto> {
            return localVarFp.artistOrdersV1ControllerArtistGetOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get paginated orders
         * @param {ArtistFindOrdersRequestDTO} artistFindOrdersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistGetOrders(artistFindOrdersRequestDTO: ArtistFindOrdersRequestDTO, options?: any): AxiosPromise<ArtistFindOrdersResponseDTO> {
            return localVarFp.artistOrdersV1ControllerArtistGetOrders(artistFindOrdersRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Artist reject order
         * @param {string} orderId 
         * @param {ArtistRejectOrderDto} artistRejectOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistRejectOrder(orderId: string, artistRejectOrderDto: ArtistRejectOrderDto, options?: any): AxiosPromise<ArtistOrderResponseDto> {
            return localVarFp.artistOrdersV1ControllerArtistRejectOrder(orderId, artistRejectOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary remove video from publishes
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistOrdersV1ControllerArtistRemoveOrderFromPublishes(orderId: string, options?: any): AxiosPromise<SuccessResponseDto> {
            return localVarFp.artistOrdersV1ControllerArtistRemoveOrderFromPublishes(orderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1ArtistsOrdersApi - object-oriented interface
 * @export
 * @class V1ArtistsOrdersApi
 * @extends {BaseAPI}
 */
export class V1ArtistsOrdersApi extends BaseAPI {
    /**
     * 
     * @summary artist add video from order to publishes
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistsOrdersApi
     */
    public artistOrdersV1ControllerArtistAddOrderToPublishes(orderId: string, options?: AxiosRequestConfig) {
        return V1ArtistsOrdersApiFp(this.configuration).artistOrdersV1ControllerArtistAddOrderToPublishes(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Artist cancel order
     * @param {string} orderId 
     * @param {ArtistCancelOrderDto} artistCancelOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistsOrdersApi
     */
    public artistOrdersV1ControllerArtistCancelOrder(orderId: string, artistCancelOrderDto: ArtistCancelOrderDto, options?: AxiosRequestConfig) {
        return V1ArtistsOrdersApiFp(this.configuration).artistOrdersV1ControllerArtistCancelOrder(orderId, artistCancelOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Artist confirm order
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistsOrdersApi
     */
    public artistOrdersV1ControllerArtistConfirmOrder(orderId: string, options?: AxiosRequestConfig) {
        return V1ArtistsOrdersApiFp(this.configuration).artistOrdersV1ControllerArtistConfirmOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary artist create order execution
     * @param {string} orderId 
     * @param {ArtistCreateOrderExecutionDto} artistCreateOrderExecutionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistsOrdersApi
     */
    public artistOrdersV1ControllerArtistCreateOrderExecution(orderId: string, artistCreateOrderExecutionDto: ArtistCreateOrderExecutionDto, options?: AxiosRequestConfig) {
        return V1ArtistsOrdersApiFp(this.configuration).artistOrdersV1ControllerArtistCreateOrderExecution(orderId, artistCreateOrderExecutionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Artist get order by id
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistsOrdersApi
     */
    public artistOrdersV1ControllerArtistGetOrder(orderId: string, options?: AxiosRequestConfig) {
        return V1ArtistsOrdersApiFp(this.configuration).artistOrdersV1ControllerArtistGetOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get paginated orders
     * @param {ArtistFindOrdersRequestDTO} artistFindOrdersRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistsOrdersApi
     */
    public artistOrdersV1ControllerArtistGetOrders(artistFindOrdersRequestDTO: ArtistFindOrdersRequestDTO, options?: AxiosRequestConfig) {
        return V1ArtistsOrdersApiFp(this.configuration).artistOrdersV1ControllerArtistGetOrders(artistFindOrdersRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Artist reject order
     * @param {string} orderId 
     * @param {ArtistRejectOrderDto} artistRejectOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistsOrdersApi
     */
    public artistOrdersV1ControllerArtistRejectOrder(orderId: string, artistRejectOrderDto: ArtistRejectOrderDto, options?: AxiosRequestConfig) {
        return V1ArtistsOrdersApiFp(this.configuration).artistOrdersV1ControllerArtistRejectOrder(orderId, artistRejectOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary remove video from publishes
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ArtistsOrdersApi
     */
    public artistOrdersV1ControllerArtistRemoveOrderFromPublishes(orderId: string, options?: AxiosRequestConfig) {
        return V1ArtistsOrdersApiFp(this.configuration).artistOrdersV1ControllerArtistRemoveOrderFromPublishes(orderId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1ClientAuthApi - axios parameter creator
 * @export
 */
export const V1ClientAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary send request to change email
         * @param {ClientVerifyRequestToChangeEmailDto} clientVerifyRequestToChangeEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientChangeEmail: async (clientVerifyRequestToChangeEmailDto: ClientVerifyRequestToChangeEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientVerifyRequestToChangeEmailDto' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientChangeEmail', 'clientVerifyRequestToChangeEmailDto', clientVerifyRequestToChangeEmailDto)
            const localVarPath = `/v1/clients/auth/email/change/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientVerifyRequestToChangeEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary send request to change phone-number
         * @param {ClientCreateRequestToChangeChangePhoneDto} clientCreateRequestToChangeChangePhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientChangePhone: async (clientCreateRequestToChangeChangePhoneDto: ClientCreateRequestToChangeChangePhoneDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientCreateRequestToChangeChangePhoneDto' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientChangePhone', 'clientCreateRequestToChangeChangePhoneDto', clientCreateRequestToChangeChangePhoneDto)
            const localVarPath = `/v1/clients/auth/phone-number/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientCreateRequestToChangeChangePhoneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary client delete account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientDeleteAccount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/clients/auth/delete-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientVerifyRequestEmailSignUpDto} clientVerifyRequestEmailSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientEmailSignUp: async (clientVerifyRequestEmailSignUpDto: ClientVerifyRequestEmailSignUpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientVerifyRequestEmailSignUpDto' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientEmailSignUp', 'clientVerifyRequestEmailSignUpDto', clientVerifyRequestEmailSignUpDto)
            const localVarPath = `/v1/clients/auth/email/sign-up/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientVerifyRequestEmailSignUpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientCreateRequestEmailSignUpDto} clientCreateRequestEmailSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientEmailSignUpRequest: async (clientCreateRequestEmailSignUpDto: ClientCreateRequestEmailSignUpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientCreateRequestEmailSignUpDto' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientEmailSignUpRequest', 'clientCreateRequestEmailSignUpDto', clientCreateRequestEmailSignUpDto)
            const localVarPath = `/v1/clients/auth/email/sign-up/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientCreateRequestEmailSignUpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get authorized client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientGetMeProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/clients/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientsPhoneNumberVerifyRequestDTO} clientsPhoneNumberVerifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientPhoneNumberSignUp: async (clientsPhoneNumberVerifyRequestDTO: ClientsPhoneNumberVerifyRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientsPhoneNumberVerifyRequestDTO' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientPhoneNumberSignUp', 'clientsPhoneNumberVerifyRequestDTO', clientsPhoneNumberVerifyRequestDTO)
            const localVarPath = `/v1/clients/auth/phone-number/sign-up/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientsPhoneNumberVerifyRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientCreateRequestPhoneNumberSignUpDto} clientCreateRequestPhoneNumberSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientPhoneNumberSignUpRequest: async (clientCreateRequestPhoneNumberSignUpDto: ClientCreateRequestPhoneNumberSignUpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientCreateRequestPhoneNumberSignUpDto' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientPhoneNumberSignUpRequest', 'clientCreateRequestPhoneNumberSignUpDto', clientCreateRequestPhoneNumberSignUpDto)
            const localVarPath = `/v1/clients/auth/phone-number/sign-up/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientCreateRequestPhoneNumberSignUpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary recover client\'s password
         * @param {ClientRecoverPasswordDto} clientRecoverPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientRecoverPassword: async (clientRecoverPasswordDto: ClientRecoverPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientRecoverPasswordDto' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientRecoverPassword', 'clientRecoverPasswordDto', clientRecoverPasswordDto)
            const localVarPath = `/v1/clients/auth/recover-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientRecoverPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary send request to change email
         * @param {ClientCreateRequestToChangeEmailDto} clientCreateRequestToChangeEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientRequestChangeEmail: async (clientCreateRequestToChangeEmailDto: ClientCreateRequestToChangeEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientCreateRequestToChangeEmailDto' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientRequestChangeEmail', 'clientCreateRequestToChangeEmailDto', clientCreateRequestToChangeEmailDto)
            const localVarPath = `/v1/clients/auth/email/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientCreateRequestToChangeEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary reset client\'s password
         * @param {ClientResetPasswordDto} clientResetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientResetPassword: async (clientResetPasswordDto: ClientResetPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientResetPasswordDto' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientResetPassword', 'clientResetPasswordDto', clientResetPasswordDto)
            const localVarPath = `/v1/clients/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientResetPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary client sign-in by email
         * @param {ClientSignInByEmailDto} clientSignInByEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientSignInByEmail: async (clientSignInByEmailDto: ClientSignInByEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientSignInByEmailDto' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientSignInByEmail', 'clientSignInByEmailDto', clientSignInByEmailDto)
            const localVarPath = `/v1/clients/auth/email/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientSignInByEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary client sign-in by phone number
         * @param {ClientSignInByPhoneDto} clientSignInByPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientSignInByPhoneNumber: async (clientSignInByPhoneDto: ClientSignInByPhoneDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientSignInByPhoneDto' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientSignInByPhoneNumber', 'clientSignInByPhoneDto', clientSignInByPhoneDto)
            const localVarPath = `/v1/clients/auth/phone-number/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientSignInByPhoneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary verify code to change phone number
         * @param {ClientsPhoneNumberVerifyRequestDTO} clientsPhoneNumberVerifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientVerifyChangePhoneNumber: async (clientsPhoneNumberVerifyRequestDTO: ClientsPhoneNumberVerifyRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientsPhoneNumberVerifyRequestDTO' is not null or undefined
            assertParamExists('clientsAuthV1ControllerClientVerifyChangePhoneNumber', 'clientsPhoneNumberVerifyRequestDTO', clientsPhoneNumberVerifyRequestDTO)
            const localVarPath = `/v1/clients/auth/phone-number/change/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientsPhoneNumberVerifyRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update client password
         * @param {ClientUpdatePasswordDto} clientUpdatePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerUpdateCustomerPassword: async (clientUpdatePasswordDto: ClientUpdatePasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientUpdatePasswordDto' is not null or undefined
            assertParamExists('clientsAuthV1ControllerUpdateCustomerPassword', 'clientUpdatePasswordDto', clientUpdatePasswordDto)
            const localVarPath = `/v1/clients/auth/update-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientUpdatePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1ClientAuthApi - functional programming interface
 * @export
 */
export const V1ClientAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ClientAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary send request to change email
         * @param {ClientVerifyRequestToChangeEmailDto} clientVerifyRequestToChangeEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientChangeEmail(clientVerifyRequestToChangeEmailDto: ClientVerifyRequestToChangeEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientChangeEmailVerifyResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientChangeEmail(clientVerifyRequestToChangeEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary send request to change phone-number
         * @param {ClientCreateRequestToChangeChangePhoneDto} clientCreateRequestToChangeChangePhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientChangePhone(clientCreateRequestToChangeChangePhoneDto: ClientCreateRequestToChangeChangePhoneDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientCreateRequestToChangePhoneNumberResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientChangePhone(clientCreateRequestToChangeChangePhoneDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary client delete account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientDeleteAccount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientDeleteAccount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientVerifyRequestEmailSignUpDto} clientVerifyRequestEmailSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientEmailSignUp(clientVerifyRequestEmailSignUpDto: ClientVerifyRequestEmailSignUpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsBaseResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientEmailSignUp(clientVerifyRequestEmailSignUpDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientCreateRequestEmailSignUpDto} clientCreateRequestEmailSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientEmailSignUpRequest(clientCreateRequestEmailSignUpDto: ClientCreateRequestEmailSignUpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientCreateRequestEmailSignUpResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientEmailSignUpRequest(clientCreateRequestEmailSignUpDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get authorized client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientGetMeProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientGetMeProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientsPhoneNumberVerifyRequestDTO} clientsPhoneNumberVerifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientPhoneNumberSignUp(clientsPhoneNumberVerifyRequestDTO: ClientsPhoneNumberVerifyRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsBaseResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientPhoneNumberSignUp(clientsPhoneNumberVerifyRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientCreateRequestPhoneNumberSignUpDto} clientCreateRequestPhoneNumberSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientPhoneNumberSignUpRequest(clientCreateRequestPhoneNumberSignUpDto: ClientCreateRequestPhoneNumberSignUpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientCreateRequestPhoneNumberSignUpResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientPhoneNumberSignUpRequest(clientCreateRequestPhoneNumberSignUpDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary recover client\'s password
         * @param {ClientRecoverPasswordDto} clientRecoverPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientRecoverPassword(clientRecoverPasswordDto: ClientRecoverPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientRecoverPasswordResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientRecoverPassword(clientRecoverPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary send request to change email
         * @param {ClientCreateRequestToChangeEmailDto} clientCreateRequestToChangeEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientRequestChangeEmail(clientCreateRequestToChangeEmailDto: ClientCreateRequestToChangeEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientCreateRequestEmailSignUpResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientRequestChangeEmail(clientCreateRequestToChangeEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary reset client\'s password
         * @param {ClientResetPasswordDto} clientResetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientResetPassword(clientResetPasswordDto: ClientResetPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientResetPassword(clientResetPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary client sign-in by email
         * @param {ClientSignInByEmailDto} clientSignInByEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientSignInByEmail(clientSignInByEmailDto: ClientSignInByEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientSignInByEmail(clientSignInByEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary client sign-in by phone number
         * @param {ClientSignInByPhoneDto} clientSignInByPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientSignInByPhoneNumber(clientSignInByPhoneDto: ClientSignInByPhoneDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientSignInByPhoneNumber(clientSignInByPhoneDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary verify code to change phone number
         * @param {ClientsPhoneNumberVerifyRequestDTO} clientsPhoneNumberVerifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerClientVerifyChangePhoneNumber(clientsPhoneNumberVerifyRequestDTO: ClientsPhoneNumberVerifyRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientChangePhoneNumberVerifyResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerClientVerifyChangePhoneNumber(clientsPhoneNumberVerifyRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update client password
         * @param {ClientUpdatePasswordDto} clientUpdatePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsAuthV1ControllerUpdateCustomerPassword(clientUpdatePasswordDto: ClientUpdatePasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsAuthV1ControllerUpdateCustomerPassword(clientUpdatePasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1ClientAuthApi - factory interface
 * @export
 */
export const V1ClientAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ClientAuthApiFp(configuration)
    return {
        /**
         * 
         * @summary send request to change email
         * @param {ClientVerifyRequestToChangeEmailDto} clientVerifyRequestToChangeEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientChangeEmail(clientVerifyRequestToChangeEmailDto: ClientVerifyRequestToChangeEmailDto, options?: any): AxiosPromise<ClientChangeEmailVerifyResponseDTO> {
            return localVarFp.clientsAuthV1ControllerClientChangeEmail(clientVerifyRequestToChangeEmailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary send request to change phone-number
         * @param {ClientCreateRequestToChangeChangePhoneDto} clientCreateRequestToChangeChangePhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientChangePhone(clientCreateRequestToChangeChangePhoneDto: ClientCreateRequestToChangeChangePhoneDto, options?: any): AxiosPromise<ClientCreateRequestToChangePhoneNumberResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientChangePhone(clientCreateRequestToChangeChangePhoneDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary client delete account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientDeleteAccount(options?: any): AxiosPromise<SuccessResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientDeleteAccount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientVerifyRequestEmailSignUpDto} clientVerifyRequestEmailSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientEmailSignUp(clientVerifyRequestEmailSignUpDto: ClientVerifyRequestEmailSignUpDto, options?: any): AxiosPromise<CredentialsBaseResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientEmailSignUp(clientVerifyRequestEmailSignUpDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientCreateRequestEmailSignUpDto} clientCreateRequestEmailSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientEmailSignUpRequest(clientCreateRequestEmailSignUpDto: ClientCreateRequestEmailSignUpDto, options?: any): AxiosPromise<ClientCreateRequestEmailSignUpResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientEmailSignUpRequest(clientCreateRequestEmailSignUpDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get authorized client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientGetMeProfile(options?: any): AxiosPromise<ClientResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientGetMeProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientsPhoneNumberVerifyRequestDTO} clientsPhoneNumberVerifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientPhoneNumberSignUp(clientsPhoneNumberVerifyRequestDTO: ClientsPhoneNumberVerifyRequestDTO, options?: any): AxiosPromise<CredentialsBaseResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientPhoneNumberSignUp(clientsPhoneNumberVerifyRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary client sign-up
         * @param {ClientCreateRequestPhoneNumberSignUpDto} clientCreateRequestPhoneNumberSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientPhoneNumberSignUpRequest(clientCreateRequestPhoneNumberSignUpDto: ClientCreateRequestPhoneNumberSignUpDto, options?: any): AxiosPromise<ClientCreateRequestPhoneNumberSignUpResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientPhoneNumberSignUpRequest(clientCreateRequestPhoneNumberSignUpDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary recover client\'s password
         * @param {ClientRecoverPasswordDto} clientRecoverPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientRecoverPassword(clientRecoverPasswordDto: ClientRecoverPasswordDto, options?: any): AxiosPromise<ClientRecoverPasswordResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientRecoverPassword(clientRecoverPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary send request to change email
         * @param {ClientCreateRequestToChangeEmailDto} clientCreateRequestToChangeEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientRequestChangeEmail(clientCreateRequestToChangeEmailDto: ClientCreateRequestToChangeEmailDto, options?: any): AxiosPromise<ClientCreateRequestEmailSignUpResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientRequestChangeEmail(clientCreateRequestToChangeEmailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary reset client\'s password
         * @param {ClientResetPasswordDto} clientResetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientResetPassword(clientResetPasswordDto: ClientResetPasswordDto, options?: any): AxiosPromise<CredentialsResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientResetPassword(clientResetPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary client sign-in by email
         * @param {ClientSignInByEmailDto} clientSignInByEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientSignInByEmail(clientSignInByEmailDto: ClientSignInByEmailDto, options?: any): AxiosPromise<CredentialsResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientSignInByEmail(clientSignInByEmailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary client sign-in by phone number
         * @param {ClientSignInByPhoneDto} clientSignInByPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientSignInByPhoneNumber(clientSignInByPhoneDto: ClientSignInByPhoneDto, options?: any): AxiosPromise<CredentialsResponseDto> {
            return localVarFp.clientsAuthV1ControllerClientSignInByPhoneNumber(clientSignInByPhoneDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary verify code to change phone number
         * @param {ClientsPhoneNumberVerifyRequestDTO} clientsPhoneNumberVerifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerClientVerifyChangePhoneNumber(clientsPhoneNumberVerifyRequestDTO: ClientsPhoneNumberVerifyRequestDTO, options?: any): AxiosPromise<ClientChangePhoneNumberVerifyResponseDTO> {
            return localVarFp.clientsAuthV1ControllerClientVerifyChangePhoneNumber(clientsPhoneNumberVerifyRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update client password
         * @param {ClientUpdatePasswordDto} clientUpdatePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsAuthV1ControllerUpdateCustomerPassword(clientUpdatePasswordDto: ClientUpdatePasswordDto, options?: any): AxiosPromise<SuccessResponseDto> {
            return localVarFp.clientsAuthV1ControllerUpdateCustomerPassword(clientUpdatePasswordDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1ClientAuthApi - object-oriented interface
 * @export
 * @class V1ClientAuthApi
 * @extends {BaseAPI}
 */
export class V1ClientAuthApi extends BaseAPI {
    /**
     * 
     * @summary send request to change email
     * @param {ClientVerifyRequestToChangeEmailDto} clientVerifyRequestToChangeEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientChangeEmail(clientVerifyRequestToChangeEmailDto: ClientVerifyRequestToChangeEmailDto, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientChangeEmail(clientVerifyRequestToChangeEmailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary send request to change phone-number
     * @param {ClientCreateRequestToChangeChangePhoneDto} clientCreateRequestToChangeChangePhoneDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientChangePhone(clientCreateRequestToChangeChangePhoneDto: ClientCreateRequestToChangeChangePhoneDto, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientChangePhone(clientCreateRequestToChangeChangePhoneDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary client delete account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientDeleteAccount(options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientDeleteAccount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary client sign-up
     * @param {ClientVerifyRequestEmailSignUpDto} clientVerifyRequestEmailSignUpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientEmailSignUp(clientVerifyRequestEmailSignUpDto: ClientVerifyRequestEmailSignUpDto, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientEmailSignUp(clientVerifyRequestEmailSignUpDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary client sign-up
     * @param {ClientCreateRequestEmailSignUpDto} clientCreateRequestEmailSignUpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientEmailSignUpRequest(clientCreateRequestEmailSignUpDto: ClientCreateRequestEmailSignUpDto, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientEmailSignUpRequest(clientCreateRequestEmailSignUpDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get authorized client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientGetMeProfile(options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientGetMeProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary client sign-up
     * @param {ClientsPhoneNumberVerifyRequestDTO} clientsPhoneNumberVerifyRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientPhoneNumberSignUp(clientsPhoneNumberVerifyRequestDTO: ClientsPhoneNumberVerifyRequestDTO, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientPhoneNumberSignUp(clientsPhoneNumberVerifyRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary client sign-up
     * @param {ClientCreateRequestPhoneNumberSignUpDto} clientCreateRequestPhoneNumberSignUpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientPhoneNumberSignUpRequest(clientCreateRequestPhoneNumberSignUpDto: ClientCreateRequestPhoneNumberSignUpDto, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientPhoneNumberSignUpRequest(clientCreateRequestPhoneNumberSignUpDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary recover client\'s password
     * @param {ClientRecoverPasswordDto} clientRecoverPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientRecoverPassword(clientRecoverPasswordDto: ClientRecoverPasswordDto, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientRecoverPassword(clientRecoverPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary send request to change email
     * @param {ClientCreateRequestToChangeEmailDto} clientCreateRequestToChangeEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientRequestChangeEmail(clientCreateRequestToChangeEmailDto: ClientCreateRequestToChangeEmailDto, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientRequestChangeEmail(clientCreateRequestToChangeEmailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary reset client\'s password
     * @param {ClientResetPasswordDto} clientResetPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientResetPassword(clientResetPasswordDto: ClientResetPasswordDto, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientResetPassword(clientResetPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary client sign-in by email
     * @param {ClientSignInByEmailDto} clientSignInByEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientSignInByEmail(clientSignInByEmailDto: ClientSignInByEmailDto, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientSignInByEmail(clientSignInByEmailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary client sign-in by phone number
     * @param {ClientSignInByPhoneDto} clientSignInByPhoneDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientSignInByPhoneNumber(clientSignInByPhoneDto: ClientSignInByPhoneDto, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientSignInByPhoneNumber(clientSignInByPhoneDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary verify code to change phone number
     * @param {ClientsPhoneNumberVerifyRequestDTO} clientsPhoneNumberVerifyRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerClientVerifyChangePhoneNumber(clientsPhoneNumberVerifyRequestDTO: ClientsPhoneNumberVerifyRequestDTO, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerClientVerifyChangePhoneNumber(clientsPhoneNumberVerifyRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update client password
     * @param {ClientUpdatePasswordDto} clientUpdatePasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientAuthApi
     */
    public clientsAuthV1ControllerUpdateCustomerPassword(clientUpdatePasswordDto: ClientUpdatePasswordDto, options?: AxiosRequestConfig) {
        return V1ClientAuthApiFp(this.configuration).clientsAuthV1ControllerUpdateCustomerPassword(clientUpdatePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1ClientBucketApi - axios parameter creator
 * @export
 */
export const V1ClientBucketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary client asset status
         * @param {string} assetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsBucketV1ControllerClientGetAsset: async (assetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('clientsBucketV1ControllerClientGetAsset', 'assetId', assetId)
            const localVarPath = `/v1/clients/bucket/video/get-asset-info/{assetId}`
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary client get presigned put url
         * @param {ClientGetPresignedPutUrlDto} clientGetPresignedPutUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsBucketV1ControllerClientGetPresignedPutUrl: async (clientGetPresignedPutUrlDto: ClientGetPresignedPutUrlDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientGetPresignedPutUrlDto' is not null or undefined
            assertParamExists('clientsBucketV1ControllerClientGetPresignedPutUrl', 'clientGetPresignedPutUrlDto', clientGetPresignedPutUrlDto)
            const localVarPath = `/v1/clients/bucket/image/get-presigned-put-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientGetPresignedPutUrlDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary client get presigned video put url
         * @param {ClientGetVideoPresignedPutUrlDto} clientGetVideoPresignedPutUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsBucketV1ControllerClientGetPresignedVideoPutUrl: async (clientGetVideoPresignedPutUrlDto: ClientGetVideoPresignedPutUrlDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientGetVideoPresignedPutUrlDto' is not null or undefined
            assertParamExists('clientsBucketV1ControllerClientGetPresignedVideoPutUrl', 'clientGetVideoPresignedPutUrlDto', clientGetVideoPresignedPutUrlDto)
            const localVarPath = `/v1/clients/bucket/video/get-presigned-put-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientGetVideoPresignedPutUrlDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary client upload request status
         * @param {string} uploadRequestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsBucketV1ControllerGetStatusUploadRequest: async (uploadRequestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadRequestId' is not null or undefined
            assertParamExists('clientsBucketV1ControllerGetStatusUploadRequest', 'uploadRequestId', uploadRequestId)
            const localVarPath = `/v1/clients/bucket/video/get-status-request/{uploadRequestId}`
                .replace(`{${"uploadRequestId"}}`, encodeURIComponent(String(uploadRequestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1ClientBucketApi - functional programming interface
 * @export
 */
export const V1ClientBucketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ClientBucketApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary client asset status
         * @param {string} assetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsBucketV1ControllerClientGetAsset(assetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientGetVideoAssetStatusResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsBucketV1ControllerClientGetAsset(assetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary client get presigned put url
         * @param {ClientGetPresignedPutUrlDto} clientGetPresignedPutUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsBucketV1ControllerClientGetPresignedPutUrl(clientGetPresignedPutUrlDto: ClientGetPresignedPutUrlDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientGetPhotoPresignedUrlResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsBucketV1ControllerClientGetPresignedPutUrl(clientGetPresignedPutUrlDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary client get presigned video put url
         * @param {ClientGetVideoPresignedPutUrlDto} clientGetVideoPresignedPutUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsBucketV1ControllerClientGetPresignedVideoPutUrl(clientGetVideoPresignedPutUrlDto: ClientGetVideoPresignedPutUrlDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientGetVideoPresignedUrlResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsBucketV1ControllerClientGetPresignedVideoPutUrl(clientGetVideoPresignedPutUrlDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary client upload request status
         * @param {string} uploadRequestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsBucketV1ControllerGetStatusUploadRequest(uploadRequestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientGetVideoUploadStatusResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsBucketV1ControllerGetStatusUploadRequest(uploadRequestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1ClientBucketApi - factory interface
 * @export
 */
export const V1ClientBucketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ClientBucketApiFp(configuration)
    return {
        /**
         * 
         * @summary client asset status
         * @param {string} assetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsBucketV1ControllerClientGetAsset(assetId: string, options?: any): AxiosPromise<ClientGetVideoAssetStatusResponseDto> {
            return localVarFp.clientsBucketV1ControllerClientGetAsset(assetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary client get presigned put url
         * @param {ClientGetPresignedPutUrlDto} clientGetPresignedPutUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsBucketV1ControllerClientGetPresignedPutUrl(clientGetPresignedPutUrlDto: ClientGetPresignedPutUrlDto, options?: any): AxiosPromise<ClientGetPhotoPresignedUrlResponseDto> {
            return localVarFp.clientsBucketV1ControllerClientGetPresignedPutUrl(clientGetPresignedPutUrlDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary client get presigned video put url
         * @param {ClientGetVideoPresignedPutUrlDto} clientGetVideoPresignedPutUrlDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsBucketV1ControllerClientGetPresignedVideoPutUrl(clientGetVideoPresignedPutUrlDto: ClientGetVideoPresignedPutUrlDto, options?: any): AxiosPromise<ClientGetVideoPresignedUrlResponseDto> {
            return localVarFp.clientsBucketV1ControllerClientGetPresignedVideoPutUrl(clientGetVideoPresignedPutUrlDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary client upload request status
         * @param {string} uploadRequestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsBucketV1ControllerGetStatusUploadRequest(uploadRequestId: string, options?: any): AxiosPromise<ClientGetVideoUploadStatusResponseDto> {
            return localVarFp.clientsBucketV1ControllerGetStatusUploadRequest(uploadRequestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1ClientBucketApi - object-oriented interface
 * @export
 * @class V1ClientBucketApi
 * @extends {BaseAPI}
 */
export class V1ClientBucketApi extends BaseAPI {
    /**
     * 
     * @summary client asset status
     * @param {string} assetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientBucketApi
     */
    public clientsBucketV1ControllerClientGetAsset(assetId: string, options?: AxiosRequestConfig) {
        return V1ClientBucketApiFp(this.configuration).clientsBucketV1ControllerClientGetAsset(assetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary client get presigned put url
     * @param {ClientGetPresignedPutUrlDto} clientGetPresignedPutUrlDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientBucketApi
     */
    public clientsBucketV1ControllerClientGetPresignedPutUrl(clientGetPresignedPutUrlDto: ClientGetPresignedPutUrlDto, options?: AxiosRequestConfig) {
        return V1ClientBucketApiFp(this.configuration).clientsBucketV1ControllerClientGetPresignedPutUrl(clientGetPresignedPutUrlDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary client get presigned video put url
     * @param {ClientGetVideoPresignedPutUrlDto} clientGetVideoPresignedPutUrlDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientBucketApi
     */
    public clientsBucketV1ControllerClientGetPresignedVideoPutUrl(clientGetVideoPresignedPutUrlDto: ClientGetVideoPresignedPutUrlDto, options?: AxiosRequestConfig) {
        return V1ClientBucketApiFp(this.configuration).clientsBucketV1ControllerClientGetPresignedVideoPutUrl(clientGetVideoPresignedPutUrlDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary client upload request status
     * @param {string} uploadRequestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ClientBucketApi
     */
    public clientsBucketV1ControllerGetStatusUploadRequest(uploadRequestId: string, options?: AxiosRequestConfig) {
        return V1ClientBucketApiFp(this.configuration).clientsBucketV1ControllerGetStatusUploadRequest(uploadRequestId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1CustomerFavoritesApi - axios parameter creator
 * @export
 */
export const V1CustomerFavoritesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete favorite artist
         * @param {string} artistProfileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFavoriteArtistsV1ControllerCustomerGetArtist: async (artistProfileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistProfileId' is not null or undefined
            assertParamExists('customerFavoriteArtistsV1ControllerCustomerGetArtist', 'artistProfileId', artistProfileId)
            const localVarPath = `/v1/customers/favorites/{artistProfileId}`
                .replace(`{${"artistProfileId"}}`, encodeURIComponent(String(artistProfileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create customer favorite artist
         * @param {CreateCustomerFavoriteArtistRequestDto} createCustomerFavoriteArtistRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFavoriteArtistsV1ControllerCustomerGetArtistsByCategories: async (createCustomerFavoriteArtistRequestDto: CreateCustomerFavoriteArtistRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCustomerFavoriteArtistRequestDto' is not null or undefined
            assertParamExists('customerFavoriteArtistsV1ControllerCustomerGetArtistsByCategories', 'createCustomerFavoriteArtistRequestDto', createCustomerFavoriteArtistRequestDto)
            const localVarPath = `/v1/customers/favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomerFavoriteArtistRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get paginated favorite artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFavoriteArtistsV1ControllerCustomerGetArtistsByFilters: async (customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerFindArtistsByFiltersRequestDTO' is not null or undefined
            assertParamExists('customerFavoriteArtistsV1ControllerCustomerGetArtistsByFilters', 'customerFindArtistsByFiltersRequestDTO', customerFindArtistsByFiltersRequestDTO)
            const localVarPath = `/v1/customers/favorites/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerFindArtistsByFiltersRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1CustomerFavoritesApi - functional programming interface
 * @export
 */
export const V1CustomerFavoritesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1CustomerFavoritesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete favorite artist
         * @param {string} artistProfileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFavoriteArtistsV1ControllerCustomerGetArtist(artistProfileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerArtistProfileResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFavoriteArtistsV1ControllerCustomerGetArtist(artistProfileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create customer favorite artist
         * @param {CreateCustomerFavoriteArtistRequestDto} createCustomerFavoriteArtistRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFavoriteArtistsV1ControllerCustomerGetArtistsByCategories(createCustomerFavoriteArtistRequestDto: CreateCustomerFavoriteArtistRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFavoriteArtistsV1ControllerCustomerGetArtistsByCategories(createCustomerFavoriteArtistRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get paginated favorite artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerFavoriteArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerFindArtistsByFiltersRequestDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerFavoriteArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1CustomerFavoritesApi - factory interface
 * @export
 */
export const V1CustomerFavoritesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1CustomerFavoritesApiFp(configuration)
    return {
        /**
         * 
         * @summary delete favorite artist
         * @param {string} artistProfileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFavoriteArtistsV1ControllerCustomerGetArtist(artistProfileId: string, options?: any): AxiosPromise<CustomerArtistProfileResponseDTO> {
            return localVarFp.customerFavoriteArtistsV1ControllerCustomerGetArtist(artistProfileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create customer favorite artist
         * @param {CreateCustomerFavoriteArtistRequestDto} createCustomerFavoriteArtistRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFavoriteArtistsV1ControllerCustomerGetArtistsByCategories(createCustomerFavoriteArtistRequestDto: CreateCustomerFavoriteArtistRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.customerFavoriteArtistsV1ControllerCustomerGetArtistsByCategories(createCustomerFavoriteArtistRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get paginated favorite artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerFavoriteArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: any): AxiosPromise<CustomerFindArtistsByFiltersRequestDTO> {
            return localVarFp.customerFavoriteArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1CustomerFavoritesApi - object-oriented interface
 * @export
 * @class V1CustomerFavoritesApi
 * @extends {BaseAPI}
 */
export class V1CustomerFavoritesApi extends BaseAPI {
    /**
     * 
     * @summary delete favorite artist
     * @param {string} artistProfileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerFavoritesApi
     */
    public customerFavoriteArtistsV1ControllerCustomerGetArtist(artistProfileId: string, options?: AxiosRequestConfig) {
        return V1CustomerFavoritesApiFp(this.configuration).customerFavoriteArtistsV1ControllerCustomerGetArtist(artistProfileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create customer favorite artist
     * @param {CreateCustomerFavoriteArtistRequestDto} createCustomerFavoriteArtistRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerFavoritesApi
     */
    public customerFavoriteArtistsV1ControllerCustomerGetArtistsByCategories(createCustomerFavoriteArtistRequestDto: CreateCustomerFavoriteArtistRequestDto, options?: AxiosRequestConfig) {
        return V1CustomerFavoritesApiFp(this.configuration).customerFavoriteArtistsV1ControllerCustomerGetArtistsByCategories(createCustomerFavoriteArtistRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get paginated favorite artists
     * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerFavoritesApi
     */
    public customerFavoriteArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: AxiosRequestConfig) {
        return V1CustomerFavoritesApiFp(this.configuration).customerFavoriteArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1CustomerGetArtistsApi - axios parameter creator
 * @export
 */
export const V1CustomerGetArtistsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get order comments
         * @param {string} artistClientId 
         * @param {CustomerGetArtistCommentsRequestDTO} customerGetArtistCommentsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerArtistGetOrdersComments: async (artistClientId: string, customerGetArtistCommentsRequestDTO: CustomerGetArtistCommentsRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistClientId' is not null or undefined
            assertParamExists('customerArtistsV1ControllerArtistGetOrdersComments', 'artistClientId', artistClientId)
            // verify required parameter 'customerGetArtistCommentsRequestDTO' is not null or undefined
            assertParamExists('customerArtistsV1ControllerArtistGetOrdersComments', 'customerGetArtistCommentsRequestDTO', customerGetArtistCommentsRequestDTO)
            const localVarPath = `/v1/customers/artists/{artistClientId}/get-comments`
                .replace(`{${"artistClientId"}}`, encodeURIComponent(String(artistClientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerGetArtistCommentsRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get order comments
         * @param {string} artistClientId 
         * @param {CustomerGetArtistCommentsRequestDTO} customerGetArtistCommentsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerArtistGetOrdersCommentsPublic: async (artistClientId: string, customerGetArtistCommentsRequestDTO: CustomerGetArtistCommentsRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistClientId' is not null or undefined
            assertParamExists('customerArtistsV1ControllerArtistGetOrdersCommentsPublic', 'artistClientId', artistClientId)
            // verify required parameter 'customerGetArtistCommentsRequestDTO' is not null or undefined
            assertParamExists('customerArtistsV1ControllerArtistGetOrdersCommentsPublic', 'customerGetArtistCommentsRequestDTO', customerGetArtistCommentsRequestDTO)
            const localVarPath = `/v1/customers/artists/public/{artistClientId}/get-comments`
                .replace(`{${"artistClientId"}}`, encodeURIComponent(String(artistClientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerGetArtistCommentsRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get artist by id
         * @param {string} artistClientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtist: async (artistClientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistClientId' is not null or undefined
            assertParamExists('customerArtistsV1ControllerCustomerGetArtist', 'artistClientId', artistClientId)
            const localVarPath = `/v1/customers/artists/{artistClientId}`
                .replace(`{${"artistClientId"}}`, encodeURIComponent(String(artistClientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get artist by id
         * @param {string} artistClientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtistPublic: async (artistClientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistClientId' is not null or undefined
            assertParamExists('customerArtistsV1ControllerCustomerGetArtistPublic', 'artistClientId', artistClientId)
            const localVarPath = `/v1/customers/artists/public/{artistClientId}`
                .replace(`{${"artistClientId"}}`, encodeURIComponent(String(artistClientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get artists by categories
         * @param {CustomerFindArtistsByCategoriesRequestDTO} customerFindArtistsByCategoriesRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtistsByCategories: async (customerFindArtistsByCategoriesRequestDTO: CustomerFindArtistsByCategoriesRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerFindArtistsByCategoriesRequestDTO' is not null or undefined
            assertParamExists('customerArtistsV1ControllerCustomerGetArtistsByCategories', 'customerFindArtistsByCategoriesRequestDTO', customerFindArtistsByCategoriesRequestDTO)
            const localVarPath = `/v1/customers/artists/by-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerFindArtistsByCategoriesRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get artists by categories
         * @param {CustomerFindArtistsByCategoriesRequestDTO} customerFindArtistsByCategoriesRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtistsByCategoriesPublic: async (customerFindArtistsByCategoriesRequestDTO: CustomerFindArtistsByCategoriesRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerFindArtistsByCategoriesRequestDTO' is not null or undefined
            assertParamExists('customerArtistsV1ControllerCustomerGetArtistsByCategoriesPublic', 'customerFindArtistsByCategoriesRequestDTO', customerFindArtistsByCategoriesRequestDTO)
            const localVarPath = `/v1/customers/artists/public/by-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerFindArtistsByCategoriesRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get paginated artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtistsByFilters: async (customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerFindArtistsByFiltersRequestDTO' is not null or undefined
            assertParamExists('customerArtistsV1ControllerCustomerGetArtistsByFilters', 'customerFindArtistsByFiltersRequestDTO', customerFindArtistsByFiltersRequestDTO)
            const localVarPath = `/v1/customers/artists/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerFindArtistsByFiltersRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get paginated artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtistsByFiltersPublic: async (customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerFindArtistsByFiltersRequestDTO' is not null or undefined
            assertParamExists('customerArtistsV1ControllerCustomerGetArtistsByFiltersPublic', 'customerFindArtistsByFiltersRequestDTO', customerFindArtistsByFiltersRequestDTO)
            const localVarPath = `/v1/customers/artists/public/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerFindArtistsByFiltersRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get artists published videos
         * @param {string} artistClientId 
         * @param {CustomerGetGetArtistPublishedVideosRequestDTO} customerGetGetArtistPublishedVideosRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetGetArtistPublishedVideos: async (artistClientId: string, customerGetGetArtistPublishedVideosRequestDTO: CustomerGetGetArtistPublishedVideosRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistClientId' is not null or undefined
            assertParamExists('customerArtistsV1ControllerCustomerGetGetArtistPublishedVideos', 'artistClientId', artistClientId)
            // verify required parameter 'customerGetGetArtistPublishedVideosRequestDTO' is not null or undefined
            assertParamExists('customerArtistsV1ControllerCustomerGetGetArtistPublishedVideos', 'customerGetGetArtistPublishedVideosRequestDTO', customerGetGetArtistPublishedVideosRequestDTO)
            const localVarPath = `/v1/customers/artists/{artistClientId}/get-published-videos`
                .replace(`{${"artistClientId"}}`, encodeURIComponent(String(artistClientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerGetGetArtistPublishedVideosRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get artists published videos
         * @param {string} artistClientId 
         * @param {CustomerGetGetArtistPublishedVideosRequestDTO} customerGetGetArtistPublishedVideosRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetGetArtistPublishedVideosPublic: async (artistClientId: string, customerGetGetArtistPublishedVideosRequestDTO: CustomerGetGetArtistPublishedVideosRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistClientId' is not null or undefined
            assertParamExists('customerArtistsV1ControllerCustomerGetGetArtistPublishedVideosPublic', 'artistClientId', artistClientId)
            // verify required parameter 'customerGetGetArtistPublishedVideosRequestDTO' is not null or undefined
            assertParamExists('customerArtistsV1ControllerCustomerGetGetArtistPublishedVideosPublic', 'customerGetGetArtistPublishedVideosRequestDTO', customerGetGetArtistPublishedVideosRequestDTO)
            const localVarPath = `/v1/customers/artists/public/{artistClientId}/get-published-videos`
                .replace(`{${"artistClientId"}}`, encodeURIComponent(String(artistClientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerGetGetArtistPublishedVideosRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1CustomerGetArtistsApi - functional programming interface
 * @export
 */
export const V1CustomerGetArtistsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1CustomerGetArtistsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get order comments
         * @param {string} artistClientId 
         * @param {CustomerGetArtistCommentsRequestDTO} customerGetArtistCommentsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerArtistsV1ControllerArtistGetOrdersComments(artistClientId: string, customerGetArtistCommentsRequestDTO: CustomerGetArtistCommentsRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGetArtistOrdersCommentsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerArtistsV1ControllerArtistGetOrdersComments(artistClientId, customerGetArtistCommentsRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get order comments
         * @param {string} artistClientId 
         * @param {CustomerGetArtistCommentsRequestDTO} customerGetArtistCommentsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerArtistsV1ControllerArtistGetOrdersCommentsPublic(artistClientId: string, customerGetArtistCommentsRequestDTO: CustomerGetArtistCommentsRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGetArtistOrdersCommentsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerArtistsV1ControllerArtistGetOrdersCommentsPublic(artistClientId, customerGetArtistCommentsRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get artist by id
         * @param {string} artistClientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerArtistsV1ControllerCustomerGetArtist(artistClientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerArtistProfileResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerArtistsV1ControllerCustomerGetArtist(artistClientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get artist by id
         * @param {string} artistClientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerArtistsV1ControllerCustomerGetArtistPublic(artistClientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerArtistProfileResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerArtistsV1ControllerCustomerGetArtistPublic(artistClientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get artists by categories
         * @param {CustomerFindArtistsByCategoriesRequestDTO} customerFindArtistsByCategoriesRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerArtistsV1ControllerCustomerGetArtistsByCategories(customerFindArtistsByCategoriesRequestDTO: CustomerFindArtistsByCategoriesRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerFindArtistsByCategoriesResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerArtistsV1ControllerCustomerGetArtistsByCategories(customerFindArtistsByCategoriesRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get artists by categories
         * @param {CustomerFindArtistsByCategoriesRequestDTO} customerFindArtistsByCategoriesRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerArtistsV1ControllerCustomerGetArtistsByCategoriesPublic(customerFindArtistsByCategoriesRequestDTO: CustomerFindArtistsByCategoriesRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerFindArtistsByCategoriesResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerArtistsV1ControllerCustomerGetArtistsByCategoriesPublic(customerFindArtistsByCategoriesRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get paginated artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerFindArtistsByFiltersResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get paginated artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerArtistsV1ControllerCustomerGetArtistsByFiltersPublic(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerFindArtistsByFiltersResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerArtistsV1ControllerCustomerGetArtistsByFiltersPublic(customerFindArtistsByFiltersRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get artists published videos
         * @param {string} artistClientId 
         * @param {CustomerGetGetArtistPublishedVideosRequestDTO} customerGetGetArtistPublishedVideosRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerArtistsV1ControllerCustomerGetGetArtistPublishedVideos(artistClientId: string, customerGetGetArtistPublishedVideosRequestDTO: CustomerGetGetArtistPublishedVideosRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerArtistGetPublishedVideosResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerArtistsV1ControllerCustomerGetGetArtistPublishedVideos(artistClientId, customerGetGetArtistPublishedVideosRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get artists published videos
         * @param {string} artistClientId 
         * @param {CustomerGetGetArtistPublishedVideosRequestDTO} customerGetGetArtistPublishedVideosRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerArtistsV1ControllerCustomerGetGetArtistPublishedVideosPublic(artistClientId: string, customerGetGetArtistPublishedVideosRequestDTO: CustomerGetGetArtistPublishedVideosRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerArtistGetPublishedVideosResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerArtistsV1ControllerCustomerGetGetArtistPublishedVideosPublic(artistClientId, customerGetGetArtistPublishedVideosRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1CustomerGetArtistsApi - factory interface
 * @export
 */
export const V1CustomerGetArtistsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1CustomerGetArtistsApiFp(configuration)
    return {
        /**
         * 
         * @summary get order comments
         * @param {string} artistClientId 
         * @param {CustomerGetArtistCommentsRequestDTO} customerGetArtistCommentsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerArtistGetOrdersComments(artistClientId: string, customerGetArtistCommentsRequestDTO: CustomerGetArtistCommentsRequestDTO, options?: any): AxiosPromise<CustomerGetArtistOrdersCommentsResponseDTO> {
            return localVarFp.customerArtistsV1ControllerArtistGetOrdersComments(artistClientId, customerGetArtistCommentsRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get order comments
         * @param {string} artistClientId 
         * @param {CustomerGetArtistCommentsRequestDTO} customerGetArtistCommentsRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerArtistGetOrdersCommentsPublic(artistClientId: string, customerGetArtistCommentsRequestDTO: CustomerGetArtistCommentsRequestDTO, options?: any): AxiosPromise<CustomerGetArtistOrdersCommentsResponseDTO> {
            return localVarFp.customerArtistsV1ControllerArtistGetOrdersCommentsPublic(artistClientId, customerGetArtistCommentsRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get artist by id
         * @param {string} artistClientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtist(artistClientId: string, options?: any): AxiosPromise<CustomerArtistProfileResponseDTO> {
            return localVarFp.customerArtistsV1ControllerCustomerGetArtist(artistClientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get artist by id
         * @param {string} artistClientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtistPublic(artistClientId: string, options?: any): AxiosPromise<CustomerArtistProfileResponseDTO> {
            return localVarFp.customerArtistsV1ControllerCustomerGetArtistPublic(artistClientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get artists by categories
         * @param {CustomerFindArtistsByCategoriesRequestDTO} customerFindArtistsByCategoriesRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtistsByCategories(customerFindArtistsByCategoriesRequestDTO: CustomerFindArtistsByCategoriesRequestDTO, options?: any): AxiosPromise<CustomerFindArtistsByCategoriesResponseDTO> {
            return localVarFp.customerArtistsV1ControllerCustomerGetArtistsByCategories(customerFindArtistsByCategoriesRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get artists by categories
         * @param {CustomerFindArtistsByCategoriesRequestDTO} customerFindArtistsByCategoriesRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtistsByCategoriesPublic(customerFindArtistsByCategoriesRequestDTO: CustomerFindArtistsByCategoriesRequestDTO, options?: any): AxiosPromise<CustomerFindArtistsByCategoriesResponseDTO> {
            return localVarFp.customerArtistsV1ControllerCustomerGetArtistsByCategoriesPublic(customerFindArtistsByCategoriesRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get paginated artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: any): AxiosPromise<CustomerFindArtistsByFiltersResponseDTO> {
            return localVarFp.customerArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get paginated artists
         * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetArtistsByFiltersPublic(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: any): AxiosPromise<CustomerFindArtistsByFiltersResponseDTO> {
            return localVarFp.customerArtistsV1ControllerCustomerGetArtistsByFiltersPublic(customerFindArtistsByFiltersRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get artists published videos
         * @param {string} artistClientId 
         * @param {CustomerGetGetArtistPublishedVideosRequestDTO} customerGetGetArtistPublishedVideosRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetGetArtistPublishedVideos(artistClientId: string, customerGetGetArtistPublishedVideosRequestDTO: CustomerGetGetArtistPublishedVideosRequestDTO, options?: any): AxiosPromise<CustomerArtistGetPublishedVideosResponseDTO> {
            return localVarFp.customerArtistsV1ControllerCustomerGetGetArtistPublishedVideos(artistClientId, customerGetGetArtistPublishedVideosRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get artists published videos
         * @param {string} artistClientId 
         * @param {CustomerGetGetArtistPublishedVideosRequestDTO} customerGetGetArtistPublishedVideosRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArtistsV1ControllerCustomerGetGetArtistPublishedVideosPublic(artistClientId: string, customerGetGetArtistPublishedVideosRequestDTO: CustomerGetGetArtistPublishedVideosRequestDTO, options?: any): AxiosPromise<CustomerArtistGetPublishedVideosResponseDTO> {
            return localVarFp.customerArtistsV1ControllerCustomerGetGetArtistPublishedVideosPublic(artistClientId, customerGetGetArtistPublishedVideosRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1CustomerGetArtistsApi - object-oriented interface
 * @export
 * @class V1CustomerGetArtistsApi
 * @extends {BaseAPI}
 */
export class V1CustomerGetArtistsApi extends BaseAPI {
    /**
     * 
     * @summary get order comments
     * @param {string} artistClientId 
     * @param {CustomerGetArtistCommentsRequestDTO} customerGetArtistCommentsRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerGetArtistsApi
     */
    public customerArtistsV1ControllerArtistGetOrdersComments(artistClientId: string, customerGetArtistCommentsRequestDTO: CustomerGetArtistCommentsRequestDTO, options?: AxiosRequestConfig) {
        return V1CustomerGetArtistsApiFp(this.configuration).customerArtistsV1ControllerArtistGetOrdersComments(artistClientId, customerGetArtistCommentsRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get order comments
     * @param {string} artistClientId 
     * @param {CustomerGetArtistCommentsRequestDTO} customerGetArtistCommentsRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerGetArtistsApi
     */
    public customerArtistsV1ControllerArtistGetOrdersCommentsPublic(artistClientId: string, customerGetArtistCommentsRequestDTO: CustomerGetArtistCommentsRequestDTO, options?: AxiosRequestConfig) {
        return V1CustomerGetArtistsApiFp(this.configuration).customerArtistsV1ControllerArtistGetOrdersCommentsPublic(artistClientId, customerGetArtistCommentsRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get artist by id
     * @param {string} artistClientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerGetArtistsApi
     */
    public customerArtistsV1ControllerCustomerGetArtist(artistClientId: string, options?: AxiosRequestConfig) {
        return V1CustomerGetArtistsApiFp(this.configuration).customerArtistsV1ControllerCustomerGetArtist(artistClientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get artist by id
     * @param {string} artistClientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerGetArtistsApi
     */
    public customerArtistsV1ControllerCustomerGetArtistPublic(artistClientId: string, options?: AxiosRequestConfig) {
        return V1CustomerGetArtistsApiFp(this.configuration).customerArtistsV1ControllerCustomerGetArtistPublic(artistClientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get artists by categories
     * @param {CustomerFindArtistsByCategoriesRequestDTO} customerFindArtistsByCategoriesRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerGetArtistsApi
     */
    public customerArtistsV1ControllerCustomerGetArtistsByCategories(customerFindArtistsByCategoriesRequestDTO: CustomerFindArtistsByCategoriesRequestDTO, options?: AxiosRequestConfig) {
        return V1CustomerGetArtistsApiFp(this.configuration).customerArtistsV1ControllerCustomerGetArtistsByCategories(customerFindArtistsByCategoriesRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get artists by categories
     * @param {CustomerFindArtistsByCategoriesRequestDTO} customerFindArtistsByCategoriesRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerGetArtistsApi
     */
    public customerArtistsV1ControllerCustomerGetArtistsByCategoriesPublic(customerFindArtistsByCategoriesRequestDTO: CustomerFindArtistsByCategoriesRequestDTO, options?: AxiosRequestConfig) {
        return V1CustomerGetArtistsApiFp(this.configuration).customerArtistsV1ControllerCustomerGetArtistsByCategoriesPublic(customerFindArtistsByCategoriesRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get paginated artists
     * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerGetArtistsApi
     */
    public customerArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: AxiosRequestConfig) {
        return V1CustomerGetArtistsApiFp(this.configuration).customerArtistsV1ControllerCustomerGetArtistsByFilters(customerFindArtistsByFiltersRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get paginated artists
     * @param {CustomerFindArtistsByFiltersRequestDTO} customerFindArtistsByFiltersRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerGetArtistsApi
     */
    public customerArtistsV1ControllerCustomerGetArtistsByFiltersPublic(customerFindArtistsByFiltersRequestDTO: CustomerFindArtistsByFiltersRequestDTO, options?: AxiosRequestConfig) {
        return V1CustomerGetArtistsApiFp(this.configuration).customerArtistsV1ControllerCustomerGetArtistsByFiltersPublic(customerFindArtistsByFiltersRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get artists published videos
     * @param {string} artistClientId 
     * @param {CustomerGetGetArtistPublishedVideosRequestDTO} customerGetGetArtistPublishedVideosRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerGetArtistsApi
     */
    public customerArtistsV1ControllerCustomerGetGetArtistPublishedVideos(artistClientId: string, customerGetGetArtistPublishedVideosRequestDTO: CustomerGetGetArtistPublishedVideosRequestDTO, options?: AxiosRequestConfig) {
        return V1CustomerGetArtistsApiFp(this.configuration).customerArtistsV1ControllerCustomerGetGetArtistPublishedVideos(artistClientId, customerGetGetArtistPublishedVideosRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get artists published videos
     * @param {string} artistClientId 
     * @param {CustomerGetGetArtistPublishedVideosRequestDTO} customerGetGetArtistPublishedVideosRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerGetArtistsApi
     */
    public customerArtistsV1ControllerCustomerGetGetArtistPublishedVideosPublic(artistClientId: string, customerGetGetArtistPublishedVideosRequestDTO: CustomerGetGetArtistPublishedVideosRequestDTO, options?: AxiosRequestConfig) {
        return V1CustomerGetArtistsApiFp(this.configuration).customerArtistsV1ControllerCustomerGetGetArtistPublishedVideosPublic(artistClientId, customerGetGetArtistPublishedVideosRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1CustomerOrdersApi - axios parameter creator
 * @export
 */
export const V1CustomerOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Customer cancel order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerCancelOrder: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerCancelOrder', 'orderId', orderId)
            const localVarPath = `/v1/customers/orders/{orderId}/cancel`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check order by id
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerCheckOrder: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerCheckOrder', 'orderId', orderId)
            const localVarPath = `/v1/customers/orders/check/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary customer confirm order execution
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerConfirmOrder: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerConfirmOrder', 'orderId', orderId)
            const localVarPath = `/v1/customers/orders/{orderId}/confirm-order-execution`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create comment to order
         * @param {string} orderId 
         * @param {CustomerCreateOrderCommentDTO} customerCreateOrderCommentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerCreateCommentToArtist: async (orderId: string, customerCreateOrderCommentDTO: CustomerCreateOrderCommentDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerCreateCommentToArtist', 'orderId', orderId)
            // verify required parameter 'customerCreateOrderCommentDTO' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerCreateCommentToArtist', 'customerCreateOrderCommentDTO', customerCreateOrderCommentDTO)
            const localVarPath = `/v1/customers/orders/{orderId}/comment`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerCreateOrderCommentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create order
         * @param {CustomerCreateOrderDto} customerCreateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerCreateOrder: async (customerCreateOrderDto: CustomerCreateOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCreateOrderDto' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerCreateOrder', 'customerCreateOrderDto', customerCreateOrderDto)
            const localVarPath = `/v1/customers/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerCreateOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Customer delete order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerDeleteOrder: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerDeleteOrder', 'orderId', orderId)
            const localVarPath = `/v1/customers/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get order by id
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerGetOrder: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerGetOrder', 'orderId', orderId)
            const localVarPath = `/v1/customers/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get paginated orders
         * @param {CustomerFindOrdersRequestDTO} customerFindOrdersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerGetOrders: async (customerFindOrdersRequestDTO: CustomerFindOrdersRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerFindOrdersRequestDTO' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerGetOrders', 'customerFindOrdersRequestDTO', customerFindOrdersRequestDTO)
            const localVarPath = `/v1/customers/orders/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerFindOrdersRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create comment to order
         * @param {string} orderId 
         * @param {CustomerPayOrderDto} customerPayOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerPayOrder: async (orderId: string, customerPayOrderDto: CustomerPayOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerPayOrder', 'orderId', orderId)
            // verify required parameter 'customerPayOrderDto' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerPayOrder', 'customerPayOrderDto', customerPayOrderDto)
            const localVarPath = `/v1/customers/orders/{orderId}/pay`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerPayOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary customer reject order execution
         * @param {string} orderId 
         * @param {CustomerRejectOrderExecutionDto} customerRejectOrderExecutionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerRejectOrder: async (orderId: string, customerRejectOrderExecutionDto: CustomerRejectOrderExecutionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerRejectOrder', 'orderId', orderId)
            // verify required parameter 'customerRejectOrderExecutionDto' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerRejectOrder', 'customerRejectOrderExecutionDto', customerRejectOrderExecutionDto)
            const localVarPath = `/v1/customers/orders/{orderId}/reject-order-execution`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerRejectOrderExecutionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Customer update order 
         * @param {string} orderId 
         * @param {CustomerUpdateOrderDto} customerUpdateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerUpdateOrder: async (orderId: string, customerUpdateOrderDto: CustomerUpdateOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerUpdateOrder', 'orderId', orderId)
            // verify required parameter 'customerUpdateOrderDto' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerUpdateOrder', 'customerUpdateOrderDto', customerUpdateOrderDto)
            const localVarPath = `/v1/customers/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerUpdateOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary customer view order execution
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerViewOrderExecution: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('customerOrdersV1ControllerCustomerViewOrderExecution', 'orderId', orderId)
            const localVarPath = `/v1/customers/orders/{orderId}/view-order-execution`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1CustomerOrdersApi - functional programming interface
 * @export
 */
export const V1CustomerOrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1CustomerOrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Customer cancel order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerCancelOrder(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerCancelOrder(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check order by id
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerCheckOrder(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerCheckOrder(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary customer confirm order execution
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerConfirmOrder(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerConfirmOrder(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create comment to order
         * @param {string} orderId 
         * @param {CustomerCreateOrderCommentDTO} customerCreateOrderCommentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerCreateCommentToArtist(orderId: string, customerCreateOrderCommentDTO: CustomerCreateOrderCommentDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerOrderCommentResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerCreateCommentToArtist(orderId, customerCreateOrderCommentDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create order
         * @param {CustomerCreateOrderDto} customerCreateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerCreateOrder(customerCreateOrderDto: CustomerCreateOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerOrderWithPaymentStatusResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerCreateOrder(customerCreateOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Customer delete order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerDeleteOrder(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerDeleteOrder(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get order by id
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerGetOrder(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerGetOrder(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get paginated orders
         * @param {CustomerFindOrdersRequestDTO} customerFindOrdersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerGetOrders(customerFindOrdersRequestDTO: CustomerFindOrdersRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerFindOrdersResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerGetOrders(customerFindOrdersRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create comment to order
         * @param {string} orderId 
         * @param {CustomerPayOrderDto} customerPayOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerPayOrder(orderId: string, customerPayOrderDto: CustomerPayOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerOrderWithPaymentStatusResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerPayOrder(orderId, customerPayOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary customer reject order execution
         * @param {string} orderId 
         * @param {CustomerRejectOrderExecutionDto} customerRejectOrderExecutionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerRejectOrder(orderId: string, customerRejectOrderExecutionDto: CustomerRejectOrderExecutionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerRejectOrder(orderId, customerRejectOrderExecutionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Customer update order 
         * @param {string} orderId 
         * @param {CustomerUpdateOrderDto} customerUpdateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerUpdateOrder(orderId: string, customerUpdateOrderDto: CustomerUpdateOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerUpdateOrder(orderId, customerUpdateOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary customer view order execution
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerOrdersV1ControllerCustomerViewOrderExecution(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerOrderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerOrdersV1ControllerCustomerViewOrderExecution(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1CustomerOrdersApi - factory interface
 * @export
 */
export const V1CustomerOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1CustomerOrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary Customer cancel order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerCancelOrder(orderId: string, options?: any): AxiosPromise<CustomerOrderResponseDto> {
            return localVarFp.customerOrdersV1ControllerCustomerCancelOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check order by id
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerCheckOrder(orderId: string, options?: any): AxiosPromise<CustomerOrderResponseDto> {
            return localVarFp.customerOrdersV1ControllerCustomerCheckOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary customer confirm order execution
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerConfirmOrder(orderId: string, options?: any): AxiosPromise<CustomerOrderResponseDto> {
            return localVarFp.customerOrdersV1ControllerCustomerConfirmOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create comment to order
         * @param {string} orderId 
         * @param {CustomerCreateOrderCommentDTO} customerCreateOrderCommentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerCreateCommentToArtist(orderId: string, customerCreateOrderCommentDTO: CustomerCreateOrderCommentDTO, options?: any): AxiosPromise<CustomerOrderCommentResponseDto> {
            return localVarFp.customerOrdersV1ControllerCustomerCreateCommentToArtist(orderId, customerCreateOrderCommentDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create order
         * @param {CustomerCreateOrderDto} customerCreateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerCreateOrder(customerCreateOrderDto: CustomerCreateOrderDto, options?: any): AxiosPromise<CustomerOrderWithPaymentStatusResponseDto> {
            return localVarFp.customerOrdersV1ControllerCustomerCreateOrder(customerCreateOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Customer delete order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerDeleteOrder(orderId: string, options?: any): AxiosPromise<SuccessResponseDto> {
            return localVarFp.customerOrdersV1ControllerCustomerDeleteOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get order by id
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerGetOrder(orderId: string, options?: any): AxiosPromise<CustomerOrderResponseDto> {
            return localVarFp.customerOrdersV1ControllerCustomerGetOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get paginated orders
         * @param {CustomerFindOrdersRequestDTO} customerFindOrdersRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerGetOrders(customerFindOrdersRequestDTO: CustomerFindOrdersRequestDTO, options?: any): AxiosPromise<CustomerFindOrdersResponseDTO> {
            return localVarFp.customerOrdersV1ControllerCustomerGetOrders(customerFindOrdersRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create comment to order
         * @param {string} orderId 
         * @param {CustomerPayOrderDto} customerPayOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerPayOrder(orderId: string, customerPayOrderDto: CustomerPayOrderDto, options?: any): AxiosPromise<CustomerOrderWithPaymentStatusResponseDto> {
            return localVarFp.customerOrdersV1ControllerCustomerPayOrder(orderId, customerPayOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary customer reject order execution
         * @param {string} orderId 
         * @param {CustomerRejectOrderExecutionDto} customerRejectOrderExecutionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerRejectOrder(orderId: string, customerRejectOrderExecutionDto: CustomerRejectOrderExecutionDto, options?: any): AxiosPromise<CustomerOrderResponseDto> {
            return localVarFp.customerOrdersV1ControllerCustomerRejectOrder(orderId, customerRejectOrderExecutionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Customer update order 
         * @param {string} orderId 
         * @param {CustomerUpdateOrderDto} customerUpdateOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerUpdateOrder(orderId: string, customerUpdateOrderDto: CustomerUpdateOrderDto, options?: any): AxiosPromise<CustomerOrderResponseDto> {
            return localVarFp.customerOrdersV1ControllerCustomerUpdateOrder(orderId, customerUpdateOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary customer view order execution
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerOrdersV1ControllerCustomerViewOrderExecution(orderId: string, options?: any): AxiosPromise<CustomerOrderResponseDto> {
            return localVarFp.customerOrdersV1ControllerCustomerViewOrderExecution(orderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1CustomerOrdersApi - object-oriented interface
 * @export
 * @class V1CustomerOrdersApi
 * @extends {BaseAPI}
 */
export class V1CustomerOrdersApi extends BaseAPI {
    /**
     * 
     * @summary Customer cancel order
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerCancelOrder(orderId: string, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerCancelOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check order by id
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerCheckOrder(orderId: string, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerCheckOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary customer confirm order execution
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerConfirmOrder(orderId: string, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerConfirmOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create comment to order
     * @param {string} orderId 
     * @param {CustomerCreateOrderCommentDTO} customerCreateOrderCommentDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerCreateCommentToArtist(orderId: string, customerCreateOrderCommentDTO: CustomerCreateOrderCommentDTO, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerCreateCommentToArtist(orderId, customerCreateOrderCommentDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create order
     * @param {CustomerCreateOrderDto} customerCreateOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerCreateOrder(customerCreateOrderDto: CustomerCreateOrderDto, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerCreateOrder(customerCreateOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Customer delete order
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerDeleteOrder(orderId: string, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerDeleteOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get order by id
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerGetOrder(orderId: string, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerGetOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get paginated orders
     * @param {CustomerFindOrdersRequestDTO} customerFindOrdersRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerGetOrders(customerFindOrdersRequestDTO: CustomerFindOrdersRequestDTO, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerGetOrders(customerFindOrdersRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create comment to order
     * @param {string} orderId 
     * @param {CustomerPayOrderDto} customerPayOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerPayOrder(orderId: string, customerPayOrderDto: CustomerPayOrderDto, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerPayOrder(orderId, customerPayOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary customer reject order execution
     * @param {string} orderId 
     * @param {CustomerRejectOrderExecutionDto} customerRejectOrderExecutionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerRejectOrder(orderId: string, customerRejectOrderExecutionDto: CustomerRejectOrderExecutionDto, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerRejectOrder(orderId, customerRejectOrderExecutionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Customer update order 
     * @param {string} orderId 
     * @param {CustomerUpdateOrderDto} customerUpdateOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerUpdateOrder(orderId: string, customerUpdateOrderDto: CustomerUpdateOrderDto, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerUpdateOrder(orderId, customerUpdateOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary customer view order execution
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerOrdersApi
     */
    public customerOrdersV1ControllerCustomerViewOrderExecution(orderId: string, options?: AxiosRequestConfig) {
        return V1CustomerOrdersApiFp(this.configuration).customerOrdersV1ControllerCustomerViewOrderExecution(orderId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1CustomerPaymentMethodsApi - axios parameter creator
 * @export
 */
export const V1CustomerPaymentMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add customer payment method
         * @param {CustomerAddPaymentMethodDto} customerAddPaymentMethodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerPaymentMethodsV1ControllerCustomerAddPaymentMethod: async (customerAddPaymentMethodDto: CustomerAddPaymentMethodDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerAddPaymentMethodDto' is not null or undefined
            assertParamExists('customerPaymentMethodsV1ControllerCustomerAddPaymentMethod', 'customerAddPaymentMethodDto', customerAddPaymentMethodDto)
            const localVarPath = `/v1/customers/payment-methods/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerAddPaymentMethodDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete customer payment method
         * @param {string} paymentMethodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerPaymentMethodsV1ControllerCustomerDeletePaymentMethod: async (paymentMethodId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('customerPaymentMethodsV1ControllerCustomerDeletePaymentMethod', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/v1/customers/payment-methods/{paymentMethodId}`
                .replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(paymentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get all customer payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerPaymentMethodsV1ControllerCustomerGetPaymentMethods: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/customers/payment-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1CustomerPaymentMethodsApi - functional programming interface
 * @export
 */
export const V1CustomerPaymentMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1CustomerPaymentMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary add customer payment method
         * @param {CustomerAddPaymentMethodDto} customerAddPaymentMethodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerPaymentMethodsV1ControllerCustomerAddPaymentMethod(customerAddPaymentMethodDto: CustomerAddPaymentMethodDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPaymentMethodResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerPaymentMethodsV1ControllerCustomerAddPaymentMethod(customerAddPaymentMethodDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete customer payment method
         * @param {string} paymentMethodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerPaymentMethodsV1ControllerCustomerDeletePaymentMethod(paymentMethodId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerPaymentMethodsV1ControllerCustomerDeletePaymentMethod(paymentMethodId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get all customer payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerPaymentMethodsV1ControllerCustomerGetPaymentMethods(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerPaymentMethodResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerPaymentMethodsV1ControllerCustomerGetPaymentMethods(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1CustomerPaymentMethodsApi - factory interface
 * @export
 */
export const V1CustomerPaymentMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1CustomerPaymentMethodsApiFp(configuration)
    return {
        /**
         * 
         * @summary add customer payment method
         * @param {CustomerAddPaymentMethodDto} customerAddPaymentMethodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerPaymentMethodsV1ControllerCustomerAddPaymentMethod(customerAddPaymentMethodDto: CustomerAddPaymentMethodDto, options?: any): AxiosPromise<CustomerPaymentMethodResponseDto> {
            return localVarFp.customerPaymentMethodsV1ControllerCustomerAddPaymentMethod(customerAddPaymentMethodDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete customer payment method
         * @param {string} paymentMethodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerPaymentMethodsV1ControllerCustomerDeletePaymentMethod(paymentMethodId: string, options?: any): AxiosPromise<SuccessResponseDto> {
            return localVarFp.customerPaymentMethodsV1ControllerCustomerDeletePaymentMethod(paymentMethodId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get all customer payment methods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerPaymentMethodsV1ControllerCustomerGetPaymentMethods(options?: any): AxiosPromise<Array<CustomerPaymentMethodResponseDto>> {
            return localVarFp.customerPaymentMethodsV1ControllerCustomerGetPaymentMethods(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1CustomerPaymentMethodsApi - object-oriented interface
 * @export
 * @class V1CustomerPaymentMethodsApi
 * @extends {BaseAPI}
 */
export class V1CustomerPaymentMethodsApi extends BaseAPI {
    /**
     * 
     * @summary add customer payment method
     * @param {CustomerAddPaymentMethodDto} customerAddPaymentMethodDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerPaymentMethodsApi
     */
    public customerPaymentMethodsV1ControllerCustomerAddPaymentMethod(customerAddPaymentMethodDto: CustomerAddPaymentMethodDto, options?: AxiosRequestConfig) {
        return V1CustomerPaymentMethodsApiFp(this.configuration).customerPaymentMethodsV1ControllerCustomerAddPaymentMethod(customerAddPaymentMethodDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete customer payment method
     * @param {string} paymentMethodId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerPaymentMethodsApi
     */
    public customerPaymentMethodsV1ControllerCustomerDeletePaymentMethod(paymentMethodId: string, options?: AxiosRequestConfig) {
        return V1CustomerPaymentMethodsApiFp(this.configuration).customerPaymentMethodsV1ControllerCustomerDeletePaymentMethod(paymentMethodId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get all customer payment methods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerPaymentMethodsApi
     */
    public customerPaymentMethodsV1ControllerCustomerGetPaymentMethods(options?: AxiosRequestConfig) {
        return V1CustomerPaymentMethodsApiFp(this.configuration).customerPaymentMethodsV1ControllerCustomerGetPaymentMethods(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1CustomerProfileApi - axios parameter creator
 * @export
 */
export const V1CustomerProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create client profile
         * @param {CustomerCompleteRegistrationDto} customerCompleteRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersProfileV1ControllerArtistCreateMeProfile: async (customerCompleteRegistrationDto: CustomerCompleteRegistrationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerCompleteRegistrationDto' is not null or undefined
            assertParamExists('customersProfileV1ControllerArtistCreateMeProfile', 'customerCompleteRegistrationDto', customerCompleteRegistrationDto)
            const localVarPath = `/v1/customers/complete-registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication client_registration required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerCompleteRegistrationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get authorized customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersProfileV1ControllerArtistGetMeProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/customers/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update authorized customer profile
         * @param {CustomerUpdateProfileDto} customerUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersProfileV1ControllerCustomerUpdateMeProfile: async (customerUpdateProfileDto: CustomerUpdateProfileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerUpdateProfileDto' is not null or undefined
            assertParamExists('customersProfileV1ControllerCustomerUpdateMeProfile', 'customerUpdateProfileDto', customerUpdateProfileDto)
            const localVarPath = `/v1/customers/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerUpdateProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1CustomerProfileApi - functional programming interface
 * @export
 */
export const V1CustomerProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1CustomerProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary create client profile
         * @param {CustomerCompleteRegistrationDto} customerCompleteRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersProfileV1ControllerArtistCreateMeProfile(customerCompleteRegistrationDto: CustomerCompleteRegistrationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersProfileV1ControllerArtistCreateMeProfile(customerCompleteRegistrationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get authorized customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersProfileV1ControllerArtistGetMeProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerMeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersProfileV1ControllerArtistGetMeProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update authorized customer profile
         * @param {CustomerUpdateProfileDto} customerUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersProfileV1ControllerCustomerUpdateMeProfile(customerUpdateProfileDto: CustomerUpdateProfileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerMeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersProfileV1ControllerCustomerUpdateMeProfile(customerUpdateProfileDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1CustomerProfileApi - factory interface
 * @export
 */
export const V1CustomerProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1CustomerProfileApiFp(configuration)
    return {
        /**
         * 
         * @summary create client profile
         * @param {CustomerCompleteRegistrationDto} customerCompleteRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersProfileV1ControllerArtistCreateMeProfile(customerCompleteRegistrationDto: CustomerCompleteRegistrationDto, options?: any): AxiosPromise<CredentialsResponseDto> {
            return localVarFp.customersProfileV1ControllerArtistCreateMeProfile(customerCompleteRegistrationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get authorized customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersProfileV1ControllerArtistGetMeProfile(options?: any): AxiosPromise<CustomerMeResponseDto> {
            return localVarFp.customersProfileV1ControllerArtistGetMeProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update authorized customer profile
         * @param {CustomerUpdateProfileDto} customerUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersProfileV1ControllerCustomerUpdateMeProfile(customerUpdateProfileDto: CustomerUpdateProfileDto, options?: any): AxiosPromise<CustomerMeResponseDto> {
            return localVarFp.customersProfileV1ControllerCustomerUpdateMeProfile(customerUpdateProfileDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1CustomerProfileApi - object-oriented interface
 * @export
 * @class V1CustomerProfileApi
 * @extends {BaseAPI}
 */
export class V1CustomerProfileApi extends BaseAPI {
    /**
     * 
     * @summary create client profile
     * @param {CustomerCompleteRegistrationDto} customerCompleteRegistrationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerProfileApi
     */
    public customersProfileV1ControllerArtistCreateMeProfile(customerCompleteRegistrationDto: CustomerCompleteRegistrationDto, options?: AxiosRequestConfig) {
        return V1CustomerProfileApiFp(this.configuration).customersProfileV1ControllerArtistCreateMeProfile(customerCompleteRegistrationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get authorized customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerProfileApi
     */
    public customersProfileV1ControllerArtistGetMeProfile(options?: AxiosRequestConfig) {
        return V1CustomerProfileApiFp(this.configuration).customersProfileV1ControllerArtistGetMeProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update authorized customer profile
     * @param {CustomerUpdateProfileDto} customerUpdateProfileDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1CustomerProfileApi
     */
    public customersProfileV1ControllerCustomerUpdateMeProfile(customerUpdateProfileDto: CustomerUpdateProfileDto, options?: AxiosRequestConfig) {
        return V1CustomerProfileApiFp(this.configuration).customersProfileV1ControllerCustomerUpdateMeProfile(customerUpdateProfileDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1DeepLinksRedirectsApi - axios parameter creator
 * @export
 */
export const V1DeepLinksRedirectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deepLinksRedirectV1ControllerRedirectDeeplinks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/redirects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1DeepLinksRedirectsApi - functional programming interface
 * @export
 */
export const V1DeepLinksRedirectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1DeepLinksRedirectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deepLinksRedirectV1ControllerRedirectDeeplinks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deepLinksRedirectV1ControllerRedirectDeeplinks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1DeepLinksRedirectsApi - factory interface
 * @export
 */
export const V1DeepLinksRedirectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1DeepLinksRedirectsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deepLinksRedirectV1ControllerRedirectDeeplinks(options?: any): AxiosPromise<void> {
            return localVarFp.deepLinksRedirectV1ControllerRedirectDeeplinks(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1DeepLinksRedirectsApi - object-oriented interface
 * @export
 * @class V1DeepLinksRedirectsApi
 * @extends {BaseAPI}
 */
export class V1DeepLinksRedirectsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1DeepLinksRedirectsApi
     */
    public deepLinksRedirectV1ControllerRedirectDeeplinks(options?: AxiosRequestConfig) {
        return V1DeepLinksRedirectsApiFp(this.configuration).deepLinksRedirectV1ControllerRedirectDeeplinks(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1FirebaseNotificationsApi - axios parameter creator
 * @export
 */
export const V1FirebaseNotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteUserFirebaseDto} deleteUserFirebaseDto delete firebase user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firebaseNotificationControllerDeleteFirebaseId: async (deleteUserFirebaseDto: DeleteUserFirebaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUserFirebaseDto' is not null or undefined
            assertParamExists('firebaseNotificationControllerDeleteFirebaseId', 'deleteUserFirebaseDto', deleteUserFirebaseDto)
            const localVarPath = `/v1/notification/delete-firebase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUserFirebaseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SetUserFirebaseDto} setUserFirebaseDto set firebase user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firebaseNotificationControllerSetDeviceFirebaseId: async (setUserFirebaseDto: SetUserFirebaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setUserFirebaseDto' is not null or undefined
            assertParamExists('firebaseNotificationControllerSetDeviceFirebaseId', 'setUserFirebaseDto', setUserFirebaseDto)
            const localVarPath = `/v1/notification/set-firebase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_client required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setUserFirebaseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1FirebaseNotificationsApi - functional programming interface
 * @export
 */
export const V1FirebaseNotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1FirebaseNotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteUserFirebaseDto} deleteUserFirebaseDto delete firebase user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firebaseNotificationControllerDeleteFirebaseId(deleteUserFirebaseDto: DeleteUserFirebaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.firebaseNotificationControllerDeleteFirebaseId(deleteUserFirebaseDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SetUserFirebaseDto} setUserFirebaseDto set firebase user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async firebaseNotificationControllerSetDeviceFirebaseId(setUserFirebaseDto: SetUserFirebaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.firebaseNotificationControllerSetDeviceFirebaseId(setUserFirebaseDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1FirebaseNotificationsApi - factory interface
 * @export
 */
export const V1FirebaseNotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1FirebaseNotificationsApiFp(configuration)
    return {
        /**
         * 
         * @param {DeleteUserFirebaseDto} deleteUserFirebaseDto delete firebase user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firebaseNotificationControllerDeleteFirebaseId(deleteUserFirebaseDto: DeleteUserFirebaseDto, options?: any): AxiosPromise<void> {
            return localVarFp.firebaseNotificationControllerDeleteFirebaseId(deleteUserFirebaseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SetUserFirebaseDto} setUserFirebaseDto set firebase user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        firebaseNotificationControllerSetDeviceFirebaseId(setUserFirebaseDto: SetUserFirebaseDto, options?: any): AxiosPromise<void> {
            return localVarFp.firebaseNotificationControllerSetDeviceFirebaseId(setUserFirebaseDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1FirebaseNotificationsApi - object-oriented interface
 * @export
 * @class V1FirebaseNotificationsApi
 * @extends {BaseAPI}
 */
export class V1FirebaseNotificationsApi extends BaseAPI {
    /**
     * 
     * @param {DeleteUserFirebaseDto} deleteUserFirebaseDto delete firebase user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1FirebaseNotificationsApi
     */
    public firebaseNotificationControllerDeleteFirebaseId(deleteUserFirebaseDto: DeleteUserFirebaseDto, options?: AxiosRequestConfig) {
        return V1FirebaseNotificationsApiFp(this.configuration).firebaseNotificationControllerDeleteFirebaseId(deleteUserFirebaseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SetUserFirebaseDto} setUserFirebaseDto set firebase user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1FirebaseNotificationsApi
     */
    public firebaseNotificationControllerSetDeviceFirebaseId(setUserFirebaseDto: SetUserFirebaseDto, options?: AxiosRequestConfig) {
        return V1FirebaseNotificationsApiFp(this.configuration).firebaseNotificationControllerSetDeviceFirebaseId(setUserFirebaseDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1MuxServiceWebhooksApi - axios parameter creator
 * @export
 */
export const V1MuxServiceWebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary process mux webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        muxWebhooksV1ControllerCustomerGetArtistsByCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/mux-webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_customer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1MuxServiceWebhooksApi - functional programming interface
 * @export
 */
export const V1MuxServiceWebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1MuxServiceWebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary process mux webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async muxWebhooksV1ControllerCustomerGetArtistsByCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.muxWebhooksV1ControllerCustomerGetArtistsByCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1MuxServiceWebhooksApi - factory interface
 * @export
 */
export const V1MuxServiceWebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1MuxServiceWebhooksApiFp(configuration)
    return {
        /**
         * 
         * @summary process mux webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        muxWebhooksV1ControllerCustomerGetArtistsByCategories(options?: any): AxiosPromise<void> {
            return localVarFp.muxWebhooksV1ControllerCustomerGetArtistsByCategories(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1MuxServiceWebhooksApi - object-oriented interface
 * @export
 * @class V1MuxServiceWebhooksApi
 * @extends {BaseAPI}
 */
export class V1MuxServiceWebhooksApi extends BaseAPI {
    /**
     * 
     * @summary process mux webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1MuxServiceWebhooksApi
     */
    public muxWebhooksV1ControllerCustomerGetArtistsByCategories(options?: AxiosRequestConfig) {
        return V1MuxServiceWebhooksApiFp(this.configuration).muxWebhooksV1ControllerCustomerGetArtistsByCategories(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1OrdersWebhooksApi - axios parameter creator
 * @export
 */
export const V1OrdersWebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ConfirmOrder3DSDto} confirmOrder3DSDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersWebhooksControllerConfirmOrder3DSResponse: async (confirmOrder3DSDto: ConfirmOrder3DSDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'confirmOrder3DSDto' is not null or undefined
            assertParamExists('ordersWebhooksControllerConfirmOrder3DSResponse', 'confirmOrder3DSDto', confirmOrder3DSDto)
            const localVarPath = `/v1/order-webhooks/confirm-3ds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmOrder3DSDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1OrdersWebhooksApi - functional programming interface
 * @export
 */
export const V1OrdersWebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1OrdersWebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ConfirmOrder3DSDto} confirmOrder3DSDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersWebhooksControllerConfirmOrder3DSResponse(confirmOrder3DSDto: ConfirmOrder3DSDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersWebhooksControllerConfirmOrder3DSResponse(confirmOrder3DSDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1OrdersWebhooksApi - factory interface
 * @export
 */
export const V1OrdersWebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1OrdersWebhooksApiFp(configuration)
    return {
        /**
         * 
         * @param {ConfirmOrder3DSDto} confirmOrder3DSDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersWebhooksControllerConfirmOrder3DSResponse(confirmOrder3DSDto: ConfirmOrder3DSDto, options?: any): AxiosPromise<SuccessResponseDto> {
            return localVarFp.ordersWebhooksControllerConfirmOrder3DSResponse(confirmOrder3DSDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1OrdersWebhooksApi - object-oriented interface
 * @export
 * @class V1OrdersWebhooksApi
 * @extends {BaseAPI}
 */
export class V1OrdersWebhooksApi extends BaseAPI {
    /**
     * 
     * @param {ConfirmOrder3DSDto} confirmOrder3DSDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1OrdersWebhooksApi
     */
    public ordersWebhooksControllerConfirmOrder3DSResponse(confirmOrder3DSDto: ConfirmOrder3DSDto, options?: AxiosRequestConfig) {
        return V1OrdersWebhooksApiFp(this.configuration).ordersWebhooksControllerConfirmOrder3DSResponse(confirmOrder3DSDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1PublicPromocodeApi - axios parameter creator
 * @export
 */
export const V1PublicPromocodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UsePromocodeDto} usePromocodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promocodePublicControllerCheckPromocode: async (usePromocodeDto: UsePromocodeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usePromocodeDto' is not null or undefined
            assertParamExists('promocodePublicControllerCheckPromocode', 'usePromocodeDto', usePromocodeDto)
            const localVarPath = `/v1/promocode/check-promocode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usePromocodeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1PublicPromocodeApi - functional programming interface
 * @export
 */
export const V1PublicPromocodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1PublicPromocodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UsePromocodeDto} usePromocodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promocodePublicControllerCheckPromocode(usePromocodeDto: UsePromocodeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promocodePublicControllerCheckPromocode(usePromocodeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1PublicPromocodeApi - factory interface
 * @export
 */
export const V1PublicPromocodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1PublicPromocodeApiFp(configuration)
    return {
        /**
         * 
         * @param {UsePromocodeDto} usePromocodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promocodePublicControllerCheckPromocode(usePromocodeDto: UsePromocodeDto, options?: any): AxiosPromise<object> {
            return localVarFp.promocodePublicControllerCheckPromocode(usePromocodeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1PublicPromocodeApi - object-oriented interface
 * @export
 * @class V1PublicPromocodeApi
 * @extends {BaseAPI}
 */
export class V1PublicPromocodeApi extends BaseAPI {
    /**
     * 
     * @param {UsePromocodeDto} usePromocodeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1PublicPromocodeApi
     */
    public promocodePublicControllerCheckPromocode(usePromocodeDto: UsePromocodeDto, options?: AxiosRequestConfig) {
        return V1PublicPromocodeApiFp(this.configuration).promocodePublicControllerCheckPromocode(usePromocodeDto, options).then((request) => request(this.axios, this.basePath));
    }
}


